"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var P = require('bluebird');

var moment = require('moment');

var VError = require('verror');

var _ = require('lodash');

var forestServerRequester = require('./forest-server-requester');

var _require = require('./base-filters-parser'),
    parseFilters = _require.perform;

var logger = require('./logger');

var EXPIRATION_IN_SECONDS = process.env.FOREST_PERMISSIONS_EXPIRATION_IN_SECONDS || 3600;

var PermissionsChecker = /*#__PURE__*/function () {
  function PermissionsChecker(environmentSecret, renderingId) {
    (0, _classCallCheck2["default"])(this, PermissionsChecker);
    this.environmentSecret = environmentSecret;
    this.renderingId = renderingId;
  }

  (0, _createClass2["default"])(PermissionsChecker, [{
    key: "_isAllowed",
    value: function () {
      var _isAllowed2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(collectionName, permissionName, permissionInfos) {
        var permissions;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                permissions = PermissionsChecker.getPermissions(this.renderingId);

                if (!(!permissions || !permissions.data || !permissions.data[collectionName] || !permissions.data[collectionName].collection)) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return", false);

              case 3:
                if (!(permissionName === 'actions')) {
                  _context.next = 5;
                  break;
                }

                return _context.abrupt("return", PermissionsChecker._isSmartActionAllowed(permissions.data[collectionName].actions, permissionInfos));

              case 5:
                if (!(permissionName === 'list')) {
                  _context.next = 7;
                  break;
                }

                return _context.abrupt("return", PermissionsChecker._isCollectionListAllowed(permissions.data[collectionName], permissionInfos));

              case 7:
                return _context.abrupt("return", permissions.data[collectionName].collection[permissionName]);

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function _isAllowed(_x, _x2, _x3) {
        return _isAllowed2.apply(this, arguments);
      }

      return _isAllowed;
    }()
  }, {
    key: "_retrievePermissions",
    value: function _retrievePermissions() {
      var _this = this;

      return forestServerRequester.perform('/liana/v2/permissions', this.environmentSecret, {
        renderingId: this.renderingId
      }).then(function (responseBody) {
        PermissionsChecker._setPermissionsInRendering(_this.renderingId, {
          data: responseBody,
          lastRetrieve: moment()
        });
      })["catch"](function (error) {
        return P.reject(new VError(error, 'Permissions error'));
      });
    }
  }, {
    key: "_isPermissionExpired",
    value: function _isPermissionExpired() {
      var currentTime = moment();
      var lastRetrieve = PermissionsChecker.getLastRetrieveTime(this.renderingId);

      if (!lastRetrieve) {
        return true;
      }

      var elapsedSeconds = currentTime.diff(lastRetrieve, 'seconds');
      return elapsedSeconds >= PermissionsChecker.expirationInSeconds;
    }
  }, {
    key: "_retrievePermissionsAndCheckAllowed",
    value: function () {
      var _retrievePermissionsAndCheckAllowed2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(collectionName, permissionName, permissionInfos) {
        var allowed;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this._retrievePermissions();

              case 2:
                _context2.next = 4;
                return this._isAllowed(collectionName, permissionName, permissionInfos);

              case 4:
                allowed = _context2.sent;

                if (allowed) {
                  _context2.next = 7;
                  break;
                }

                throw new Error("'".concat(permissionName, "' access forbidden on ").concat(collectionName));

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _retrievePermissionsAndCheckAllowed(_x4, _x5, _x6) {
        return _retrievePermissionsAndCheckAllowed2.apply(this, arguments);
      }

      return _retrievePermissionsAndCheckAllowed;
    }()
  }, {
    key: "checkPermissions",
    value: function () {
      var _checkPermissions = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(collectionName, permissionName, permissionInfos) {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!this._isPermissionExpired()) {
                  _context3.next = 2;
                  break;
                }

                return _context3.abrupt("return", this._retrievePermissionsAndCheckAllowed(collectionName, permissionName, permissionInfos));

              case 2:
                _context3.next = 4;
                return this._isAllowed(collectionName, permissionName);

              case 4:
                if (_context3.sent) {
                  _context3.next = 6;
                  break;
                }

                return _context3.abrupt("return", this._retrievePermissionsAndCheckAllowed(collectionName, permissionName, permissionInfos));

              case 6:
                return _context3.abrupt("return", null);

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function checkPermissions(_x7, _x8, _x9) {
        return _checkPermissions.apply(this, arguments);
      }

      return checkPermissions;
    }()
  }], [{
    key: "cleanCache",
    value: function cleanCache() {
      PermissionsChecker.permissionsPerRendering = {};
    }
  }, {
    key: "getPermissions",
    value: function getPermissions(renderingId) {
      return PermissionsChecker.permissionsPerRendering[renderingId];
    }
  }, {
    key: "_setPermissionsInRendering",
    value: function _setPermissionsInRendering(renderingId, permissions) {
      PermissionsChecker.permissionsPerRendering[renderingId] = permissions;
    }
  }, {
    key: "getLastRetrieveTime",
    value: function getLastRetrieveTime(renderingId) {
      var permissions = PermissionsChecker.getPermissions(renderingId);
      return permissions ? permissions.lastRetrieve : null;
    }
  }, {
    key: "resetExpiration",
    value: function resetExpiration(renderingId) {
      var permissions = PermissionsChecker.getPermissions(renderingId);

      if (permissions) {
        permissions.lastRetrieve = null;
      }
    }
  }, {
    key: "_isSmartActionAllowed",
    value: function _isSmartActionAllowed(smartActionsPermissions, permissionInfos) {
      if (!permissionInfos || !permissionInfos.userId || !permissionInfos.actionId || !smartActionsPermissions || !smartActionsPermissions[permissionInfos.actionId]) {
        return false;
      }

      var userId = permissionInfos.userId,
          actionId = permissionInfos.actionId;
      var _smartActionsPermissi = smartActionsPermissions[actionId],
          allowed = _smartActionsPermissi.allowed,
          users = _smartActionsPermissi.users;
      return allowed && (!users || users.includes(parseInt(userId, 10)));
    } // NOTICE: Compute a scope to replace $currentUser variables with
    //         the actual user values. This will generate the expected
    //         conditions filters when applied on the server scope response

  }, {
    key: "_computeConditionFiltersFromScope",
    value: function _computeConditionFiltersFromScope(userId, collectionListScope) {
      var computedConditionFilters = _.clone(collectionListScope.filter);

      computedConditionFilters.conditions.forEach(function (condition) {
        if (condition.value && "".concat(condition.value).startsWith('$') && collectionListScope.dynamicScopesValues.users[userId]) {
          condition.value = collectionListScope.dynamicScopesValues.users[userId][condition.value];
        }
      });
      return computedConditionFilters;
    }
  }, {
    key: "_isAggregationFromScope",
    value: function _isAggregationFromScope(aggregator, conditions, expectedConditionFilters) {
      var filtredConditions = conditions.filter(Boolean); // NOTICE: Exit case - filtredConditions[0] should be the scope

      if (filtredConditions.length === 1 && filtredConditions[0].aggregator && aggregator === 'and') {
        return filtredConditions[0];
      } // NOTICE: During the tree travel, check if `conditions` & `aggregator`
      //         match with expectations


      return filtredConditions.length === expectedConditionFilters.conditions.length && (aggregator === expectedConditionFilters.aggregator || aggregator === 'and') ? {
        aggregator: aggregator,
        conditions: filtredConditions
      } : null;
    } // NOTICE: Check if `expectedConditionFilters` at least contains a definition of
    //         `actualConditionFilters`

  }, {
    key: "_isConditionFromScope",
    value: function _isConditionFromScope(actualFilterCondition, expectedFilterConditions) {
      return expectedFilterConditions.filter(function (expectedCondition) {
        return expectedCondition.value === actualFilterCondition.value && expectedCondition.operator === actualFilterCondition.operator && expectedCondition.field === actualFilterCondition.field;
      }).length > 0;
    }
  }, {
    key: "_isCollectionListAllowed",
    value: function () {
      var _isCollectionListAllowed2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(collectionList, permissionInfos) {
        var expectedConditionFilters, isScopeAggregation, isScopeCondition, scopeFound, isValidSingleConditionScope, isSameScope;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (collectionList.collection.list) {
                  _context4.next = 2;
                  break;
                }

                return _context4.abrupt("return", false);

              case 2:
                if (collectionList.scope) {
                  _context4.next = 4;
                  break;
                }

                return _context4.abrupt("return", true);

              case 4:
                _context4.prev = 4;
                expectedConditionFilters = PermissionsChecker._computeConditionFiltersFromScope(permissionInfos.userId, collectionList.scope); // NOTICE: Find aggregated condition. filtredConditions represent an array
                //         of conditions that were tagged based on if it is present in the
                //         scope

                isScopeAggregation = function isScopeAggregation(aggregator, conditions) {
                  return PermissionsChecker._isAggregationFromScope(aggregator, conditions, expectedConditionFilters);
                }; // NOTICE: Find in a condition correspond to a scope condition or not


                isScopeCondition = function isScopeCondition(condition) {
                  return PermissionsChecker._isConditionFromScope(condition, expectedConditionFilters.conditions);
                }; // NOTICE: Perform a travel to find the scope in filters


                _context4.next = 10;
                return parseFilters(permissionInfos.filters, isScopeAggregation, isScopeCondition);

              case 10:
                scopeFound = _context4.sent;
                // NOTICE: In the case of only one expected condition, server will still send an aggregator
                //         which will not match the request. If one condition is found and is from scope
                //         then the request is valid
                isValidSingleConditionScope = !!scopeFound && expectedConditionFilters.conditions.length === 1;
                isSameScope = !!scopeFound && scopeFound.aggregator === expectedConditionFilters.aggregator && !!scopeFound.conditions && scopeFound.conditions.length === expectedConditionFilters.conditions.length;
                return _context4.abrupt("return", isValidSingleConditionScope || isSameScope);

              case 16:
                _context4.prev = 16;
                _context4.t0 = _context4["catch"](4);
                logger.error(_context4.t0);
                return _context4.abrupt("return", false);

              case 20:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, null, [[4, 16]]);
      }));

      function _isCollectionListAllowed(_x10, _x11) {
        return _isCollectionListAllowed2.apply(this, arguments);
      }

      return _isCollectionListAllowed;
    }()
  }]);
  return PermissionsChecker;
}();

(0, _defineProperty2["default"])(PermissionsChecker, "expirationInSeconds", EXPIRATION_IN_SECONDS);
(0, _defineProperty2["default"])(PermissionsChecker, "permissionsPerRendering", {});
module.exports = PermissionsChecker;