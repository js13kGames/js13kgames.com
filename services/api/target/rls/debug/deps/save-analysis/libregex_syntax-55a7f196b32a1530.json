{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6","program":"/Users/michalbe1/.rustup/toolchains/nightly-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","regex_syntax","/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=55a7f196b32a1530","-C","extra-filename=-55a7f196b32a1530","--out-dir","/Users/michalbe1/devel/newjs13k/services/api/target/rls/debug/deps","-L","dependency=/Users/michalbe1/devel/newjs13k/services/api/target/rls/debug/deps","--extern","ucd_util=/Users/michalbe1/devel/newjs13k/services/api/target/rls/debug/deps/libucd_util-e19a5d8d1a7b65bf.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/michalbe1/.rustup/toolchains/nightly-x86_64-apple-darwin"],"output":"/Users/michalbe1/devel/newjs13k/services/api/target/rls/debug/deps/libregex_syntax-55a7f196b32a1530.rmeta"},"prelude":{"crate_id":{"name":"regex_syntax","disambiguator":[1576689128639005047,18434866624468405815]},"crate_root":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src","external_crates":[{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[6808569418276224980,8091902444602548812]}},{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[10833562988567163873,11907895975404874637]}},{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6030491715995523381,6939416619247443323]}},{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4364625471009584665,8616913656622861429]}},{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15070119675664120447,10764653598938449183]}},{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[14446932166979891859,13796788680444903969]}},{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4540674365961631822,11749211379500188426]}},{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[16620441268985582807,5372845911117199169]}},{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[15238326772427221015,3185571941738431871]}},{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[16365651015763899357,9072023326250020557]}},{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[9816773374668685836,17943315588424835559]}},{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[4748518218637419880,13678101054105708339]}},{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[13277317405865698773,11432793524136214068]}},{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[9112490664938098028,12174892768668613351]}},{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","num":15,"id":{"name":"ucd_util","disambiguator":[11968502498692735370,10401642720404404991]}}],"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":467,"byte_end":7827,"line_start":11,"line_end":222,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2407},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":4512,"byte_end":4517,"line_start":110,"line_end":110,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":405},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":4519,"byte_end":4525,"line_start":110,"line_end":110,"column_start":24,"column_end":30},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2956},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":4545,"byte_end":4551,"line_start":111,"line_end":111,"column_start":18,"column_end":24},"alias_span":null,"name":"Parser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2947},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":4553,"byte_end":4566,"line_start":111,"line_end":111,"column_start":26,"column_end":39},"alias_span":null,"name":"ParserBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":219},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":8434,"byte_end":8441,"line_start":19,"line_end":19,"column_start":24,"column_end":31},"alias_span":null,"name":"Visitor","value":"","parent":{"krate":0,"index":10}},{"kind":"Use","ref_id":{"krate":0,"index":232},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":8443,"byte_end":8448,"line_start":19,"line_end":19,"column_start":33,"column_end":38},"alias_span":null,"name":"visit","value":"","parent":{"krate":0,"index":10}},{"kind":"Use","ref_id":{"krate":0,"index":768},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":302544,"byte_end":302551,"line_start":24,"line_end":24,"column_start":24,"column_end":31},"alias_span":null,"name":"Visitor","value":"","parent":{"krate":0,"index":442}},{"kind":"Use","ref_id":{"krate":0,"index":776},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":302553,"byte_end":302558,"line_start":24,"line_end":24,"column_start":33,"column_end":38},"alias_span":null,"name":"visit","value":"","parent":{"krate":0,"index":442}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":467,"byte_end":7827,"line_start":11,"line_end":222,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":442},{"krate":0,"index":929},{"krate":0,"index":948},{"krate":0,"index":1004},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1421}],"decl_id":null,"docs":"This crate provides a robust regular expression parser.","sig":null,"attributes":[{"value":"!\nThis crate provides a robust regular expression parser.\n\nThis crate defines two primary types:\n\n* [`Ast`](ast/enum.Ast.html) is the abstract syntax of a regular expression.\n  An abstract syntax corresponds to a *structured representation* of the\n  concrete syntax of a regular expression, where the concrete syntax is the\n  pattern string itself (e.g., `foo(bar)+`). Given some abstract syntax, it\n  can be converted back to the original concrete syntax (modulo some details,\n  like whitespace). To a first approximation, the abstract syntax is complex\n  and difficult to analyze.\n* [`Hir`](hir/struct.Hir.html) is the high-level intermediate representation\n  (\"HIR\" or \"high-level IR\" for short) of regular expression. It corresponds to\n  an intermediate state of a regular expression that sits between the abstract\n  syntax and the low level compiled opcodes that are eventually responsible for\n  executing a regular expression search. Given some high-level IR, it is not\n  possible to produce the original concrete syntax (although it is possible to\n  produce an equivalent conrete syntax, but it will likely scarcely resemble\n  the original pattern). To a first approximation, the high-level IR is simple\n  and easy to analyze.\n\nThese two types come with conversion routines:\n\n* An [`ast::parse::Parser`](ast/parse/struct.Parser.html) converts concrete\n  syntax (a `&str`) to an [`Ast`](ast/enum.Ast.html).\n* A [`hir::translate::Translator`](hir/translate/struct.Translator.html)\n  converts an [`Ast`](ast/enum.Ast.html) to a [`Hir`](hir/struct.Hir.html).\n\nAs a convenience, the above two conversion routines are combined into one via\nthe top-level [`Parser`](struct.Parser.html) type. This `Parser` will first\nconvert your pattern to an `Ast` and then convert the `Ast` to an `Hir`.\n\n\n# Example\n\nThis example shows how to parse a pattern string into its HIR:\n\n```\nuse regex_syntax::Parser;\nuse regex_syntax::hir::{self, Hir};\n\nlet hir = Parser::new().parse(\"a|b\").unwrap();\nassert_eq!(hir, Hir::alternation(vec![\n    Hir::literal(hir::Literal::Unicode('a')),\n    Hir::literal(hir::Literal::Unicode('b')),\n]));\n```\n\n\n# Concrete syntax supported\n\nThe concrete syntax is documented as part of the public API of the\n[`regex` crate](https://docs.rs/regex/%2A/regex/#syntax).\n\n\n# Input safety\n\nA key feature of this library is that it is safe to use with end user facing\ninput. This plays a significant role in the internal implementation. In\nparticular:\n\n1. Parsers provide a `nest_limit` option that permits callers to control how\n   deeply nested a regular expression is allowed to be. This makes it possible\n   to do case analysis over an `Ast` or an `Hir` using recursion without\n   worrying about stack overflow.\n2. Since relying on a particular stack size is brittle, this crate goes to\n   great lengths to ensure that all interactions with both the `Ast` and the\n   `Hir` do not use recursion. Namely, they use constant stack space and heap\n   space proportional to the size of the original pattern string (in bytes).\n   This includes the type's corresponding destructors. (One exception to this\n   is literal extraction, but this will eventually get fixed.)\n\n\n# Error reporting\n\nThe `Display` implementations on all `Error` types exposed in this library\nprovide nice human readable errors that are suitable for showing to end users\nin a monospace font.\n\n\n# Literal extraction\n\nThis crate provides limited support for\n[literal extraction from `Hir` values](hir/literal/struct.Literals.html).\nBe warned that literal extraction currently uses recursion, and therefore,\nstack size proportional to the size of the `Hir`.\n\nThe purpose of literal extraction is to speed up searches. That is, if you\nknow a regular expression must match a prefix or suffix literal, then it is\noften quicker to search for instances of that literal, and then confirm or deny\nthe match using the full regular expression engine. These optimizations are\ndone automatically in the `regex` crate.\n*/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":467,"byte_end":4446,"line_start":11,"line_end":104,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":4448,"byte_end":4470,"line_start":106,"line_end":106,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":10},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ast","qualname":"::ast","value":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":153},{"krate":0,"index":214},{"krate":0,"index":1541},{"krate":0,"index":1554},{"krate":0,"index":1552},{"krate":0,"index":1549},{"krate":0,"index":1550},{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":306},{"krate":0,"index":1556},{"krate":0,"index":1627},{"krate":0,"index":1625},{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1618},{"krate":0,"index":1619},{"krate":0,"index":312},{"krate":0,"index":315},{"krate":0,"index":317},{"krate":0,"index":1629},{"krate":0,"index":1640},{"krate":0,"index":1639},{"krate":0,"index":1636},{"krate":0,"index":1637},{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":320},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":1642},{"krate":0,"index":1654},{"krate":0,"index":1653},{"krate":0,"index":1650},{"krate":0,"index":1651},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":339},{"krate":0,"index":1656},{"krate":0,"index":1668},{"krate":0,"index":1666},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1659},{"krate":0,"index":1660},{"krate":0,"index":1670},{"krate":0,"index":1682},{"krate":0,"index":1680},{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1673},{"krate":0,"index":1674},{"krate":0,"index":1684},{"krate":0,"index":1724},{"krate":0,"index":1722},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1715},{"krate":0,"index":1716},{"krate":0,"index":341},{"krate":0,"index":345},{"krate":0,"index":1726},{"krate":0,"index":1738},{"krate":0,"index":1736},{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":348},{"krate":0,"index":1740},{"krate":0,"index":1752},{"krate":0,"index":1750},{"krate":0,"index":1747},{"krate":0,"index":1748},{"krate":0,"index":1743},{"krate":0,"index":1744},{"krate":0,"index":350},{"krate":0,"index":1754},{"krate":0,"index":1767},{"krate":0,"index":1765},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1758},{"krate":0,"index":1759},{"krate":0,"index":352},{"krate":0,"index":1769},{"krate":0,"index":1794},{"krate":0,"index":1792},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1796},{"krate":0,"index":1819},{"krate":0,"index":1817},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1821},{"krate":0,"index":1836},{"krate":0,"index":1834},{"krate":0,"index":1831},{"krate":0,"index":1832},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":354},{"krate":0,"index":1838},{"krate":0,"index":1857},{"krate":0,"index":1855},{"krate":0,"index":1852},{"krate":0,"index":1853},{"krate":0,"index":1848},{"krate":0,"index":1849},{"krate":0,"index":356},{"krate":0,"index":1859},{"krate":0,"index":1872},{"krate":0,"index":1870},{"krate":0,"index":1867},{"krate":0,"index":1868},{"krate":0,"index":1863},{"krate":0,"index":1864},{"krate":0,"index":1874},{"krate":0,"index":1889},{"krate":0,"index":1887},{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1881},{"krate":0,"index":1882},{"krate":0,"index":1891},{"krate":0,"index":1904},{"krate":0,"index":1902},{"krate":0,"index":1899},{"krate":0,"index":1900},{"krate":0,"index":1895},{"krate":0,"index":1896},{"krate":0,"index":1906},{"krate":0,"index":1943},{"krate":0,"index":1941},{"krate":0,"index":1938},{"krate":0,"index":1939},{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":358},{"krate":0,"index":1945},{"krate":0,"index":1958},{"krate":0,"index":1956},{"krate":0,"index":1953},{"krate":0,"index":1954},{"krate":0,"index":1949},{"krate":0,"index":1950},{"krate":0,"index":361},{"krate":0,"index":1960},{"krate":0,"index":1980},{"krate":0,"index":1978},{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1971},{"krate":0,"index":1972},{"krate":0,"index":1982},{"krate":0,"index":1997},{"krate":0,"index":1995},{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":363},{"krate":0,"index":1999},{"krate":0,"index":2012},{"krate":0,"index":2010},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2014},{"krate":0,"index":2030},{"krate":0,"index":2028},{"krate":0,"index":2025},{"krate":0,"index":2026},{"krate":0,"index":2021},{"krate":0,"index":2022},{"krate":0,"index":365},{"krate":0,"index":2032},{"krate":0,"index":2066},{"krate":0,"index":2064},{"krate":0,"index":2061},{"krate":0,"index":2062},{"krate":0,"index":2057},{"krate":0,"index":2058},{"krate":0,"index":369},{"krate":0,"index":2068},{"krate":0,"index":2081},{"krate":0,"index":2079},{"krate":0,"index":2076},{"krate":0,"index":2077},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":371},{"krate":0,"index":2083},{"krate":0,"index":2095},{"krate":0,"index":2093},{"krate":0,"index":2090},{"krate":0,"index":2091},{"krate":0,"index":2086},{"krate":0,"index":2087},{"krate":0,"index":373},{"krate":0,"index":2097},{"krate":0,"index":2111},{"krate":0,"index":2109},{"krate":0,"index":2106},{"krate":0,"index":2107},{"krate":0,"index":2102},{"krate":0,"index":2103},{"krate":0,"index":2113},{"krate":0,"index":2129},{"krate":0,"index":2128},{"krate":0,"index":2126},{"krate":0,"index":2123},{"krate":0,"index":2124},{"krate":0,"index":2120},{"krate":0,"index":2121},{"krate":0,"index":2131},{"krate":0,"index":2143},{"krate":0,"index":2141},{"krate":0,"index":2138},{"krate":0,"index":2139},{"krate":0,"index":2134},{"krate":0,"index":2135},{"krate":0,"index":2145},{"krate":0,"index":2166},{"krate":0,"index":2164},{"krate":0,"index":2161},{"krate":0,"index":2162},{"krate":0,"index":2158},{"krate":0,"index":2159},{"krate":0,"index":2168},{"krate":0,"index":2182},{"krate":0,"index":2180},{"krate":0,"index":2177},{"krate":0,"index":2178},{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2184},{"krate":0,"index":2196},{"krate":0,"index":2194},{"krate":0,"index":2191},{"krate":0,"index":2192},{"krate":0,"index":2187},{"krate":0,"index":2188},{"krate":0,"index":2198},{"krate":0,"index":2217},{"krate":0,"index":2215},{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2208},{"krate":0,"index":2209},{"krate":0,"index":2219},{"krate":0,"index":2239},{"krate":0,"index":2237},{"krate":0,"index":2234},{"krate":0,"index":2235},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":376},{"krate":0,"index":2241},{"krate":0,"index":2254},{"krate":0,"index":2252},{"krate":0,"index":2249},{"krate":0,"index":2250},{"krate":0,"index":2245},{"krate":0,"index":2246},{"krate":0,"index":378},{"krate":0,"index":2256},{"krate":0,"index":2275},{"krate":0,"index":2273},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2277},{"krate":0,"index":2290},{"krate":0,"index":2288},{"krate":0,"index":2285},{"krate":0,"index":2286},{"krate":0,"index":2281},{"krate":0,"index":2282},{"krate":0,"index":2292},{"krate":0,"index":2304},{"krate":0,"index":2302},{"krate":0,"index":2299},{"krate":0,"index":2300},{"krate":0,"index":2295},{"krate":0,"index":2296},{"krate":0,"index":2306},{"krate":0,"index":2318},{"krate":0,"index":2316},{"krate":0,"index":2313},{"krate":0,"index":2314},{"krate":0,"index":2309},{"krate":0,"index":2310},{"krate":0,"index":382},{"krate":0,"index":2320},{"krate":0,"index":2332},{"krate":0,"index":2330},{"krate":0,"index":2327},{"krate":0,"index":2328},{"krate":0,"index":2323},{"krate":0,"index":2324},{"krate":0,"index":2334},{"krate":0,"index":2349},{"krate":0,"index":2347},{"krate":0,"index":2344},{"krate":0,"index":2345},{"krate":0,"index":2340},{"krate":0,"index":2341},{"krate":0,"index":385},{"krate":0,"index":2351},{"krate":0,"index":2373},{"krate":0,"index":2372},{"krate":0,"index":2370},{"krate":0,"index":2367},{"krate":0,"index":2368},{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":387},{"krate":0,"index":392}],"decl_id":null,"docs":"Defines an abstract syntax for regular expressions.\n","sig":null,"attributes":[{"value":"!\nDefines an abstract syntax for regular expressions.\n*/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":8296,"byte_end":8354,"line_start":11,"line_end":13,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":17},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"parse","qualname":"::ast::parse","value":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","parent":null,"children":[{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":1422},{"krate":0,"index":1447},{"krate":0,"index":1445},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":33},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":1449},{"krate":0,"index":1455},{"krate":0,"index":1453},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":1457},{"krate":0,"index":1471},{"krate":0,"index":1469},{"krate":0,"index":1473},{"krate":0,"index":1482},{"krate":0,"index":1478},{"krate":0,"index":1486},{"krate":0,"index":1496},{"krate":0,"index":1494},{"krate":0,"index":1498},{"krate":0,"index":1507},{"krate":0,"index":1505},{"krate":0,"index":53},{"krate":0,"index":58},{"krate":0,"index":99},{"krate":0,"index":1510},{"krate":0,"index":1516},{"krate":0,"index":132},{"krate":0,"index":140}],"decl_id":null,"docs":"This module provides a regular expression parser.\n","sig":null,"attributes":[{"value":"!\nThis module provides a regular expression parser.\n*/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":58364,"byte_end":58420,"line_start":11,"line_end":13,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1449},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":61906,"byte_end":61919,"line_start":121,"line_end":121,"column_start":12,"column_end":25},"name":"ParserBuilder","qualname":"::ast::parse::ParserBuilder","value":"ParserBuilder {  }","parent":null,"children":[{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452}],"decl_id":null,"docs":" A builder for a regular expression parser.","sig":null,"attributes":[{"value":"/ A builder for a regular expression parser.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":61747,"byte_end":61793,"line_start":117,"line_end":117,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":61794,"byte_end":61797,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ This builder permits modifying configuration options for the parser.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":61798,"byte_end":61870,"line_start":119,"line_end":119,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":62197,"byte_end":62200,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<ParserBuilder>::new","value":"fn () -> ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser builder with a default configuration.\n","sig":null,"attributes":[{"value":"/ Create a new parser builder with a default configuration.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":62124,"byte_end":62185,"line_start":134,"line_end":134,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":62438,"byte_end":62443,"line_start":144,"line_end":144,"column_start":12,"column_end":17},"name":"build","qualname":"<ParserBuilder>::build","value":"fn (&self) -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Build a parser from this configuration with the given pattern.\n","sig":null,"attributes":[{"value":"/ Build a parser from this configuration with the given pattern.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":62360,"byte_end":62426,"line_start":143,"line_end":143,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64519,"byte_end":64529,"line_start":185,"line_end":185,"column_start":12,"column_end":22},"name":"nest_limit","qualname":"<ParserBuilder>::nest_limit","value":"fn (&mut self, limit: u32) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the nesting limit for this parser.","sig":null,"attributes":[{"value":"/ Set the nesting limit for this parser.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63052,"byte_end":63094,"line_start":160,"line_end":160,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63099,"byte_end":63102,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ The nesting limit controls how deep the abstract syntax tree is allowed","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63107,"byte_end":63182,"line_start":162,"line_end":162,"column_start":5,"column_end":80}},{"value":"/ to be. If the AST exceeds the given limit (e.g., with too many nested","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63187,"byte_end":63260,"line_start":163,"line_end":163,"column_start":5,"column_end":78}},{"value":"/ groups), then an error is returned by the parser.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63265,"byte_end":63318,"line_start":164,"line_end":164,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63323,"byte_end":63326,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ The purpose of this limit is to act as a heuristic to prevent stack","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63331,"byte_end":63402,"line_start":166,"line_end":166,"column_start":5,"column_end":76}},{"value":"/ overflow for consumers that do structural induction on an `Ast` using","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63407,"byte_end":63480,"line_start":167,"line_end":167,"column_start":5,"column_end":78}},{"value":"/ explicit recursion. While this crate never does this (instead using","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63485,"byte_end":63556,"line_start":168,"line_end":168,"column_start":5,"column_end":76}},{"value":"/ constant stack space and moving the call stack to the heap), other","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63561,"byte_end":63631,"line_start":169,"line_end":169,"column_start":5,"column_end":75}},{"value":"/ crates may.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63636,"byte_end":63651,"line_start":170,"line_end":170,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63656,"byte_end":63659,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ This limit is not checked until the entire Ast is parsed. Therefore,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63664,"byte_end":63736,"line_start":172,"line_end":172,"column_start":5,"column_end":77}},{"value":"/ if callers want to put a limit on the amount of heap space used, then","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63741,"byte_end":63814,"line_start":173,"line_end":173,"column_start":5,"column_end":78}},{"value":"/ they should impose a limit on the length, in bytes, of the concrete","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63819,"byte_end":63890,"line_start":174,"line_end":174,"column_start":5,"column_end":76}},{"value":"/ pattern string. In particular, this is viable since this parser","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63895,"byte_end":63962,"line_start":175,"line_end":175,"column_start":5,"column_end":72}},{"value":"/ implementation will limit itself to heap space proportional to the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":63967,"byte_end":64037,"line_start":176,"line_end":176,"column_start":5,"column_end":75}},{"value":"/ lenth of the pattern string.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64042,"byte_end":64074,"line_start":177,"line_end":177,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64079,"byte_end":64082,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Note that a nest limit of `0` will return a nest limit error for most","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64087,"byte_end":64160,"line_start":179,"line_end":179,"column_start":5,"column_end":78}},{"value":"/ patterns but not all. For example, a nest limit of `0` permits `a` but","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64165,"byte_end":64239,"line_start":180,"line_end":180,"column_start":5,"column_end":79}},{"value":"/ not `ab`, since `ab` requires a concatenation, which results in a nest","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64244,"byte_end":64318,"line_start":181,"line_end":181,"column_start":5,"column_end":79}},{"value":"/ depth of `1`. In general, a nest limit is not something that manifests","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64323,"byte_end":64397,"line_start":182,"line_end":182,"column_start":5,"column_end":79}},{"value":"/ in an obvious way in the concrete syntax, therefore, it should not be","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64402,"byte_end":64475,"line_start":183,"line_end":183,"column_start":5,"column_end":78}},{"value":"/ used in a granular way.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64480,"byte_end":64507,"line_start":184,"line_end":184,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65469,"byte_end":65474,"line_start":205,"line_end":205,"column_start":12,"column_end":17},"name":"octal","qualname":"<ParserBuilder>::octal","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to support octal syntax or not.","sig":null,"attributes":[{"value":"/ Whether to support octal syntax or not.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64634,"byte_end":64677,"line_start":190,"line_end":190,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64682,"byte_end":64685,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ Octal syntax is a little-known way of uttering Unicode codepoints in","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64690,"byte_end":64762,"line_start":192,"line_end":192,"column_start":5,"column_end":77}},{"value":"/ a regular expression. For example, `a`, `\\x61`, `\\u0061` and","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64767,"byte_end":64831,"line_start":193,"line_end":193,"column_start":5,"column_end":69}},{"value":"/ `\\141` are all equivalent regular expressions, where the last example","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64836,"byte_end":64909,"line_start":194,"line_end":194,"column_start":5,"column_end":78}},{"value":"/ shows octal syntax.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64914,"byte_end":64937,"line_start":195,"line_end":195,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64942,"byte_end":64945,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ While supporting octal syntax isn't in and of itself a problem, it does","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":64950,"byte_end":65025,"line_start":197,"line_end":197,"column_start":5,"column_end":80}},{"value":"/ make good error messages harder. That is, in PCRE based regex engines,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65030,"byte_end":65104,"line_start":198,"line_end":198,"column_start":5,"column_end":79}},{"value":"/ syntax like `\\0` invokes a backreference, which is explicitly","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65109,"byte_end":65174,"line_start":199,"line_end":199,"column_start":5,"column_end":70}},{"value":"/ unsupported in Rust's regex engine. However, many users expect it to","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65179,"byte_end":65251,"line_start":200,"line_end":200,"column_start":5,"column_end":77}},{"value":"/ be supported. Therefore, when octal support is disabled, the error","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65256,"byte_end":65326,"line_start":201,"line_end":201,"column_start":5,"column_end":75}},{"value":"/ message will explicitly mention that backreferences aren't supported.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65331,"byte_end":65404,"line_start":202,"line_end":202,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65409,"byte_end":65412,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Octal syntax is disabled by default.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65417,"byte_end":65457,"line_start":204,"line_end":204,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":66018,"byte_end":66035,"line_start":218,"line_end":218,"column_start":12,"column_end":29},"name":"ignore_whitespace","qualname":"<ParserBuilder>::ignore_whitespace","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable verbose mode in the regular expression.","sig":null,"attributes":[{"value":"/ Enable verbose mode in the regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65571,"byte_end":65621,"line_start":210,"line_end":210,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65626,"byte_end":65629,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ When enabled, verbose mode permits insigificant whitespace in many","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65634,"byte_end":65704,"line_start":212,"line_end":212,"column_start":5,"column_end":75}},{"value":"/ places in the regular expression, as well as comments. Comments are","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65709,"byte_end":65780,"line_start":213,"line_end":213,"column_start":5,"column_end":76}},{"value":"/ started using `#` and continue until the end of the line.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65785,"byte_end":65846,"line_start":214,"line_end":214,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65851,"byte_end":65854,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ By default, this is disabled. It may be selectively enabled in the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65859,"byte_end":65929,"line_start":216,"line_end":216,"column_start":5,"column_end":75}},{"value":"/ regular expression by using the `x` flag regardless of this setting.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":65934,"byte_end":66006,"line_start":217,"line_end":217,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1457},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":66510,"byte_end":66516,"line_start":233,"line_end":233,"column_start":12,"column_end":18},"name":"Parser","qualname":"::ast::parse::Parser","value":"Parser {  }","parent":null,"children":[{"krate":0,"index":1458},{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468}],"decl_id":null,"docs":" A regular expression parser.","sig":null,"attributes":[{"value":"/ A regular expression parser.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":66142,"byte_end":66174,"line_start":224,"line_end":224,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":66175,"byte_end":66178,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ This parses a string representation of a regular expression into an","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":66179,"byte_end":66250,"line_start":226,"line_end":226,"column_start":1,"column_end":72}},{"value":"/ abstract syntax tree. The size of the tree is proportional to the length","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":66251,"byte_end":66327,"line_start":227,"line_end":227,"column_start":1,"column_end":77}},{"value":"/ of the regular expression pattern.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":66328,"byte_end":66366,"line_start":228,"line_end":228,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":66367,"byte_end":66370,"line_start":229,"line_end":229,"column_start":1,"column_end":4}},{"value":"/ A `Parser` can be configured in more detail via a","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":66371,"byte_end":66424,"line_start":230,"line_end":230,"column_start":1,"column_end":54}},{"value":"/ [`ParserBuilder`](struct.ParserBuilder.html).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":66425,"byte_end":66474,"line_start":231,"line_end":231,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":71006,"byte_end":71009,"line_start":339,"line_end":339,"column_start":12,"column_end":15},"name":"new","qualname":"<Parser>::new","value":"fn () -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser with a default configuration.","sig":null,"attributes":[{"value":"/ Create a new parser with a default configuration.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":70669,"byte_end":70722,"line_start":332,"line_end":332,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":70727,"byte_end":70730,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ The parser can be run with either the `parse` or `parse_with_comments`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":70735,"byte_end":70809,"line_start":334,"line_end":334,"column_start":5,"column_end":79}},{"value":"/ methods. The parse methods return an abstract syntax tree.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":70814,"byte_end":70876,"line_start":335,"line_end":335,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":70881,"byte_end":70884,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ To set configuration options on the parser, use","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":70889,"byte_end":70940,"line_start":337,"line_end":337,"column_start":5,"column_end":56}},{"value":"/ [`ParserBuilder`](struct.ParserBuilder.html).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":70945,"byte_end":70994,"line_start":338,"line_end":338,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":71146,"byte_end":71151,"line_start":344,"line_end":344,"column_start":12,"column_end":17},"name":"parse","qualname":"<Parser>::parse","value":"fn (&mut self, pattern: &str) -> Result<Ast>","parent":null,"children":[],"decl_id":null,"docs":" Parse the regular expression into an abstract syntax tree.\n","sig":null,"attributes":[{"value":"/ Parse the regular expression into an abstract syntax tree.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":71072,"byte_end":71134,"line_start":343,"line_end":343,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":71384,"byte_end":71403,"line_start":350,"line_end":350,"column_start":12,"column_end":31},"name":"parse_with_comments","qualname":"<Parser>::parse_with_comments","value":"fn (&mut self, pattern: &str) -> Result<ast::WithComments>","parent":null,"children":[],"decl_id":null,"docs":" Parse the regular expression and return an abstract syntax tree with\n all of the comments found in the pattern.\n","sig":null,"attributes":[{"value":"/ Parse the regular expression and return an abstract syntax tree with","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":71250,"byte_end":71322,"line_start":348,"line_end":348,"column_start":5,"column_end":77}},{"value":"/ all of the comments found in the pattern.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":71327,"byte_end":71372,"line_start":349,"line_end":349,"column_start":5,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":153},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"print","qualname":"::ast::print","value":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":1522},{"krate":0,"index":1526},{"krate":0,"index":1524},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":1528},{"krate":0,"index":1530},{"krate":0,"index":166},{"krate":0,"index":1532},{"krate":0,"index":1537},{"krate":0,"index":170},{"krate":0,"index":184}],"decl_id":null,"docs":"This module provides a regular expression printer for `Ast`.\n","sig":null,"attributes":[{"value":"!\nThis module provides a regular expression printer for `Ast`.\n*/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":253456,"byte_end":253523,"line_start":11,"line_end":13,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1528},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254610,"byte_end":254617,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"Printer","qualname":"::ast::print::Printer","value":"Printer {  }","parent":null,"children":[{"krate":0,"index":1529}],"decl_id":null,"docs":" A printer for a regular expression abstract syntax tree.","sig":null,"attributes":[{"value":"/ A printer for a regular expression abstract syntax tree.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254135,"byte_end":254195,"line_start":49,"line_end":49,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254196,"byte_end":254199,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ A printer converts an abstract syntax tree (AST) to a regular expression","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254200,"byte_end":254276,"line_start":51,"line_end":51,"column_start":1,"column_end":77}},{"value":"/ pattern string. This particular printer uses constant stack space and heap","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254277,"byte_end":254355,"line_start":52,"line_end":52,"column_start":1,"column_end":79}},{"value":"/ space proportional to the size of the AST.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254356,"byte_end":254402,"line_start":53,"line_end":53,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254403,"byte_end":254406,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ This printer will not necessarily preserve the original formatting of the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254407,"byte_end":254484,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/ regular expression pattern string. For example, all whitespace and comments","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254485,"byte_end":254564,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/ are ignored.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254565,"byte_end":254581,"line_start":57,"line_end":57,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254694,"byte_end":254697,"line_start":65,"line_end":65,"column_start":12,"column_end":15},"name":"new","qualname":"<Printer>::new","value":"fn () -> Printer","parent":null,"children":[],"decl_id":null,"docs":" Create a new printer.\n","sig":null,"attributes":[{"value":"/ Create a new printer.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254657,"byte_end":254682,"line_start":64,"line_end":64,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":255044,"byte_end":255049,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"print","qualname":"<Printer>::print","value":"fn <W> (&mut self, ast: &Ast, wtr: W) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Print the given `Ast` to the given writer. The writer must implement\n `fmt::Write`. Typical implementations of `fmt::Write` that can be used\n here are a `fmt::Formatter` (which is available in `fmt::Display`\n implementations) or a `&mut String`.\n","sig":null,"attributes":[{"value":"/ Print the given `Ast` to the given writer. The writer must implement","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254762,"byte_end":254834,"line_start":69,"line_end":69,"column_start":5,"column_end":77}},{"value":"/ `fmt::Write`. Typical implementations of `fmt::Write` that can be used","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254839,"byte_end":254913,"line_start":70,"line_end":70,"column_start":5,"column_end":79}},{"value":"/ here are a `fmt::Formatter` (which is available in `fmt::Display`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254918,"byte_end":254987,"line_start":71,"line_end":71,"column_start":5,"column_end":74}},{"value":"/ implementations) or a `&mut String`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254992,"byte_end":255032,"line_start":72,"line_end":72,"column_start":5,"column_end":45}}]},{"kind":"Trait","id":{"krate":0,"index":219},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272960,"byte_end":272967,"line_start":33,"line_end":33,"column_start":11,"column_end":18},"name":"Visitor","qualname":"::ast::visitor::Visitor","value":"Visitor","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":231}],"decl_id":null,"docs":" A trait for visiting an abstract syntax tree (AST) in depth first order.","sig":null,"attributes":[{"value":"/ A trait for visiting an abstract syntax tree (AST) in depth first order.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272052,"byte_end":272128,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272129,"byte_end":272132,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ The principle aim of this trait is to enable callers to perform case","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272133,"byte_end":272205,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ analysis on an abstract syntax tree without necessarily using recursion.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272206,"byte_end":272282,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ In particular, this permits callers to do case analysis with constant stack","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272283,"byte_end":272362,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ usage, which can be important since the size of an abstract syntax tree","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272363,"byte_end":272438,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ may be proportional to end user input.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272439,"byte_end":272481,"line_start":21,"line_end":21,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272482,"byte_end":272485,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Typical usage of this trait involves providing an implementation and then","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272486,"byte_end":272563,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ running it using the [`visit`](fn.visit.html) function.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272564,"byte_end":272623,"line_start":24,"line_end":24,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272624,"byte_end":272627,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Note that the abstract syntax tree for a regular expression is quite","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272628,"byte_end":272700,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ complex. Unless you specifically need it, you might be able to use the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272701,"byte_end":272775,"line_start":27,"line_end":27,"column_start":1,"column_end":75}},{"value":"/ much simpler","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272776,"byte_end":272792,"line_start":28,"line_end":28,"column_start":1,"column_end":17}},{"value":"/ [high-level intermediate representation](../hir/struct.Hir.html)","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272793,"byte_end":272861,"line_start":29,"line_end":29,"column_start":1,"column_end":69}},{"value":"/ and its","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272862,"byte_end":272873,"line_start":30,"line_end":30,"column_start":1,"column_end":12}},{"value":"/ [corresponding `Visitor` trait](../hir/trait.Visitor.html)","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272874,"byte_end":272936,"line_start":31,"line_end":31,"column_start":1,"column_end":63}},{"value":"/ instead.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272937,"byte_end":272949,"line_start":32,"line_end":32,"column_start":1,"column_end":13}}]},{"kind":"Type","id":{"krate":0,"index":220},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273018,"byte_end":273024,"line_start":35,"line_end":35,"column_start":10,"column_end":16},"name":"Output","qualname":"::ast::visitor::Visitor::Output","value":"type Output;","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" The result of visiting an AST.\n","sig":null,"attributes":[{"value":"/ The result of visiting an AST.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":272974,"byte_end":273008,"line_start":34,"line_end":34,"column_start":5,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":221},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273087,"byte_end":273090,"line_start":37,"line_end":37,"column_start":10,"column_end":13},"name":"Err","qualname":"::ast::visitor::Visitor::Err","value":"type Err;","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" An error that visiting an AST might return.\n","sig":null,"attributes":[{"value":"/ An error that visiting an AST might return.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273030,"byte_end":273077,"line_start":36,"line_end":36,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273235,"byte_end":273241,"line_start":41,"line_end":41,"column_start":8,"column_end":14},"name":"finish","qualname":"::ast::visitor::Visitor::finish","value":"fn (self) -> Result<Self::Output, Self::Err>","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" All implementors of `Visitor` must provide a `finish` method, which\n yields the result of visiting the AST or an error.\n","sig":null,"attributes":[{"value":"/ All implementors of `Visitor` must provide a `finish` method, which","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273097,"byte_end":273168,"line_start":39,"line_end":39,"column_start":5,"column_end":76}},{"value":"/ yields the result of visiting the AST or an error.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273173,"byte_end":273227,"line_start":40,"line_end":40,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273361,"byte_end":273366,"line_start":44,"line_end":44,"column_start":8,"column_end":13},"name":"start","qualname":"::ast::visitor::Visitor::start","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" This method is called before beginning traversal of the AST.\n","sig":null,"attributes":[{"value":"/ This method is called before beginning traversal of the AST.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273289,"byte_end":273353,"line_start":43,"line_end":43,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273481,"byte_end":273490,"line_start":48,"line_end":48,"column_start":8,"column_end":17},"name":"visit_pre","qualname":"::ast::visitor::Visitor::visit_pre","value":"fn (&mut self, _ast: &Ast) -> Result<(), Self::Err>","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" This method is called on an `Ast` before descending into child `Ast`\n nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on an `Ast` before descending into child `Ast`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273386,"byte_end":273458,"line_start":46,"line_end":46,"column_start":5,"column_end":77}},{"value":"/ nodes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273463,"byte_end":273473,"line_start":47,"line_end":47,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273667,"byte_end":273677,"line_start":54,"line_end":54,"column_start":8,"column_end":18},"name":"visit_post","qualname":"::ast::visitor::Visitor::visit_post","value":"fn (&mut self, _ast: &Ast) -> Result<(), Self::Err>","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" This method is called on an `Ast` after descending all of its child\n `Ast` nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on an `Ast` after descending all of its child","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273567,"byte_end":273638,"line_start":52,"line_end":52,"column_start":5,"column_end":76}},{"value":"/ `Ast` nodes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273643,"byte_end":273659,"line_start":53,"line_end":53,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273863,"byte_end":273883,"line_start":60,"line_end":60,"column_start":8,"column_end":28},"name":"visit_alternation_in","qualname":"::ast::visitor::Visitor::visit_alternation_in","value":"fn (&mut self) -> Result<(), Self::Err>","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" This method is called between child nodes of an\n [`Alternation`](struct.Alternation.html).\n","sig":null,"attributes":[{"value":"/ This method is called between child nodes of an","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273754,"byte_end":273805,"line_start":58,"line_end":58,"column_start":5,"column_end":56}},{"value":"/ [`Alternation`](struct.Alternation.html).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273810,"byte_end":273855,"line_start":59,"line_end":59,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":274083,"byte_end":274107,"line_start":67,"line_end":67,"column_start":8,"column_end":32},"name":"visit_class_set_item_pre","qualname":"::ast::visitor::Visitor::visit_class_set_item_pre","value":"fn (&mut self, _ast: &ast::ClassSetItem) -> Result<(), Self::Err>","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetItem`](enum.ClassSetItem.html)\n before descending into child nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on every","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273948,"byte_end":273982,"line_start":64,"line_end":64,"column_start":5,"column_end":39}},{"value":"/ [`ClassSetItem`](enum.ClassSetItem.html)","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":273987,"byte_end":274031,"line_start":65,"line_end":65,"column_start":5,"column_end":49}},{"value":"/ before descending into child nodes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":274036,"byte_end":274075,"line_start":66,"line_end":66,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":274355,"byte_end":274380,"line_start":77,"line_end":77,"column_start":8,"column_end":33},"name":"visit_class_set_item_post","qualname":"::ast::visitor::Visitor::visit_class_set_item_post","value":"fn (&mut self, _ast: &ast::ClassSetItem) -> Result<(), Self::Err>","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetItem`](enum.ClassSetItem.html)\n after descending into child nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on every","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":274221,"byte_end":274255,"line_start":74,"line_end":74,"column_start":5,"column_end":39}},{"value":"/ [`ClassSetItem`](enum.ClassSetItem.html)","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":274260,"byte_end":274304,"line_start":75,"line_end":75,"column_start":5,"column_end":49}},{"value":"/ after descending into child nodes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":274309,"byte_end":274347,"line_start":76,"line_end":76,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":274639,"byte_end":274668,"line_start":87,"line_end":87,"column_start":8,"column_end":37},"name":"visit_class_set_binary_op_pre","qualname":"::ast::visitor::Visitor::visit_class_set_binary_op_pre","value":"fn (&mut self, _ast: &ast::ClassSetBinaryOp) -> Result<(), Self::Err>","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html)\n before descending into child nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on every","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":274494,"byte_end":274528,"line_start":84,"line_end":84,"column_start":5,"column_end":39}},{"value":"/ [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html)","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":274533,"byte_end":274587,"line_start":85,"line_end":85,"column_start":5,"column_end":59}},{"value":"/ before descending into child nodes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":274592,"byte_end":274631,"line_start":86,"line_end":86,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":274930,"byte_end":274960,"line_start":97,"line_end":97,"column_start":8,"column_end":38},"name":"visit_class_set_binary_op_post","qualname":"::ast::visitor::Visitor::visit_class_set_binary_op_post","value":"fn (&mut self, _ast: &ast::ClassSetBinaryOp) -> Result<(), Self::Err>","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" This method is called on every\n [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html)\n after descending into child nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on every","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":274786,"byte_end":274820,"line_start":94,"line_end":94,"column_start":5,"column_end":39}},{"value":"/ [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html)","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":274825,"byte_end":274879,"line_start":95,"line_end":95,"column_start":5,"column_end":59}},{"value":"/ after descending into child nodes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":274884,"byte_end":274922,"line_start":96,"line_end":96,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275225,"byte_end":275253,"line_start":106,"line_end":106,"column_start":8,"column_end":36},"name":"visit_class_set_binary_op_in","qualname":"::ast::visitor::Visitor::visit_class_set_binary_op_in","value":"fn (&mut self, _ast: &ast::ClassSetBinaryOp) -> Result<(), Self::Err>","parent":{"krate":0,"index":219},"children":[],"decl_id":null,"docs":" This method is called between the left hand and right hand child nodes\n of a [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html).\n","sig":null,"attributes":[{"value":"/ This method is called between the left hand and right hand child nodes","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275078,"byte_end":275152,"line_start":104,"line_end":104,"column_start":5,"column_end":79}},{"value":"/ of a [`ClassSetBinaryOp`](struct.ClassSetBinaryOp.html).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275157,"byte_end":275217,"line_start":105,"line_end":105,"column_start":5,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":232},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":276119,"byte_end":276124,"line_start":129,"line_end":129,"column_start":8,"column_end":13},"name":"visit","qualname":"::ast::visitor::visit","value":"fn <V> (ast: &Ast, visitor: V) -> Result<V::Output, V::Err>","parent":null,"children":[],"decl_id":null,"docs":" Executes an implementation of `Visitor` in constant stack space.","sig":null,"attributes":[{"value":"/ Executes an implementation of `Visitor` in constant stack space.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275369,"byte_end":275437,"line_start":114,"line_end":114,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275438,"byte_end":275441,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ This function will visit every node in the given `Ast` while calling the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275442,"byte_end":275518,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/ appropriate methods provided by the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275519,"byte_end":275558,"line_start":117,"line_end":117,"column_start":1,"column_end":40}},{"value":"/ [`Visitor`](trait.Visitor.html) trait.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275559,"byte_end":275601,"line_start":118,"line_end":118,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275602,"byte_end":275605,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ The primary use case for this method is when one wants to perform case","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275606,"byte_end":275680,"line_start":120,"line_end":120,"column_start":1,"column_end":75}},{"value":"/ analysis over an `Ast` without using a stack size proportional to the depth","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275681,"byte_end":275760,"line_start":121,"line_end":121,"column_start":1,"column_end":80}},{"value":"/ of the `Ast`. Namely, this method will instead use constant stack size, but","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275761,"byte_end":275840,"line_start":122,"line_end":122,"column_start":1,"column_end":80}},{"value":"/ will use heap space proportional to the size of the `Ast`. This may be","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275841,"byte_end":275915,"line_start":123,"line_end":123,"column_start":1,"column_end":75}},{"value":"/ desirable in cases where the size of `Ast` is proportional to end user","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275916,"byte_end":275990,"line_start":124,"line_end":124,"column_start":1,"column_end":75}},{"value":"/ input.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":275991,"byte_end":276001,"line_start":125,"line_end":125,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":276002,"byte_end":276005,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ If the visitor returns an error at any point, then visiting is stopped and","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":276006,"byte_end":276084,"line_start":127,"line_end":127,"column_start":1,"column_end":79}},{"value":"/ the error is returned.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":276085,"byte_end":276111,"line_start":128,"line_end":128,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1541},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":8952,"byte_end":8957,"line_start":33,"line_end":33,"column_start":12,"column_end":17},"name":"Error","qualname":"::ast::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544}],"decl_id":null,"docs":" An error that occurred while parsing a regular expression into an abstract\n syntax tree.","sig":null,"attributes":[{"value":"/ An error that occurred while parsing a regular expression into an abstract","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":8496,"byte_end":8574,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ syntax tree.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":8575,"byte_end":8591,"line_start":26,"line_end":26,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":8592,"byte_end":8595,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Note that note all ASTs represents a valid regular expression. For example,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":8596,"byte_end":8675,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ an AST is constructed without error for `\\p{Quux}`, but `Quux` is not a","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":8676,"byte_end":8751,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ valid Unicode property name. That particular error is reported when","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":8752,"byte_end":8823,"line_start":30,"line_end":30,"column_start":1,"column_end":72}},{"value":"/ translating an AST to the high-level intermediate representation (`HIR`).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":8824,"byte_end":8901,"line_start":31,"line_end":31,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9280,"byte_end":9284,"line_start":45,"line_end":45,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"fn (&self) -> &ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the type of this error.\n","sig":null,"attributes":[{"value":"/ Return the type of this error.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9234,"byte_end":9268,"line_start":44,"line_end":44,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9498,"byte_end":9505,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"pattern","qualname":"<Error>::pattern","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" The original pattern string in which this error occurred.","sig":null,"attributes":[{"value":"/ The original pattern string in which this error occurred.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9338,"byte_end":9399,"line_start":49,"line_end":49,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9404,"byte_end":9407,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ Every span reported by this error is reported in terms of this string.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9412,"byte_end":9486,"line_start":51,"line_end":51,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9617,"byte_end":9621,"line_start":57,"line_end":57,"column_start":12,"column_end":16},"name":"span","qualname":"<Error>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span at which this error occurred.\n","sig":null,"attributes":[{"value":"/ Return the span at which this error occurred.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9556,"byte_end":9605,"line_start":56,"line_end":56,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":10034,"byte_end":10048,"line_start":66,"line_end":66,"column_start":12,"column_end":26},"name":"auxiliary_span","qualname":"<Error>::auxiliary_span","value":"fn (&self) -> Option<&Span>","parent":null,"children":[],"decl_id":null,"docs":" Return an auxiliary span. This span exists only for some errors that\n benefit from being able to point to two locations in the original\n regular expression. For example, \"duplicate\" errors will have the\n main error position set to the duplicate occurrence while its\n auxiliary span will be set to the initial occurrence.\n","sig":null,"attributes":[{"value":"/ Return an auxiliary span. This span exists only for some errors that","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9670,"byte_end":9742,"line_start":61,"line_end":61,"column_start":5,"column_end":77}},{"value":"/ benefit from being able to point to two locations in the original","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9747,"byte_end":9816,"line_start":62,"line_end":62,"column_start":5,"column_end":74}},{"value":"/ regular expression. For example, \"duplicate\" errors will have the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9821,"byte_end":9890,"line_start":63,"line_end":63,"column_start":5,"column_end":74}},{"value":"/ main error position set to the duplicate occurrence while its","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9895,"byte_end":9960,"line_start":64,"line_end":64,"column_start":5,"column_end":70}},{"value":"/ auxiliary span will be set to the initial occurrence.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9965,"byte_end":10022,"line_start":65,"line_end":65,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1557},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":10824,"byte_end":10844,"line_start":86,"line_end":86,"column_start":5,"column_end":25},"name":"CaptureLimitExceeded","qualname":"::ast::ErrorKind::CaptureLimitExceeded","value":"ErrorKind::CaptureLimitExceeded","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" The capturing group limit was exceeded.","sig":null,"attributes":[{"value":"/ The capturing group limit was exceeded.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":10507,"byte_end":10550,"line_start":80,"line_end":80,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":10555,"byte_end":10558,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Note that this represents a limit on the total number of capturing","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":10563,"byte_end":10633,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/ groups in a regex and not necessarily the number of nested capturing","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":10638,"byte_end":10710,"line_start":83,"line_end":83,"column_start":5,"column_end":77}},{"value":"/ groups. That is, the nest limit can be low and it is still possible for","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":10715,"byte_end":10790,"line_start":84,"line_end":84,"column_start":5,"column_end":80}},{"value":"/ this error to occur.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":10795,"byte_end":10819,"line_start":85,"line_end":85,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1559},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":10921,"byte_end":10939,"line_start":88,"line_end":88,"column_start":5,"column_end":23},"name":"ClassEscapeInvalid","qualname":"::ast::ErrorKind::ClassEscapeInvalid","value":"ErrorKind::ClassEscapeInvalid","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" An invalid escape sequence was found in a character class set.\n","sig":null,"attributes":[{"value":"/ An invalid escape sequence was found in a character class set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":10850,"byte_end":10916,"line_start":87,"line_end":87,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1561},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11076,"byte_end":11093,"line_start":91,"line_end":91,"column_start":5,"column_end":22},"name":"ClassRangeInvalid","qualname":"::ast::ErrorKind::ClassRangeInvalid","value":"ErrorKind::ClassRangeInvalid","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" An invalid character class range was found. An invalid range is any\n range where the start is greater than the end.\n","sig":null,"attributes":[{"value":"/ An invalid character class range was found. An invalid range is any","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":10945,"byte_end":11016,"line_start":89,"line_end":89,"column_start":5,"column_end":76}},{"value":"/ range where the start is greater than the end.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11021,"byte_end":11071,"line_start":90,"line_end":90,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1563},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11314,"byte_end":11331,"line_start":95,"line_end":95,"column_start":5,"column_end":22},"name":"ClassRangeLiteral","qualname":"::ast::ErrorKind::ClassRangeLiteral","value":"ErrorKind::ClassRangeLiteral","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" An invalid range boundary was found in a character class. Range\n boundaries must be a single literal codepoint, but this error indicates\n that something else was found, such as a nested class.\n","sig":null,"attributes":[{"value":"/ An invalid range boundary was found in a character class. Range","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11099,"byte_end":11166,"line_start":92,"line_end":92,"column_start":5,"column_end":72}},{"value":"/ boundaries must be a single literal codepoint, but this error indicates","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11171,"byte_end":11246,"line_start":93,"line_end":93,"column_start":5,"column_end":80}},{"value":"/ that something else was found, such as a nested class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11251,"byte_end":11309,"line_start":94,"line_end":94,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1565},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11405,"byte_end":11418,"line_start":97,"line_end":97,"column_start":5,"column_end":18},"name":"ClassUnclosed","qualname":"::ast::ErrorKind::ClassUnclosed","value":"ErrorKind::ClassUnclosed","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" An opening `[` was found with no corresponding closing `]`.\n","sig":null,"attributes":[{"value":"/ An opening `[` was found with no corresponding closing `]`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11337,"byte_end":11400,"line_start":96,"line_end":96,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1567},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11490,"byte_end":11502,"line_start":99,"line_end":99,"column_start":5,"column_end":17},"name":"DecimalEmpty","qualname":"::ast::ErrorKind::DecimalEmpty","value":"ErrorKind::DecimalEmpty","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" An empty decimal number was given where one was expected.\n","sig":null,"attributes":[{"value":"/ An empty decimal number was given where one was expected.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11424,"byte_end":11485,"line_start":98,"line_end":98,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1569},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11576,"byte_end":11590,"line_start":101,"line_end":101,"column_start":5,"column_end":19},"name":"DecimalInvalid","qualname":"::ast::ErrorKind::DecimalInvalid","value":"ErrorKind::DecimalInvalid","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" An invalid decimal number was given where one was expected.\n","sig":null,"attributes":[{"value":"/ An invalid decimal number was given where one was expected.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11508,"byte_end":11571,"line_start":100,"line_end":100,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1571},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11639,"byte_end":11653,"line_start":103,"line_end":103,"column_start":5,"column_end":19},"name":"EscapeHexEmpty","qualname":"::ast::ErrorKind::EscapeHexEmpty","value":"ErrorKind::EscapeHexEmpty","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" A bracketed hex literal was empty.\n","sig":null,"attributes":[{"value":"/ A bracketed hex literal was empty.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11596,"byte_end":11634,"line_start":102,"line_end":102,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1573},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11737,"byte_end":11753,"line_start":105,"line_end":105,"column_start":5,"column_end":21},"name":"EscapeHexInvalid","qualname":"::ast::ErrorKind::EscapeHexInvalid","value":"ErrorKind::EscapeHexInvalid","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" A bracketed hex literal did not correspond to a Unicode scalar value.\n","sig":null,"attributes":[{"value":"/ A bracketed hex literal did not correspond to a Unicode scalar value.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11659,"byte_end":11732,"line_start":104,"line_end":104,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1575},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11807,"byte_end":11828,"line_start":107,"line_end":107,"column_start":5,"column_end":26},"name":"EscapeHexInvalidDigit","qualname":"::ast::ErrorKind::EscapeHexInvalidDigit","value":"ErrorKind::EscapeHexInvalidDigit","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" An invalid hexadecimal digit was found.\n","sig":null,"attributes":[{"value":"/ An invalid hexadecimal digit was found.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11759,"byte_end":11802,"line_start":106,"line_end":106,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1577},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11897,"byte_end":11916,"line_start":109,"line_end":109,"column_start":5,"column_end":24},"name":"EscapeUnexpectedEof","qualname":"::ast::ErrorKind::EscapeUnexpectedEof","value":"ErrorKind::EscapeUnexpectedEof","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" EOF was found before an escape sequence was completed.\n","sig":null,"attributes":[{"value":"/ EOF was found before an escape sequence was completed.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11834,"byte_end":11892,"line_start":108,"line_end":108,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1579},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11963,"byte_end":11981,"line_start":111,"line_end":111,"column_start":5,"column_end":23},"name":"EscapeUnrecognized","qualname":"::ast::ErrorKind::EscapeUnrecognized","value":"ErrorKind::EscapeUnrecognized","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" An unrecognized escape sequence.\n","sig":null,"attributes":[{"value":"/ An unrecognized escape sequence.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11922,"byte_end":11958,"line_start":110,"line_end":110,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1581},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":12056,"byte_end":12076,"line_start":113,"line_end":113,"column_start":5,"column_end":25},"name":"FlagDanglingNegation","qualname":"::ast::ErrorKind::FlagDanglingNegation","value":"ErrorKind::FlagDanglingNegation","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" A dangling negation was used when setting flags, e.g., `i-`.\n","sig":null,"attributes":[{"value":"/ A dangling negation was used when setting flags, e.g., `i-`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":11987,"byte_end":12051,"line_start":112,"line_end":112,"column_start":5,"column_end":69}}]},{"kind":"StructVariant","id":{"krate":0,"index":1583},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":12126,"byte_end":12139,"line_start":115,"line_end":115,"column_start":5,"column_end":18},"name":"FlagDuplicate","qualname":"::ast::ErrorKind::FlagDuplicate","value":"ErrorKind::FlagDuplicate { original }","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" A flag was used twice, e.g., `i-i`.\n","sig":null,"attributes":[{"value":"/ A flag was used twice, e.g., `i-i`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":12082,"byte_end":12121,"line_start":114,"line_end":114,"column_start":5,"column_end":44}}]},{"kind":"StructVariant","id":{"krate":0,"index":1585},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":12345,"byte_end":12365,"line_start":121,"line_end":121,"column_start":5,"column_end":25},"name":"FlagRepeatedNegation","qualname":"::ast::ErrorKind::FlagRepeatedNegation","value":"ErrorKind::FlagRepeatedNegation { original }","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" The negation operator was used twice, e.g., `-i-s`.\n","sig":null,"attributes":[{"value":"/ The negation operator was used twice, e.g., `-i-s`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":12285,"byte_end":12340,"line_start":120,"line_end":120,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1587},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":12586,"byte_end":12603,"line_start":127,"line_end":127,"column_start":5,"column_end":22},"name":"FlagUnexpectedEof","qualname":"::ast::ErrorKind::FlagUnexpectedEof","value":"ErrorKind::FlagUnexpectedEof","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" Expected a flag but got EOF, e.g., `(?`.\n","sig":null,"attributes":[{"value":"/ Expected a flag but got EOF, e.g., `(?`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":12537,"byte_end":12581,"line_start":126,"line_end":126,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1589},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":12647,"byte_end":12663,"line_start":129,"line_end":129,"column_start":5,"column_end":21},"name":"FlagUnrecognized","qualname":"::ast::ErrorKind::FlagUnrecognized","value":"ErrorKind::FlagUnrecognized","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" Unrecognized flag, e.g., `a`.\n","sig":null,"attributes":[{"value":"/ Unrecognized flag, e.g., `a`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":12609,"byte_end":12642,"line_start":128,"line_end":128,"column_start":5,"column_end":38}}]},{"kind":"StructVariant","id":{"krate":0,"index":1591},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":12713,"byte_end":12731,"line_start":131,"line_end":131,"column_start":5,"column_end":23},"name":"GroupNameDuplicate","qualname":"::ast::ErrorKind::GroupNameDuplicate","value":"ErrorKind::GroupNameDuplicate { original }","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" A duplicate capture name was found.\n","sig":null,"attributes":[{"value":"/ A duplicate capture name was found.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":12669,"byte_end":12708,"line_start":130,"line_end":130,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1593},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":12973,"byte_end":12987,"line_start":137,"line_end":137,"column_start":5,"column_end":19},"name":"GroupNameEmpty","qualname":"::ast::ErrorKind::GroupNameEmpty","value":"ErrorKind::GroupNameEmpty","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" A capture group name is empty, e.g., `(?P<>abc)`.\n","sig":null,"attributes":[{"value":"/ A capture group name is empty, e.g., `(?P<>abc)`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":12915,"byte_end":12968,"line_start":136,"line_end":136,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1595},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13193,"byte_end":13209,"line_start":141,"line_end":141,"column_start":5,"column_end":21},"name":"GroupNameInvalid","qualname":"::ast::ErrorKind::GroupNameInvalid","value":"ErrorKind::GroupNameInvalid","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" An invalid character was seen for a capture group name. This includes\n errors where the first character is a digit (even though subsequent\n characters are allowed to be digits).\n","sig":null,"attributes":[{"value":"/ An invalid character was seen for a capture group name. This includes","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":12993,"byte_end":13066,"line_start":138,"line_end":138,"column_start":5,"column_end":78}},{"value":"/ errors where the first character is a digit (even though subsequent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13071,"byte_end":13142,"line_start":139,"line_end":139,"column_start":5,"column_end":76}},{"value":"/ characters are allowed to be digits).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13147,"byte_end":13188,"line_start":140,"line_end":140,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1597},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13282,"byte_end":13304,"line_start":143,"line_end":143,"column_start":5,"column_end":27},"name":"GroupNameUnexpectedEof","qualname":"::ast::ErrorKind::GroupNameUnexpectedEof","value":"ErrorKind::GroupNameUnexpectedEof","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" A closing `>` could not be found for a capture group name.\n","sig":null,"attributes":[{"value":"/ A closing `>` could not be found for a capture group name.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13215,"byte_end":13277,"line_start":142,"line_end":142,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1599},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13430,"byte_end":13443,"line_start":147,"line_end":147,"column_start":5,"column_end":18},"name":"GroupUnclosed","qualname":"::ast::ErrorKind::GroupUnclosed","value":"ErrorKind::GroupUnclosed","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" An unclosed group, e.g., `(ab`.","sig":null,"attributes":[{"value":"/ An unclosed group, e.g., `(ab`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13310,"byte_end":13345,"line_start":144,"line_end":144,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13350,"byte_end":13353,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ The span of this error corresponds to the unclosed parenthesis.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13358,"byte_end":13425,"line_start":146,"line_end":146,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1601},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13489,"byte_end":13502,"line_start":149,"line_end":149,"column_start":5,"column_end":18},"name":"GroupUnopened","qualname":"::ast::ErrorKind::GroupUnopened","value":"ErrorKind::GroupUnopened","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" An unopened group, e.g., `ab)`.\n","sig":null,"attributes":[{"value":"/ An unopened group, e.g., `ab)`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13449,"byte_end":13484,"line_start":148,"line_end":148,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1603},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13614,"byte_end":13631,"line_start":152,"line_end":152,"column_start":5,"column_end":22},"name":"NestLimitExceeded","qualname":"::ast::ErrorKind::NestLimitExceeded","value":"ErrorKind::NestLimitExceeded(u32)","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" The nest limit was exceeded. The limit stored here is the limit\n configured in the parser.\n","sig":null,"attributes":[{"value":"/ The nest limit was exceeded. The limit stored here is the limit","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13508,"byte_end":13575,"line_start":150,"line_end":150,"column_start":5,"column_end":72}},{"value":"/ configured in the parser.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13580,"byte_end":13609,"line_start":151,"line_end":151,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1606},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13781,"byte_end":13803,"line_start":155,"line_end":155,"column_start":5,"column_end":27},"name":"RepetitionCountInvalid","qualname":"::ast::ErrorKind::RepetitionCountInvalid","value":"ErrorKind::RepetitionCountInvalid","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" The range provided in a counted repetition operator is invalid. The\n range is invalid if the start is greater than the end.\n","sig":null,"attributes":[{"value":"/ The range provided in a counted repetition operator is invalid. The","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13642,"byte_end":13713,"line_start":153,"line_end":153,"column_start":5,"column_end":76}},{"value":"/ range is invalid if the start is greater than the end.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13718,"byte_end":13776,"line_start":154,"line_end":154,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1608},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13877,"byte_end":13900,"line_start":157,"line_end":157,"column_start":5,"column_end":28},"name":"RepetitionCountUnclosed","qualname":"::ast::ErrorKind::RepetitionCountUnclosed","value":"ErrorKind::RepetitionCountUnclosed","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" An opening `{` was found with no corresponding closing `}`.\n","sig":null,"attributes":[{"value":"/ An opening `{` was found with no corresponding closing `}`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13809,"byte_end":13872,"line_start":156,"line_end":156,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1610},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14214,"byte_end":14231,"line_start":162,"line_end":162,"column_start":5,"column_end":22},"name":"RepetitionMissing","qualname":"::ast::ErrorKind::RepetitionMissing","value":"ErrorKind::RepetitionMissing","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" A repetition operator was applied to a missing sub-expression. This\n occurs, for example, in the regex consisting of just a `*` or even\n `(?i)*`. It is, however, possible to create a repetition operating on\n an empty sub-expression. For example, `()*` is still considered valid.\n","sig":null,"attributes":[{"value":"/ A repetition operator was applied to a missing sub-expression. This","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13906,"byte_end":13977,"line_start":158,"line_end":158,"column_start":5,"column_end":76}},{"value":"/ occurs, for example, in the regex consisting of just a `*` or even","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":13982,"byte_end":14052,"line_start":159,"line_end":159,"column_start":5,"column_end":75}},{"value":"/ `(?i)*`. It is, however, possible to create a repetition operating on","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14057,"byte_end":14130,"line_start":160,"line_end":160,"column_start":5,"column_end":78}},{"value":"/ an empty sub-expression. For example, `()*` is still considered valid.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14135,"byte_end":14209,"line_start":161,"line_end":161,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1612},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14440,"byte_end":14464,"line_start":166,"line_end":166,"column_start":5,"column_end":29},"name":"UnsupportedBackreference","qualname":"::ast::ErrorKind::UnsupportedBackreference","value":"ErrorKind::UnsupportedBackreference","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" When octal support is disabled, this error is produced when an octal\n escape is used. The octal escape is assumed to be an invocation of\n a backreference, which is the common case.\n","sig":null,"attributes":[{"value":"/ When octal support is disabled, this error is produced when an octal","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14237,"byte_end":14309,"line_start":163,"line_end":163,"column_start":5,"column_end":77}},{"value":"/ escape is used. The octal escape is assumed to be an invocation of","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14314,"byte_end":14384,"line_start":164,"line_end":164,"column_start":5,"column_end":75}},{"value":"/ a backreference, which is the common case.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14389,"byte_end":14435,"line_start":165,"line_end":165,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1614},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14821,"byte_end":14842,"line_start":172,"line_end":172,"column_start":5,"column_end":26},"name":"UnsupportedLookAround","qualname":"::ast::ErrorKind::UnsupportedLookAround","value":"ErrorKind::UnsupportedLookAround","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" When syntax similar to PCRE's look-around is used, this error is\n returned. Some example syntaxes that are rejected include, but are\n not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and\n `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this\n error is used to improve the user experience.\n","sig":null,"attributes":[{"value":"/ When syntax similar to PCRE's look-around is used, this error is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14470,"byte_end":14538,"line_start":167,"line_end":167,"column_start":5,"column_end":73}},{"value":"/ returned. Some example syntaxes that are rejected include, but are","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14543,"byte_end":14613,"line_start":168,"line_end":168,"column_start":5,"column_end":75}},{"value":"/ not necessarily limited to, `(?=re)`, `(?!re)`, `(?<=re)` and","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14618,"byte_end":14683,"line_start":169,"line_end":169,"column_start":5,"column_end":70}},{"value":"/ `(?<!re)`. Note that all of these syntaxes are otherwise invalid; this","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14688,"byte_end":14762,"line_start":170,"line_end":170,"column_start":5,"column_end":79}},{"value":"/ error is used to improve the user experience.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14767,"byte_end":14816,"line_start":171,"line_end":171,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1616},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":15122,"byte_end":15137,"line_start":179,"line_end":179,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::ast::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":1556},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14848,"byte_end":14902,"line_start":173,"line_end":173,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14907,"byte_end":14910,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14915,"byte_end":14985,"line_start":175,"line_end":175,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":14990,"byte_end":15062,"line_start":176,"line_end":176,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":15067,"byte_end":15098,"line_start":177,"line_end":177,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1556},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":10491,"byte_end":10500,"line_start":79,"line_end":79,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::ast::ErrorKind","value":"ErrorKind::{CaptureLimitExceeded, ClassEscapeInvalid, ClassRangeInvalid, ClassRangeLiteral, ClassUnclosed, DecimalEmpty, DecimalInvalid, EscapeHexEmpty, EscapeHexInvalid, EscapeHexInvalidDigit, EscapeUnexpectedEof, EscapeUnrecognized, FlagDanglingNegation, FlagDuplicate, FlagRepeatedNegation, FlagUnexpectedEof, FlagUnrecognized, GroupNameDuplicate, GroupNameEmpty, GroupNameInvalid, GroupNameUnexpectedEof, GroupUnclosed, GroupUnopened, NestLimitExceeded, RepetitionCountInvalid, RepetitionCountUnclosed, RepetitionMissing, UnsupportedBackreference, UnsupportedLookAround, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":1557},{"krate":0,"index":1559},{"krate":0,"index":1561},{"krate":0,"index":1563},{"krate":0,"index":1565},{"krate":0,"index":1567},{"krate":0,"index":1569},{"krate":0,"index":1571},{"krate":0,"index":1573},{"krate":0,"index":1575},{"krate":0,"index":1577},{"krate":0,"index":1579},{"krate":0,"index":1581},{"krate":0,"index":1583},{"krate":0,"index":1585},{"krate":0,"index":1587},{"krate":0,"index":1589},{"krate":0,"index":1591},{"krate":0,"index":1593},{"krate":0,"index":1595},{"krate":0,"index":1597},{"krate":0,"index":1599},{"krate":0,"index":1601},{"krate":0,"index":1603},{"krate":0,"index":1606},{"krate":0,"index":1608},{"krate":0,"index":1610},{"krate":0,"index":1612},{"krate":0,"index":1614},{"krate":0,"index":1616}],"decl_id":null,"docs":" The type of an error that occurred while building an AST.\n","sig":null,"attributes":[{"value":"/ The type of an error that occurred while building an AST.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":10381,"byte_end":10442,"line_start":77,"line_end":77,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1629},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21282,"byte_end":21286,"line_start":333,"line_end":333,"column_start":12,"column_end":16},"name":"Span","qualname":"::ast::Span","value":"Span { start, end }","parent":null,"children":[{"krate":0,"index":1630},{"krate":0,"index":1631}],"decl_id":null,"docs":" Span represents the position information of a single AST item.","sig":null,"attributes":[{"value":"/ Span represents the position information of a single AST item.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21040,"byte_end":21106,"line_start":328,"line_end":328,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21107,"byte_end":21110,"line_start":329,"line_end":329,"column_start":1,"column_end":4}},{"value":"/ All span positions are absolute byte offsets that can be used on the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21111,"byte_end":21183,"line_start":330,"line_end":330,"column_start":1,"column_end":73}},{"value":"/ original regular expression that was parsed.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21184,"byte_end":21232,"line_start":331,"line_end":331,"column_start":1,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":1630},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21328,"byte_end":21333,"line_start":335,"line_end":335,"column_start":9,"column_end":14},"name":"start","qualname":"::ast::Span::start","value":"ast::Position","parent":{"krate":0,"index":1629},"children":[],"decl_id":null,"docs":" The start byte offset.\n","sig":null,"attributes":[{"value":"/ The start byte offset.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21293,"byte_end":21319,"line_start":334,"line_end":334,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1631},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21382,"byte_end":21385,"line_start":337,"line_end":337,"column_start":9,"column_end":12},"name":"end","qualname":"::ast::Span::end","value":"ast::Position","parent":{"krate":0,"index":1629},"children":[],"decl_id":null,"docs":" The end byte offset.\n","sig":null,"attributes":[{"value":"/ The end byte offset.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21349,"byte_end":21373,"line_start":336,"line_end":336,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1642},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22031,"byte_end":22039,"line_start":363,"line_end":363,"column_start":12,"column_end":20},"name":"Position","qualname":"::ast::Position","value":"Position { offset, line, column }","parent":null,"children":[{"krate":0,"index":1643},{"krate":0,"index":1644},{"krate":0,"index":1645}],"decl_id":null,"docs":" A single position in a regular expression.","sig":null,"attributes":[{"value":"/ A single position in a regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21824,"byte_end":21870,"line_start":358,"line_end":358,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21871,"byte_end":21874,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"/ A position encodes one half of a span, and include the byte offset, line","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21875,"byte_end":21951,"line_start":360,"line_end":360,"column_start":1,"column_end":77}},{"value":"/ number and column number.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21952,"byte_end":21981,"line_start":361,"line_end":361,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":1643},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22181,"byte_end":22187,"line_start":366,"line_end":366,"column_start":9,"column_end":15},"name":"offset","qualname":"::ast::Position::offset","value":"usize","parent":{"krate":0,"index":1642},"children":[],"decl_id":null,"docs":" The absolute offset of this position, starting at `0` from the\n beginning of the regular expression pattern string.\n","sig":null,"attributes":[{"value":"/ The absolute offset of this position, starting at `0` from the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22046,"byte_end":22112,"line_start":364,"line_end":364,"column_start":5,"column_end":71}},{"value":"/ beginning of the regular expression pattern string.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22117,"byte_end":22172,"line_start":365,"line_end":365,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1644},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22246,"byte_end":22250,"line_start":368,"line_end":368,"column_start":9,"column_end":13},"name":"line","qualname":"::ast::Position::line","value":"usize","parent":{"krate":0,"index":1642},"children":[],"decl_id":null,"docs":" The line number, starting at `1`.\n","sig":null,"attributes":[{"value":"/ The line number, starting at `1`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22200,"byte_end":22237,"line_start":367,"line_end":367,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1645},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22323,"byte_end":22329,"line_start":370,"line_end":370,"column_start":9,"column_end":15},"name":"column","qualname":"::ast::Position::column","value":"usize","parent":{"krate":0,"index":1642},"children":[],"decl_id":null,"docs":" The approximate column number, starting at `1`.\n","sig":null,"attributes":[{"value":"/ The approximate column number, starting at `1`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22263,"byte_end":22314,"line_start":369,"line_end":369,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22904,"byte_end":22907,"line_start":396,"line_end":396,"column_start":12,"column_end":15},"name":"new","qualname":"<Span>::new","value":"fn (start: Position, end: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span with the given positions.\n","sig":null,"attributes":[{"value":"/ Create a new span with the given positions.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22845,"byte_end":22892,"line_start":395,"line_end":395,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23081,"byte_end":23086,"line_start":401,"line_end":401,"column_start":12,"column_end":17},"name":"splat","qualname":"<Span>::splat","value":"fn (pos: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span using the given position as the start and end.\n","sig":null,"attributes":[{"value":"/ Create a new span using the given position as the start and end.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23001,"byte_end":23069,"line_start":400,"line_end":400,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23251,"byte_end":23261,"line_start":407,"line_end":407,"column_start":12,"column_end":22},"name":"with_start","qualname":"<Span>::with_start","value":"fn (self, pos: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span by replacing the starting the position with the one\n given.\n","sig":null,"attributes":[{"value":"/ Create a new span by replacing the starting the position with the one","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23151,"byte_end":23224,"line_start":405,"line_end":405,"column_start":5,"column_end":78}},{"value":"/ given.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23229,"byte_end":23239,"line_start":406,"line_end":406,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23438,"byte_end":23446,"line_start":413,"line_end":413,"column_start":12,"column_end":20},"name":"with_end","qualname":"<Span>::with_end","value":"fn (self, pos: Position) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Create a new span by replacing the ending the position with the one\n given.\n","sig":null,"attributes":[{"value":"/ Create a new span by replacing the ending the position with the one","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23340,"byte_end":23411,"line_start":411,"line_end":411,"column_start":5,"column_end":76}},{"value":"/ given.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23416,"byte_end":23426,"line_start":412,"line_end":412,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23601,"byte_end":23612,"line_start":418,"line_end":418,"column_start":12,"column_end":23},"name":"is_one_line","qualname":"<Span>::is_one_line","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this span occurs on a single line.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this span occurs on a single line.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23523,"byte_end":23589,"line_start":417,"line_end":417,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23841,"byte_end":23849,"line_start":424,"line_end":424,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Span>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this span is empty. That is, it points to\n a single position in the concrete syntax of a regular expression.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this span is empty. That is, it points to","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23682,"byte_end":23755,"line_start":422,"line_end":422,"column_start":5,"column_end":78}},{"value":"/ a single position in the concrete syntax of a regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23760,"byte_end":23829,"line_start":423,"line_end":423,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24292,"byte_end":24295,"line_start":438,"line_end":438,"column_start":12,"column_end":15},"name":"new","qualname":"<Position>::new","value":"fn (offset: usize, line: usize, column: usize) -> Position","parent":null,"children":[],"decl_id":null,"docs":" Create a new position with the given information.","sig":null,"attributes":[{"value":"/ Create a new position with the given information.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23941,"byte_end":23994,"line_start":430,"line_end":430,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23999,"byte_end":24002,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ `offset` is the absolute offset of the position, starting at `0` from","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24007,"byte_end":24080,"line_start":432,"line_end":432,"column_start":5,"column_end":78}},{"value":"/ the beginning of the regular expression pattern string.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24085,"byte_end":24144,"line_start":433,"line_end":433,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24149,"byte_end":24152,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ `line` is the line number, starting at `1`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24157,"byte_end":24204,"line_start":435,"line_end":435,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24209,"byte_end":24212,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ `column` is the approximate column number, starting at `1`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24217,"byte_end":24280,"line_start":437,"line_end":437,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":1656},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24737,"byte_end":24749,"line_start":450,"line_end":450,"column_start":12,"column_end":24},"name":"WithComments","qualname":"::ast::WithComments","value":"WithComments { ast, comments }","parent":null,"children":[{"krate":0,"index":1657},{"krate":0,"index":1658}],"decl_id":null,"docs":" An abstract syntax tree for a singular expression along with comments\n found.","sig":null,"attributes":[{"value":"/ An abstract syntax tree for a singular expression along with comments","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24426,"byte_end":24499,"line_start":443,"line_end":443,"column_start":1,"column_end":74}},{"value":"/ found.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24500,"byte_end":24510,"line_start":444,"line_end":444,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24511,"byte_end":24514,"line_start":445,"line_end":445,"column_start":1,"column_end":4}},{"value":"/ Comments are not stored in the tree itself to avoid complexity. Each","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24515,"byte_end":24587,"line_start":446,"line_end":446,"column_start":1,"column_end":73}},{"value":"/ comment contains a span of precisely where it occurred in the original","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24588,"byte_end":24662,"line_start":447,"line_end":447,"column_start":1,"column_end":75}},{"value":"/ regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24663,"byte_end":24686,"line_start":448,"line_end":448,"column_start":1,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":1657},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24784,"byte_end":24787,"line_start":452,"line_end":452,"column_start":9,"column_end":12},"name":"ast","qualname":"::ast::WithComments::ast","value":"ast::Ast","parent":{"krate":0,"index":1656},"children":[],"decl_id":null,"docs":" The actual ast.\n","sig":null,"attributes":[{"value":"/ The actual ast.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24756,"byte_end":24775,"line_start":451,"line_end":451,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":1658},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24865,"byte_end":24873,"line_start":454,"line_end":454,"column_start":9,"column_end":17},"name":"comments","qualname":"::ast::WithComments::comments","value":"std::vec::Vec<ast::Comment>","parent":{"krate":0,"index":1656},"children":[],"decl_id":null,"docs":" All comments found in the original regular expression.\n","sig":null,"attributes":[{"value":"/ All comments found in the original regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24798,"byte_end":24856,"line_start":453,"line_end":453,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1670},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25096,"byte_end":25103,"line_start":462,"line_end":462,"column_start":12,"column_end":19},"name":"Comment","qualname":"::ast::Comment","value":"Comment { span, comment }","parent":null,"children":[{"krate":0,"index":1671},{"krate":0,"index":1672}],"decl_id":null,"docs":" A comment from a regular expression with an associated span.","sig":null,"attributes":[{"value":"/ A comment from a regular expression with an associated span.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24892,"byte_end":24956,"line_start":457,"line_end":457,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24957,"byte_end":24960,"line_start":458,"line_end":458,"column_start":1,"column_end":4}},{"value":"/ A regular expression can only contain comments when the `x` flag is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":24961,"byte_end":25032,"line_start":459,"line_end":459,"column_start":1,"column_end":72}},{"value":"/ enabled.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25033,"byte_end":25045,"line_start":460,"line_end":460,"column_start":1,"column_end":13}}]},{"kind":"Field","id":{"krate":0,"index":1671},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25193,"byte_end":25197,"line_start":464,"line_end":464,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Comment::span","value":"ast::Span","parent":{"krate":0,"index":1670},"children":[],"decl_id":null,"docs":" The span of this comment, including the beginning `#` and ending `\\n`.\n","sig":null,"attributes":[{"value":"/ The span of this comment, including the beginning `#` and ending `\\n`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25110,"byte_end":25184,"line_start":463,"line_end":463,"column_start":5,"column_end":79}}]},{"kind":"Field","id":{"krate":0,"index":1672},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25354,"byte_end":25361,"line_start":467,"line_end":467,"column_start":9,"column_end":16},"name":"comment","qualname":"::ast::Comment::comment","value":"std::string::String","parent":{"krate":0,"index":1670},"children":[],"decl_id":null,"docs":" The comment text, starting with the first character following the `#`\n and ending with the last character preceding the `\\n`.\n","sig":null,"attributes":[{"value":"/ The comment text, starting with the first character following the `#`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25209,"byte_end":25282,"line_start":465,"line_end":465,"column_start":5,"column_end":78}},{"value":"/ and ending with the last character preceding the `\\n`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25287,"byte_end":25345,"line_start":466,"line_end":466,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1685},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25808,"byte_end":25813,"line_start":480,"line_end":480,"column_start":5,"column_end":10},"name":"Empty","qualname":"::ast::Ast::Empty","value":"Ast::Empty(Span)","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" An empty regex that matches everything.\n","sig":null,"attributes":[{"value":"/ An empty regex that matches everything.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25760,"byte_end":25803,"line_start":479,"line_end":479,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1688},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25864,"byte_end":25869,"line_start":482,"line_end":482,"column_start":5,"column_end":10},"name":"Flags","qualname":"::ast::Ast::Flags","value":"Ast::Flags(SetFlags)","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" A set of flags, e.g., `(?is)`.\n","sig":null,"attributes":[{"value":"/ A set of flags, e.g., `(?is)`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25825,"byte_end":25859,"line_start":481,"line_end":481,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1691},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25954,"byte_end":25961,"line_start":484,"line_end":484,"column_start":5,"column_end":12},"name":"Literal","qualname":"::ast::Ast::Literal","value":"Ast::Literal(Literal)","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" A single character literal, which includes escape sequences.\n","sig":null,"attributes":[{"value":"/ A single character literal, which includes escape sequences.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25885,"byte_end":25949,"line_start":483,"line_end":483,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1694},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26011,"byte_end":26014,"line_start":486,"line_end":486,"column_start":5,"column_end":8},"name":"Dot","qualname":"::ast::Ast::Dot","value":"Ast::Dot(Span)","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" The \"any character\" class.\n","sig":null,"attributes":[{"value":"/ The \"any character\" class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25976,"byte_end":26006,"line_start":485,"line_end":485,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1697},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26065,"byte_end":26074,"line_start":488,"line_end":488,"column_start":5,"column_end":14},"name":"Assertion","qualname":"::ast::Ast::Assertion","value":"Ast::Assertion(Assertion)","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" A single zero-width assertion.\n","sig":null,"attributes":[{"value":"/ A single zero-width assertion.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26026,"byte_end":26060,"line_start":487,"line_end":487,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1700},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26240,"byte_end":26245,"line_start":491,"line_end":491,"column_start":5,"column_end":10},"name":"Class","qualname":"::ast::Ast::Class","value":"Ast::Class(Class)","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" A single character class. This includes all forms of character classes\n except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.\n","sig":null,"attributes":[{"value":"/ A single character class. This includes all forms of character classes","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26091,"byte_end":26165,"line_start":489,"line_end":489,"column_start":5,"column_end":79}},{"value":"/ except for `.`. e.g., `\\d`, `\\pN`, `[a-z]` and `[[:alpha:]]`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26170,"byte_end":26235,"line_start":490,"line_end":490,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1703},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26332,"byte_end":26342,"line_start":493,"line_end":493,"column_start":5,"column_end":15},"name":"Repetition","qualname":"::ast::Ast::Repetition","value":"Ast::Repetition(Repetition)","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" A repetition operator applied to an arbitrary regular expression.\n","sig":null,"attributes":[{"value":"/ A repetition operator applied to an arbitrary regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26258,"byte_end":26327,"line_start":492,"line_end":492,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1706},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26398,"byte_end":26403,"line_start":495,"line_end":495,"column_start":5,"column_end":10},"name":"Group","qualname":"::ast::Ast::Group","value":"Ast::Group(Group)","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" A grouped regular expression.\n","sig":null,"attributes":[{"value":"/ A grouped regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26360,"byte_end":26393,"line_start":494,"line_end":494,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1709},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26463,"byte_end":26474,"line_start":497,"line_end":497,"column_start":5,"column_end":16},"name":"Alternation","qualname":"::ast::Ast::Alternation","value":"Ast::Alternation(Alternation)","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" An alternation of regular expressions.\n","sig":null,"attributes":[{"value":"/ An alternation of regular expressions.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26416,"byte_end":26458,"line_start":496,"line_end":496,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1712},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26541,"byte_end":26547,"line_start":499,"line_end":499,"column_start":5,"column_end":11},"name":"Concat","qualname":"::ast::Ast::Concat","value":"Ast::Concat(Concat)","parent":{"krate":0,"index":1684},"children":[],"decl_id":null,"docs":" A concatenation of regular expressions.\n","sig":null,"attributes":[{"value":"/ A concatenation of regular expressions.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26493,"byte_end":26536,"line_start":498,"line_end":498,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":1684},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25750,"byte_end":25753,"line_start":478,"line_end":478,"column_start":10,"column_end":13},"name":"Ast","qualname":"::ast::Ast","value":"Ast::{Empty, Flags, Literal, Dot, Assertion, Class, Repetition, Group, Alternation, Concat}","parent":null,"children":[{"krate":0,"index":1685},{"krate":0,"index":1688},{"krate":0,"index":1691},{"krate":0,"index":1694},{"krate":0,"index":1697},{"krate":0,"index":1700},{"krate":0,"index":1703},{"krate":0,"index":1706},{"krate":0,"index":1709},{"krate":0,"index":1712}],"decl_id":null,"docs":" An abstract syntax tree for a single regular expression.","sig":null,"attributes":[{"value":"/ An abstract syntax tree for a single regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25374,"byte_end":25434,"line_start":470,"line_end":470,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25435,"byte_end":25438,"line_start":471,"line_end":471,"column_start":1,"column_end":4}},{"value":"/ An `Ast`'s `fmt::Display` implementation uses constant stack space and heap","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25439,"byte_end":25518,"line_start":472,"line_end":472,"column_start":1,"column_end":80}},{"value":"/ space proportional to the size of the `Ast`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25519,"byte_end":25567,"line_start":473,"line_end":473,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25568,"byte_end":25571,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ This type defines its own destructor that uses constant stack space and","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25572,"byte_end":25647,"line_start":475,"line_end":475,"column_start":1,"column_end":76}},{"value":"/ heap space proportional to the size of the `Ast`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":25648,"byte_end":25701,"line_start":476,"line_end":476,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26636,"byte_end":26640,"line_start":504,"line_end":504,"column_start":12,"column_end":16},"name":"span","qualname":"<Ast>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this abstract syntax tree.\n","sig":null,"attributes":[{"value":"/ Return the span of this abstract syntax tree.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26575,"byte_end":26624,"line_start":503,"line_end":503,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":27200,"byte_end":27208,"line_start":520,"line_end":520,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Ast>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this Ast is empty.\n","sig":null,"attributes":[{"value":"/ Return true if and only if this Ast is empty.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":27139,"byte_end":27188,"line_start":519,"line_end":519,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1726},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28414,"byte_end":28425,"line_start":562,"line_end":562,"column_start":12,"column_end":23},"name":"Alternation","qualname":"::ast::Alternation","value":"Alternation { span, asts }","parent":null,"children":[{"krate":0,"index":1727},{"krate":0,"index":1728}],"decl_id":null,"docs":" An alternation of regular expressions.\n","sig":null,"attributes":[{"value":"/ An alternation of regular expressions.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28321,"byte_end":28363,"line_start":560,"line_end":560,"column_start":1,"column_end":43}}]},{"kind":"Field","id":{"krate":0,"index":1727},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28474,"byte_end":28478,"line_start":564,"line_end":564,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Alternation::span","value":"ast::Span","parent":{"krate":0,"index":1726},"children":[],"decl_id":null,"docs":" The span of this alternation.\n","sig":null,"attributes":[{"value":"/ The span of this alternation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28432,"byte_end":28465,"line_start":563,"line_end":563,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1728},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28537,"byte_end":28541,"line_start":566,"line_end":566,"column_start":9,"column_end":13},"name":"asts","qualname":"::ast::Alternation::asts","value":"std::vec::Vec<ast::Ast>","parent":{"krate":0,"index":1726},"children":[],"decl_id":null,"docs":" The alternate regular expressions.\n","sig":null,"attributes":[{"value":"/ The alternate regular expressions.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28490,"byte_end":28528,"line_start":565,"line_end":565,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":349},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28855,"byte_end":28863,"line_start":575,"line_end":575,"column_start":12,"column_end":20},"name":"into_ast","qualname":"<Alternation>::into_ast","value":"fn (mut self) -> Ast","parent":null,"children":[],"decl_id":null,"docs":" Return this alternation as an AST.","sig":null,"attributes":[{"value":"/ Return this alternation as an AST.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28579,"byte_end":28617,"line_start":570,"line_end":570,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28622,"byte_end":28625,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ If this alternation contains zero ASTs, then Ast::Empty is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28630,"byte_end":28692,"line_start":572,"line_end":572,"column_start":5,"column_end":67}},{"value":"/ returned. If this alternation contains exactly 1 AST, then the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28697,"byte_end":28763,"line_start":573,"line_end":573,"column_start":5,"column_end":71}},{"value":"/ corresponding AST is returned. Otherwise, Ast::Alternation is returned.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28768,"byte_end":28843,"line_start":574,"line_end":574,"column_start":5,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":1740},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29152,"byte_end":29158,"line_start":586,"line_end":586,"column_start":12,"column_end":18},"name":"Concat","qualname":"::ast::Concat","value":"Concat { span, asts }","parent":null,"children":[{"krate":0,"index":1741},{"krate":0,"index":1742}],"decl_id":null,"docs":" A concatenation of regular expressions.\n","sig":null,"attributes":[{"value":"/ A concatenation of regular expressions.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29058,"byte_end":29101,"line_start":584,"line_end":584,"column_start":1,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":1741},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29209,"byte_end":29213,"line_start":588,"line_end":588,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Concat::span","value":"ast::Span","parent":{"krate":0,"index":1740},"children":[],"decl_id":null,"docs":" The span of this concatenation.\n","sig":null,"attributes":[{"value":"/ The span of this concatenation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29165,"byte_end":29200,"line_start":587,"line_end":587,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1742},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29276,"byte_end":29280,"line_start":590,"line_end":590,"column_start":9,"column_end":13},"name":"asts","qualname":"::ast::Concat::asts","value":"std::vec::Vec<ast::Ast>","parent":{"krate":0,"index":1740},"children":[],"decl_id":null,"docs":" The concatenation regular expressions.\n","sig":null,"attributes":[{"value":"/ The concatenation regular expressions.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29225,"byte_end":29267,"line_start":589,"line_end":589,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":351},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29590,"byte_end":29598,"line_start":599,"line_end":599,"column_start":12,"column_end":20},"name":"into_ast","qualname":"<Concat>::into_ast","value":"fn (mut self) -> Ast","parent":null,"children":[],"decl_id":null,"docs":" Return this concatenation as an AST.","sig":null,"attributes":[{"value":"/ Return this concatenation as an AST.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29313,"byte_end":29353,"line_start":594,"line_end":594,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29358,"byte_end":29361,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ If this concatenation contains zero ASTs, then Ast::Empty is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29366,"byte_end":29430,"line_start":596,"line_end":596,"column_start":5,"column_end":69}},{"value":"/ returned. If this concatenation contains exactly 1 AST, then the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29435,"byte_end":29503,"line_start":597,"line_end":597,"column_start":5,"column_end":73}},{"value":"/ corresponding AST is returned. Otherwise, Ast::Concat is returned.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29508,"byte_end":29578,"line_start":598,"line_end":598,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":1754},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30044,"byte_end":30051,"line_start":614,"line_end":614,"column_start":12,"column_end":19},"name":"Literal","qualname":"::ast::Literal","value":"Literal { span, kind, c }","parent":null,"children":[{"krate":0,"index":1755},{"krate":0,"index":1756},{"krate":0,"index":1757}],"decl_id":null,"docs":" A single literal expression.","sig":null,"attributes":[{"value":"/ A single literal expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29788,"byte_end":29820,"line_start":608,"line_end":608,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29821,"byte_end":29824,"line_start":609,"line_end":609,"column_start":1,"column_end":4}},{"value":"/ A literal corresponds to a single Unicode scalar value. Literals may be","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29825,"byte_end":29900,"line_start":610,"line_end":610,"column_start":1,"column_end":76}},{"value":"/ represented in their literal form, e.g., `a` or in their escaped form,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29901,"byte_end":29975,"line_start":611,"line_end":611,"column_start":1,"column_end":75}},{"value":"/ e.g., `\\x61`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29976,"byte_end":29993,"line_start":612,"line_end":612,"column_start":1,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":1755},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30096,"byte_end":30100,"line_start":616,"line_end":616,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Literal::span","value":"ast::Span","parent":{"krate":0,"index":1754},"children":[],"decl_id":null,"docs":" The span of this literal.\n","sig":null,"attributes":[{"value":"/ The span of this literal.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30058,"byte_end":30087,"line_start":615,"line_end":615,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":1756},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30150,"byte_end":30154,"line_start":618,"line_end":618,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::Literal::kind","value":"ast::LiteralKind","parent":{"krate":0,"index":1754},"children":[],"decl_id":null,"docs":" The kind of this literal.\n","sig":null,"attributes":[{"value":"/ The kind of this literal.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30112,"byte_end":30141,"line_start":617,"line_end":617,"column_start":5,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":1757},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30241,"byte_end":30242,"line_start":620,"line_end":620,"column_start":9,"column_end":10},"name":"c","qualname":"::ast::Literal::c","value":"char","parent":{"krate":0,"index":1754},"children":[],"decl_id":null,"docs":" The Unicode scalar value corresponding to this literal.\n","sig":null,"attributes":[{"value":"/ The Unicode scalar value corresponding to this literal.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30173,"byte_end":30232,"line_start":619,"line_end":619,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":353},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30425,"byte_end":30429,"line_start":626,"line_end":626,"column_start":12,"column_end":16},"name":"byte","qualname":"<Literal>::byte","value":"fn (&self) -> Option<u8>","parent":null,"children":[],"decl_id":null,"docs":" If this literal was written as a `\\x` hex escape, then this returns\n the corresponding byte value. Otherwise, this returns `None`.\n","sig":null,"attributes":[{"value":"/ If this literal was written as a `\\x` hex escape, then this returns","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30272,"byte_end":30343,"line_start":624,"line_end":624,"column_start":5,"column_end":76}},{"value":"/ the corresponding byte value. Otherwise, this returns `None`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30348,"byte_end":30413,"line_start":625,"line_end":625,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1770},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30835,"byte_end":30843,"line_start":640,"line_end":640,"column_start":5,"column_end":13},"name":"Verbatim","qualname":"::ast::LiteralKind::Verbatim","value":"LiteralKind::Verbatim","parent":{"krate":0,"index":1769},"children":[],"decl_id":null,"docs":" The literal is written verbatim, e.g., `a` or `☃`.\n","sig":null,"attributes":[{"value":"/ The literal is written verbatim, e.g., `a` or `☃`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30774,"byte_end":30830,"line_start":639,"line_end":639,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1772},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30948,"byte_end":30959,"line_start":643,"line_end":643,"column_start":5,"column_end":16},"name":"Punctuation","qualname":"::ast::LiteralKind::Punctuation","value":"LiteralKind::Punctuation","parent":{"krate":0,"index":1769},"children":[],"decl_id":null,"docs":" The literal is written as an escape because it is punctuation, e.g.,\n `\\*` or `\\[`.\n","sig":null,"attributes":[{"value":"/ The literal is written as an escape because it is punctuation, e.g.,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30849,"byte_end":30921,"line_start":641,"line_end":641,"column_start":5,"column_end":77}},{"value":"/ `\\*` or `\\[`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30926,"byte_end":30943,"line_start":642,"line_end":642,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1774},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31030,"byte_end":31035,"line_start":645,"line_end":645,"column_start":5,"column_end":10},"name":"Octal","qualname":"::ast::LiteralKind::Octal","value":"LiteralKind::Octal","parent":{"krate":0,"index":1769},"children":[],"decl_id":null,"docs":" The literal is written as an octal escape, e.g., `\\141`.\n","sig":null,"attributes":[{"value":"/ The literal is written as an octal escape, e.g., `\\141`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30965,"byte_end":31025,"line_start":644,"line_end":644,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1776},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31214,"byte_end":31222,"line_start":649,"line_end":649,"column_start":5,"column_end":13},"name":"HexFixed","qualname":"::ast::LiteralKind::HexFixed","value":"LiteralKind::HexFixed(HexLiteralKind)","parent":{"krate":0,"index":1769},"children":[],"decl_id":null,"docs":" The literal is written as a hex code with a fixed number of digits\n depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or\n `\\U00000061`.\n","sig":null,"attributes":[{"value":"/ The literal is written as a hex code with a fixed number of digits","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31041,"byte_end":31111,"line_start":646,"line_end":646,"column_start":5,"column_end":75}},{"value":"/ depending on the type of the escape, e.g., `\\x61` or or `\\u0061` or","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31116,"byte_end":31187,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/ `\\U00000061`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31192,"byte_end":31209,"line_start":648,"line_end":648,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1779},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31436,"byte_end":31444,"line_start":653,"line_end":653,"column_start":5,"column_end":13},"name":"HexBrace","qualname":"::ast::LiteralKind::HexBrace","value":"LiteralKind::HexBrace(HexLiteralKind)","parent":{"krate":0,"index":1769},"children":[],"decl_id":null,"docs":" The literal is written as a hex code with a bracketed number of\n digits. The only restriction is that the bracketed hex code must refer\n to a valid Unicode scalar value.\n","sig":null,"attributes":[{"value":"/ The literal is written as a hex code with a bracketed number of","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31244,"byte_end":31311,"line_start":650,"line_end":650,"column_start":5,"column_end":72}},{"value":"/ digits. The only restriction is that the bracketed hex code must refer","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31316,"byte_end":31390,"line_start":651,"line_end":651,"column_start":5,"column_end":79}},{"value":"/ to a valid Unicode scalar value.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31395,"byte_end":31431,"line_start":652,"line_end":652,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1782},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31559,"byte_end":31566,"line_start":656,"line_end":656,"column_start":5,"column_end":12},"name":"Special","qualname":"::ast::LiteralKind::Special","value":"LiteralKind::Special(SpecialLiteralKind)","parent":{"krate":0,"index":1769},"children":[],"decl_id":null,"docs":" The literal is written as a specially recognized escape, e.g., `\\f`\n or `\\n`.\n","sig":null,"attributes":[{"value":"/ The literal is written as a specially recognized escape, e.g., `\\f`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31466,"byte_end":31537,"line_start":654,"line_end":654,"column_start":5,"column_end":76}},{"value":"/ or `\\n`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31542,"byte_end":31554,"line_start":655,"line_end":655,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":1769},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30756,"byte_end":30767,"line_start":638,"line_end":638,"column_start":10,"column_end":21},"name":"LiteralKind","qualname":"::ast::LiteralKind","value":"LiteralKind::{Verbatim, Punctuation, Octal, HexFixed, HexBrace, Special}","parent":null,"children":[{"krate":0,"index":1770},{"krate":0,"index":1772},{"krate":0,"index":1774},{"krate":0,"index":1776},{"krate":0,"index":1779},{"krate":0,"index":1782}],"decl_id":null,"docs":" The kind of a single literal expression.\n","sig":null,"attributes":[{"value":"/ The kind of a single literal expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30663,"byte_end":30707,"line_start":636,"line_end":636,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1797},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31847,"byte_end":31851,"line_start":666,"line_end":666,"column_start":5,"column_end":9},"name":"Bell","qualname":"::ast::SpecialLiteralKind::Bell","value":"SpecialLiteralKind::Bell","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" Bell, spelled `\\a` (`\\x07`).\n","sig":null,"attributes":[{"value":"/ Bell, spelled `\\a` (`\\x07`).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31810,"byte_end":31842,"line_start":665,"line_end":665,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1799},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31899,"byte_end":31907,"line_start":668,"line_end":668,"column_start":5,"column_end":13},"name":"FormFeed","qualname":"::ast::SpecialLiteralKind::FormFeed","value":"SpecialLiteralKind::FormFeed","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" Form feed, spelled `\\f` (`\\x0C`).\n","sig":null,"attributes":[{"value":"/ Form feed, spelled `\\f` (`\\x0C`).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31857,"byte_end":31894,"line_start":667,"line_end":667,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1801},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31949,"byte_end":31952,"line_start":670,"line_end":670,"column_start":5,"column_end":8},"name":"Tab","qualname":"::ast::SpecialLiteralKind::Tab","value":"SpecialLiteralKind::Tab","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" Tab, spelled `\\t` (`\\x09`).\n","sig":null,"attributes":[{"value":"/ Tab, spelled `\\t` (`\\x09`).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31913,"byte_end":31944,"line_start":669,"line_end":669,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1803},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32000,"byte_end":32008,"line_start":672,"line_end":672,"column_start":5,"column_end":13},"name":"LineFeed","qualname":"::ast::SpecialLiteralKind::LineFeed","value":"SpecialLiteralKind::LineFeed","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" Line feed, spelled `\\n` (`\\x0A`).\n","sig":null,"attributes":[{"value":"/ Line feed, spelled `\\n` (`\\x0A`).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31958,"byte_end":31995,"line_start":671,"line_end":671,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1805},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32062,"byte_end":32076,"line_start":674,"line_end":674,"column_start":5,"column_end":19},"name":"CarriageReturn","qualname":"::ast::SpecialLiteralKind::CarriageReturn","value":"SpecialLiteralKind::CarriageReturn","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" Carriage return, spelled `\\r` (`\\x0D`).\n","sig":null,"attributes":[{"value":"/ Carriage return, spelled `\\r` (`\\x0D`).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32014,"byte_end":32057,"line_start":673,"line_end":673,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1807},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32127,"byte_end":32138,"line_start":676,"line_end":676,"column_start":5,"column_end":16},"name":"VerticalTab","qualname":"::ast::SpecialLiteralKind::VerticalTab","value":"SpecialLiteralKind::VerticalTab","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" Vertical tab, spelled `\\v` (`\\x0B`).\n","sig":null,"attributes":[{"value":"/ Vertical tab, spelled `\\v` (`\\x0B`).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32082,"byte_end":32122,"line_start":675,"line_end":675,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1809},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32251,"byte_end":32256,"line_start":679,"line_end":679,"column_start":5,"column_end":10},"name":"Space","qualname":"::ast::SpecialLiteralKind::Space","value":"SpecialLiteralKind::Space","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" Space, spelled `\\ ` (`\\x20`). Note that this can only appear when\n parsing in verbose mode.\n","sig":null,"attributes":[{"value":"/ Space, spelled `\\ ` (`\\x20`). Note that this can only appear when","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32144,"byte_end":32213,"line_start":677,"line_end":677,"column_start":5,"column_end":74}},{"value":"/ parsing in verbose mode.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32218,"byte_end":32246,"line_start":678,"line_end":678,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":1796},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31785,"byte_end":31803,"line_start":664,"line_end":664,"column_start":10,"column_end":28},"name":"SpecialLiteralKind","qualname":"::ast::SpecialLiteralKind","value":"SpecialLiteralKind::{Bell, FormFeed, Tab, LineFeed, CarriageReturn, VerticalTab, Space}","parent":null,"children":[{"krate":0,"index":1797},{"krate":0,"index":1799},{"krate":0,"index":1801},{"krate":0,"index":1803},{"krate":0,"index":1805},{"krate":0,"index":1807},{"krate":0,"index":1809}],"decl_id":null,"docs":" The type of a special literal.","sig":null,"attributes":[{"value":"/ The type of a special literal.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31591,"byte_end":31625,"line_start":659,"line_end":659,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31626,"byte_end":31629,"line_start":660,"line_end":660,"column_start":1,"column_end":4}},{"value":"/ A special literal is a special escape sequence recognized by the regex","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31630,"byte_end":31704,"line_start":661,"line_end":661,"column_start":1,"column_end":75}},{"value":"/ parser, e.g., `\\f` or `\\n`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":31705,"byte_end":31736,"line_start":662,"line_end":662,"column_start":1,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1822},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32634,"byte_end":32635,"line_start":691,"line_end":691,"column_start":5,"column_end":6},"name":"X","qualname":"::ast::HexLiteralKind::X","value":"HexLiteralKind::X","parent":{"krate":0,"index":1821},"children":[],"decl_id":null,"docs":" A `\\x` prefix. When used without brackets, this form is limited to\n two digits.\n","sig":null,"attributes":[{"value":"/ A `\\x` prefix. When used without brackets, this form is limited to","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32539,"byte_end":32609,"line_start":689,"line_end":689,"column_start":5,"column_end":75}},{"value":"/ two digits.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32614,"byte_end":32629,"line_start":690,"line_end":690,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1824},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32737,"byte_end":32749,"line_start":694,"line_end":694,"column_start":5,"column_end":17},"name":"UnicodeShort","qualname":"::ast::HexLiteralKind::UnicodeShort","value":"HexLiteralKind::UnicodeShort","parent":{"krate":0,"index":1821},"children":[],"decl_id":null,"docs":" A `\\u` prefix. When used without brackets, this form is limited to\n four digits.\n","sig":null,"attributes":[{"value":"/ A `\\u` prefix. When used without brackets, this form is limited to","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32641,"byte_end":32711,"line_start":692,"line_end":692,"column_start":5,"column_end":75}},{"value":"/ four digits.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32716,"byte_end":32732,"line_start":693,"line_end":693,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1826},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32852,"byte_end":32863,"line_start":697,"line_end":697,"column_start":5,"column_end":16},"name":"UnicodeLong","qualname":"::ast::HexLiteralKind::UnicodeLong","value":"HexLiteralKind::UnicodeLong","parent":{"krate":0,"index":1821},"children":[],"decl_id":null,"docs":" A `\\U` prefix. When used without brackets, this form is limited to\n eight digits.\n","sig":null,"attributes":[{"value":"/ A `\\U` prefix. When used without brackets, this form is limited to","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32755,"byte_end":32825,"line_start":695,"line_end":695,"column_start":5,"column_end":75}},{"value":"/ eight digits.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32830,"byte_end":32847,"line_start":696,"line_end":696,"column_start":5,"column_end":22}}]},{"kind":"Enum","id":{"krate":0,"index":1821},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32518,"byte_end":32532,"line_start":688,"line_end":688,"column_start":10,"column_end":24},"name":"HexLiteralKind","qualname":"::ast::HexLiteralKind","value":"HexLiteralKind::{X, UnicodeShort, UnicodeLong}","parent":null,"children":[{"krate":0,"index":1822},{"krate":0,"index":1824},{"krate":0,"index":1826}],"decl_id":null,"docs":" The type of a Unicode hex literal.","sig":null,"attributes":[{"value":"/ The type of a Unicode hex literal.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32261,"byte_end":32299,"line_start":682,"line_end":682,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32300,"byte_end":32303,"line_start":683,"line_end":683,"column_start":1,"column_end":4}},{"value":"/ Note that all variants behave the same when used with brackets. They only","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32304,"byte_end":32381,"line_start":684,"line_end":684,"column_start":1,"column_end":78}},{"value":"/ differ when used without brackets in the number of hex digits that must","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32382,"byte_end":32457,"line_start":685,"line_end":685,"column_start":1,"column_end":76}},{"value":"/ follow.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32458,"byte_end":32469,"line_start":686,"line_end":686,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33089,"byte_end":33095,"line_start":704,"line_end":704,"column_start":12,"column_end":18},"name":"digits","qualname":"<HexLiteralKind>::digits","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The number of digits that must be used with this literal form when\n used without brackets. When used with brackets, there is no\n restriction on the number of digits.\n","sig":null,"attributes":[{"value":"/ The number of digits that must be used with this literal form when","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32894,"byte_end":32964,"line_start":701,"line_end":701,"column_start":5,"column_end":75}},{"value":"/ used without brackets. When used with brackets, there is no","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32969,"byte_end":33032,"line_start":702,"line_end":702,"column_start":5,"column_end":68}},{"value":"/ restriction on the number of digits.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33037,"byte_end":33077,"line_start":703,"line_end":703,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1839},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33446,"byte_end":33453,"line_start":717,"line_end":717,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::ast::Class::Unicode","value":"Class::Unicode(ClassUnicode)","parent":{"krate":0,"index":1838},"children":[],"decl_id":null,"docs":" A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n","sig":null,"attributes":[{"value":"/ A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33383,"byte_end":33441,"line_start":716,"line_end":716,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1842},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33525,"byte_end":33529,"line_start":719,"line_end":719,"column_start":5,"column_end":9},"name":"Perl","qualname":"::ast::Class::Perl","value":"Class::Perl(ClassPerl)","parent":{"krate":0,"index":1838},"children":[],"decl_id":null,"docs":" A perl character class, e.g., `\\d` or `\\W`.\n","sig":null,"attributes":[{"value":"/ A perl character class, e.g., `\\d` or `\\W`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33473,"byte_end":33520,"line_start":718,"line_end":718,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1845},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33708,"byte_end":33717,"line_start":723,"line_end":723,"column_start":5,"column_end":14},"name":"Bracketed","qualname":"::ast::Class::Bracketed","value":"Class::Bracketed(ClassBracketed)","parent":{"krate":0,"index":1838},"children":[],"decl_id":null,"docs":" A bracketed character class set, which may contain zero or more\n character ranges and/or zero or more nested classes. e.g.,\n `[a-zA-Z\\pL]`.\n","sig":null,"attributes":[{"value":"/ A bracketed character class set, which may contain zero or more","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33546,"byte_end":33613,"line_start":720,"line_end":720,"column_start":5,"column_end":72}},{"value":"/ character ranges and/or zero or more nested classes. e.g.,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33618,"byte_end":33680,"line_start":721,"line_end":721,"column_start":5,"column_end":67}},{"value":"/ `[a-zA-Z\\pL]`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33685,"byte_end":33703,"line_start":722,"line_end":722,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1838},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33371,"byte_end":33376,"line_start":715,"line_end":715,"column_start":10,"column_end":15},"name":"Class","qualname":"::ast::Class","value":"Class::{Unicode, Perl, Bracketed}","parent":null,"children":[{"krate":0,"index":1839},{"krate":0,"index":1842},{"krate":0,"index":1845}],"decl_id":null,"docs":" A single character class expression.\n","sig":null,"attributes":[{"value":"/ A single character class expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33282,"byte_end":33322,"line_start":713,"line_end":713,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33811,"byte_end":33815,"line_start":728,"line_end":728,"column_start":12,"column_end":16},"name":"span","qualname":"<Class>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this character class.\n","sig":null,"attributes":[{"value":"/ Return the span of this character class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33755,"byte_end":33799,"line_start":727,"line_end":727,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1859},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34090,"byte_end":34099,"line_start":739,"line_end":739,"column_start":12,"column_end":21},"name":"ClassPerl","qualname":"::ast::ClassPerl","value":"ClassPerl { span, kind, negated }","parent":null,"children":[{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1862}],"decl_id":null,"docs":" A Perl character class.\n","sig":null,"attributes":[{"value":"/ A Perl character class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34012,"byte_end":34039,"line_start":737,"line_end":737,"column_start":1,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":1860},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34142,"byte_end":34146,"line_start":741,"line_end":741,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassPerl::span","value":"ast::Span","parent":{"krate":0,"index":1859},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[{"value":"/ The span of this class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34106,"byte_end":34133,"line_start":740,"line_end":740,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1861},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34194,"byte_end":34198,"line_start":743,"line_end":743,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassPerl::kind","value":"ast::ClassPerlKind","parent":{"krate":0,"index":1859},"children":[],"decl_id":null,"docs":" The kind of Perl class.\n","sig":null,"attributes":[{"value":"/ The kind of Perl class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34158,"byte_end":34185,"line_start":742,"line_end":742,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1862},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34315,"byte_end":34322,"line_start":746,"line_end":746,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassPerl::negated","value":"bool","parent":{"krate":0,"index":1859},"children":[],"decl_id":null,"docs":" Whether the class is negated or not. e.g., `\\d` is not negated but\n `\\D` is.\n","sig":null,"attributes":[{"value":"/ Whether the class is negated or not. e.g., `\\d` is not negated but","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34219,"byte_end":34289,"line_start":744,"line_end":744,"column_start":5,"column_end":75}},{"value":"/ `\\D` is.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34294,"byte_end":34306,"line_start":745,"line_end":745,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1875},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34468,"byte_end":34473,"line_start":753,"line_end":753,"column_start":5,"column_end":10},"name":"Digit","qualname":"::ast::ClassPerlKind::Digit","value":"ClassPerlKind::Digit","parent":{"krate":0,"index":1874},"children":[],"decl_id":null,"docs":" Decimal numbers.\n","sig":null,"attributes":[{"value":"/ Decimal numbers.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34443,"byte_end":34463,"line_start":752,"line_end":752,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1877},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34499,"byte_end":34504,"line_start":755,"line_end":755,"column_start":5,"column_end":10},"name":"Space","qualname":"::ast::ClassPerlKind::Space","value":"ClassPerlKind::Space","parent":{"krate":0,"index":1874},"children":[],"decl_id":null,"docs":" Whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34479,"byte_end":34494,"line_start":754,"line_end":754,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1879},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34535,"byte_end":34539,"line_start":757,"line_end":757,"column_start":5,"column_end":9},"name":"Word","qualname":"::ast::ClassPerlKind::Word","value":"ClassPerlKind::Word","parent":{"krate":0,"index":1874},"children":[],"decl_id":null,"docs":" Word characters.\n","sig":null,"attributes":[{"value":"/ Word characters.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34510,"byte_end":34530,"line_start":756,"line_end":756,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":1874},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34423,"byte_end":34436,"line_start":751,"line_end":751,"column_start":10,"column_end":23},"name":"ClassPerlKind","qualname":"::ast::ClassPerlKind","value":"ClassPerlKind::{Digit, Space, Word}","parent":null,"children":[{"krate":0,"index":1875},{"krate":0,"index":1877},{"krate":0,"index":1879}],"decl_id":null,"docs":" The available Perl character classes.\n","sig":null,"attributes":[{"value":"/ The available Perl character classes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34333,"byte_end":34374,"line_start":749,"line_end":749,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1891},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34624,"byte_end":34634,"line_start":762,"line_end":762,"column_start":12,"column_end":22},"name":"ClassAscii","qualname":"::ast::ClassAscii","value":"ClassAscii { span, kind, negated }","parent":null,"children":[{"krate":0,"index":1892},{"krate":0,"index":1893},{"krate":0,"index":1894}],"decl_id":null,"docs":" An ASCII character class.\n","sig":null,"attributes":[{"value":"/ An ASCII character class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34544,"byte_end":34573,"line_start":760,"line_end":760,"column_start":1,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":1892},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34677,"byte_end":34681,"line_start":764,"line_end":764,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassAscii::span","value":"ast::Span","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[{"value":"/ The span of this class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34641,"byte_end":34668,"line_start":763,"line_end":763,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1893},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34730,"byte_end":34734,"line_start":766,"line_end":766,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassAscii::kind","value":"ast::ClassAsciiKind","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" The kind of ASCII class.\n","sig":null,"attributes":[{"value":"/ The kind of ASCII class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34693,"byte_end":34721,"line_start":765,"line_end":765,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1894},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34871,"byte_end":34878,"line_start":769,"line_end":769,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassAscii::negated","value":"bool","parent":{"krate":0,"index":1891},"children":[],"decl_id":null,"docs":" Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated\n but `[[:^alpha:]]` is.\n","sig":null,"attributes":[{"value":"/ Whether the class is negated or not. e.g., `[[:alpha:]]` is not negated","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34756,"byte_end":34831,"line_start":767,"line_end":767,"column_start":5,"column_end":80}},{"value":"/ but `[[:^alpha:]]` is.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34836,"byte_end":34862,"line_start":768,"line_end":768,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1907},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35023,"byte_end":35028,"line_start":776,"line_end":776,"column_start":5,"column_end":10},"name":"Alnum","qualname":"::ast::ClassAsciiKind::Alnum","value":"ClassAsciiKind::Alnum","parent":{"krate":0,"index":1906},"children":[],"decl_id":null,"docs":" `[0-9A-Za-z]`\n","sig":null,"attributes":[{"value":"/ `[0-9A-Za-z]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35001,"byte_end":35018,"line_start":775,"line_end":775,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1909},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35053,"byte_end":35058,"line_start":778,"line_end":778,"column_start":5,"column_end":10},"name":"Alpha","qualname":"::ast::ClassAsciiKind::Alpha","value":"ClassAsciiKind::Alpha","parent":{"krate":0,"index":1906},"children":[],"decl_id":null,"docs":" `[A-Za-z]`\n","sig":null,"attributes":[{"value":"/ `[A-Za-z]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35034,"byte_end":35048,"line_start":777,"line_end":777,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1911},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35086,"byte_end":35091,"line_start":780,"line_end":780,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::ast::ClassAsciiKind::Ascii","value":"ClassAsciiKind::Ascii","parent":{"krate":0,"index":1906},"children":[],"decl_id":null,"docs":" `[\\x00-\\x7F]`\n","sig":null,"attributes":[{"value":"/ `[\\x00-\\x7F]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35064,"byte_end":35081,"line_start":779,"line_end":779,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1913},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35113,"byte_end":35118,"line_start":782,"line_end":782,"column_start":5,"column_end":10},"name":"Blank","qualname":"::ast::ClassAsciiKind::Blank","value":"ClassAsciiKind::Blank","parent":{"krate":0,"index":1906},"children":[],"decl_id":null,"docs":" `[ \\t]`\n","sig":null,"attributes":[{"value":"/ `[ \\t]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35097,"byte_end":35108,"line_start":781,"line_end":781,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1915},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35150,"byte_end":35155,"line_start":784,"line_end":784,"column_start":5,"column_end":10},"name":"Cntrl","qualname":"::ast::ClassAsciiKind::Cntrl","value":"ClassAsciiKind::Cntrl","parent":{"krate":0,"index":1906},"children":[],"decl_id":null,"docs":" `[\\x00-\\x1F\\x7F]`\n","sig":null,"attributes":[{"value":"/ `[\\x00-\\x1F\\x7F]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35124,"byte_end":35145,"line_start":783,"line_end":783,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1917},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35177,"byte_end":35182,"line_start":786,"line_end":786,"column_start":5,"column_end":10},"name":"Digit","qualname":"::ast::ClassAsciiKind::Digit","value":"ClassAsciiKind::Digit","parent":{"krate":0,"index":1906},"children":[],"decl_id":null,"docs":" `[0-9]`\n","sig":null,"attributes":[{"value":"/ `[0-9]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35161,"byte_end":35172,"line_start":785,"line_end":785,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1919},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35204,"byte_end":35209,"line_start":788,"line_end":788,"column_start":5,"column_end":10},"name":"Graph","qualname":"::ast::ClassAsciiKind::Graph","value":"ClassAsciiKind::Graph","parent":{"krate":0,"index":1906},"children":[],"decl_id":null,"docs":" `[!-~]`\n","sig":null,"attributes":[{"value":"/ `[!-~]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35188,"byte_end":35199,"line_start":787,"line_end":787,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1921},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35231,"byte_end":35236,"line_start":790,"line_end":790,"column_start":5,"column_end":10},"name":"Lower","qualname":"::ast::ClassAsciiKind::Lower","value":"ClassAsciiKind::Lower","parent":{"krate":0,"index":1906},"children":[],"decl_id":null,"docs":" `[a-z]`\n","sig":null,"attributes":[{"value":"/ `[a-z]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35215,"byte_end":35226,"line_start":789,"line_end":789,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1923},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35258,"byte_end":35263,"line_start":792,"line_end":792,"column_start":5,"column_end":10},"name":"Print","qualname":"::ast::ClassAsciiKind::Print","value":"ClassAsciiKind::Print","parent":{"krate":0,"index":1906},"children":[],"decl_id":null,"docs":" `[ -~]`\n","sig":null,"attributes":[{"value":"/ `[ -~]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35242,"byte_end":35253,"line_start":791,"line_end":791,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1925},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35295,"byte_end":35300,"line_start":794,"line_end":794,"column_start":5,"column_end":10},"name":"Punct","qualname":"::ast::ClassAsciiKind::Punct","value":"ClassAsciiKind::Punct","parent":{"krate":0,"index":1906},"children":[],"decl_id":null,"docs":" `[!-/:-@\\[-`{-~]`\n","sig":null,"attributes":[{"value":"/ `[!-/:-@\\[-`{-~]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35269,"byte_end":35290,"line_start":793,"line_end":793,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1927},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35330,"byte_end":35335,"line_start":796,"line_end":796,"column_start":5,"column_end":10},"name":"Space","qualname":"::ast::ClassAsciiKind::Space","value":"ClassAsciiKind::Space","parent":{"krate":0,"index":1906},"children":[],"decl_id":null,"docs":" `[\\t\\n\\v\\f\\r ]`\n","sig":null,"attributes":[{"value":"/ `[\\t\\n\\v\\f\\r ]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35306,"byte_end":35325,"line_start":795,"line_end":795,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1929},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35357,"byte_end":35362,"line_start":798,"line_end":798,"column_start":5,"column_end":10},"name":"Upper","qualname":"::ast::ClassAsciiKind::Upper","value":"ClassAsciiKind::Upper","parent":{"krate":0,"index":1906},"children":[],"decl_id":null,"docs":" `[A-Z]`\n","sig":null,"attributes":[{"value":"/ `[A-Z]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35341,"byte_end":35352,"line_start":797,"line_end":797,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1931},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35391,"byte_end":35395,"line_start":800,"line_end":800,"column_start":5,"column_end":9},"name":"Word","qualname":"::ast::ClassAsciiKind::Word","value":"ClassAsciiKind::Word","parent":{"krate":0,"index":1906},"children":[],"decl_id":null,"docs":" `[0-9A-Za-z_]`\n","sig":null,"attributes":[{"value":"/ `[0-9A-Za-z_]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35368,"byte_end":35386,"line_start":799,"line_end":799,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1933},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35423,"byte_end":35429,"line_start":802,"line_end":802,"column_start":5,"column_end":11},"name":"Xdigit","qualname":"::ast::ClassAsciiKind::Xdigit","value":"ClassAsciiKind::Xdigit","parent":{"krate":0,"index":1906},"children":[],"decl_id":null,"docs":" `[0-9A-Fa-f]`\n","sig":null,"attributes":[{"value":"/ `[0-9A-Fa-f]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35401,"byte_end":35418,"line_start":801,"line_end":801,"column_start":5,"column_end":22}}]},{"kind":"Enum","id":{"krate":0,"index":1906},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34980,"byte_end":34994,"line_start":774,"line_end":774,"column_start":10,"column_end":24},"name":"ClassAsciiKind","qualname":"::ast::ClassAsciiKind","value":"ClassAsciiKind::{Alnum, Alpha, Ascii, Blank, Cntrl, Digit, Graph, Lower, Print, Punct, Space, Upper, Word, Xdigit}","parent":null,"children":[{"krate":0,"index":1907},{"krate":0,"index":1909},{"krate":0,"index":1911},{"krate":0,"index":1913},{"krate":0,"index":1915},{"krate":0,"index":1917},{"krate":0,"index":1919},{"krate":0,"index":1921},{"krate":0,"index":1923},{"krate":0,"index":1925},{"krate":0,"index":1927},{"krate":0,"index":1929},{"krate":0,"index":1931},{"krate":0,"index":1933}],"decl_id":null,"docs":" The available ASCII character classes.\n","sig":null,"attributes":[{"value":"/ The available ASCII character classes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":34889,"byte_end":34931,"line_start":772,"line_end":772,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":359},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35800,"byte_end":35809,"line_start":813,"line_end":813,"column_start":12,"column_end":21},"name":"from_name","qualname":"<ClassAsciiKind>::from_name","value":"fn (name: &str) -> Option<ClassAsciiKind>","parent":null,"children":[],"decl_id":null,"docs":" Return the corresponding ClassAsciiKind variant for the given name.","sig":null,"attributes":[{"value":"/ Return the corresponding ClassAsciiKind variant for the given name.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35460,"byte_end":35531,"line_start":806,"line_end":806,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35536,"byte_end":35539,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ The name given should correspond to the lowercase version of the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35544,"byte_end":35612,"line_start":808,"line_end":808,"column_start":5,"column_end":73}},{"value":"/ variant name. e.g., `cntrl` is the name for `ClassAsciiKind::Cntrl`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35617,"byte_end":35689,"line_start":809,"line_end":809,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35694,"byte_end":35697,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ If no variant with the corresponding name exists, then `None` is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35702,"byte_end":35770,"line_start":811,"line_end":811,"column_start":5,"column_end":73}},{"value":"/ returned.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35775,"byte_end":35788,"line_start":812,"line_end":812,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":1945},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":36535,"byte_end":36547,"line_start":837,"line_end":837,"column_start":12,"column_end":24},"name":"ClassUnicode","qualname":"::ast::ClassUnicode","value":"ClassUnicode { span, negated, kind }","parent":null,"children":[{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948}],"decl_id":null,"docs":" A Unicode character class.\n","sig":null,"attributes":[{"value":"/ A Unicode character class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":36454,"byte_end":36484,"line_start":835,"line_end":835,"column_start":1,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1946},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":36590,"byte_end":36594,"line_start":839,"line_end":839,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassUnicode::span","value":"ast::Span","parent":{"krate":0,"index":1945},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[{"value":"/ The span of this class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":36554,"byte_end":36581,"line_start":838,"line_end":838,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":1947},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37151,"byte_end":37158,"line_start":849,"line_end":849,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassUnicode::negated","value":"bool","parent":{"krate":0,"index":1945},"children":[],"decl_id":null,"docs":" Whether this class is negated or not.","sig":null,"attributes":[{"value":"/ Whether this class is negated or not.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":36606,"byte_end":36647,"line_start":840,"line_end":840,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":36652,"byte_end":36655,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ Note: be careful when using this attribute. This specifically refers","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":36660,"byte_end":36732,"line_start":842,"line_end":842,"column_start":5,"column_end":77}},{"value":"/ to whether the class is written as `\\p` or `\\P`, where the latter","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":36737,"byte_end":36806,"line_start":843,"line_end":843,"column_start":5,"column_end":74}},{"value":"/ is `negated = true`. However, it also possible to write something like","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":36811,"byte_end":36885,"line_start":844,"line_end":844,"column_start":5,"column_end":79}},{"value":"/ `\\P{scx!=Katakana}` which is actually equivalent to","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":36890,"byte_end":36945,"line_start":845,"line_end":845,"column_start":5,"column_end":60}},{"value":"/ `\\p{scx=Katakana}` and is therefore not actually negated even though","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":36950,"byte_end":37022,"line_start":846,"line_end":846,"column_start":5,"column_end":77}},{"value":"/ `negated = true` here. To test whether this class is truly negated","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37027,"byte_end":37097,"line_start":847,"line_end":847,"column_start":5,"column_end":75}},{"value":"/ or not, use the `is_negated` method.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37102,"byte_end":37142,"line_start":848,"line_end":848,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":1948},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37209,"byte_end":37213,"line_start":851,"line_end":851,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassUnicode::kind","value":"ast::ClassUnicodeKind","parent":{"krate":0,"index":1945},"children":[],"decl_id":null,"docs":" The kind of Unicode class.\n","sig":null,"attributes":[{"value":"/ The kind of Unicode class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37170,"byte_end":37200,"line_start":850,"line_end":850,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37475,"byte_end":37485,"line_start":859,"line_end":859,"column_start":12,"column_end":22},"name":"is_negated","qualname":"<ClassUnicode>::is_negated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this class has been negated.","sig":null,"attributes":[{"value":"/ Returns true if this class has been negated.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37260,"byte_end":37308,"line_start":855,"line_end":855,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37313,"byte_end":37316,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ Note that this takes the Unicode op into account, if it's present.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37321,"byte_end":37391,"line_start":857,"line_end":857,"column_start":5,"column_end":75}},{"value":"/ e.g., `is_negated` for `\\P{scx!=Katakana}` will return `false`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37396,"byte_end":37463,"line_start":858,"line_end":858,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1961},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37885,"byte_end":37894,"line_start":873,"line_end":873,"column_start":5,"column_end":14},"name":"OneLetter","qualname":"::ast::ClassUnicodeKind::OneLetter","value":"ClassUnicodeKind::OneLetter(char)","parent":{"krate":0,"index":1960},"children":[],"decl_id":null,"docs":" A one letter abbreviated class, e.g., `\\pN`.\n","sig":null,"attributes":[{"value":"/ A one letter abbreviated class, e.g., `\\pN`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37832,"byte_end":37880,"line_start":872,"line_end":872,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1964},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37994,"byte_end":37999,"line_start":876,"line_end":876,"column_start":5,"column_end":10},"name":"Named","qualname":"::ast::ClassUnicodeKind::Named","value":"ClassUnicodeKind::Named(String)","parent":{"krate":0,"index":1960},"children":[],"decl_id":null,"docs":" A binary property, general category or script. The string may be\n empty.\n","sig":null,"attributes":[{"value":"/ A binary property, general category or script. The string may be","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37906,"byte_end":37974,"line_start":874,"line_end":874,"column_start":5,"column_end":73}},{"value":"/ empty.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37979,"byte_end":37989,"line_start":875,"line_end":875,"column_start":5,"column_end":15}}]},{"kind":"StructVariant","id":{"krate":0,"index":1967},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38062,"byte_end":38072,"line_start":878,"line_end":878,"column_start":5,"column_end":15},"name":"NamedValue","qualname":"::ast::ClassUnicodeKind::NamedValue","value":"ClassUnicodeKind::NamedValue { op, name, value }","parent":{"krate":0,"index":1960},"children":[],"decl_id":null,"docs":" A property name and an associated value.\n","sig":null,"attributes":[{"value":"/ A property name and an associated value.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38013,"byte_end":38057,"line_start":877,"line_end":877,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":1960},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37809,"byte_end":37825,"line_start":871,"line_end":871,"column_start":10,"column_end":26},"name":"ClassUnicodeKind","qualname":"::ast::ClassUnicodeKind","value":"ClassUnicodeKind::{OneLetter, Named, NamedValue}","parent":null,"children":[{"krate":0,"index":1961},{"krate":0,"index":1964},{"krate":0,"index":1967}],"decl_id":null,"docs":" The available forms of Unicode character classes.\n","sig":null,"attributes":[{"value":"/ The available forms of Unicode character classes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37707,"byte_end":37760,"line_start":869,"line_end":869,"column_start":1,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1983},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38538,"byte_end":38543,"line_start":892,"line_end":892,"column_start":5,"column_end":10},"name":"Equal","qualname":"::ast::ClassUnicodeOpKind::Equal","value":"ClassUnicodeOpKind::Equal","parent":{"krate":0,"index":1982},"children":[],"decl_id":null,"docs":" A property set to a specific value, e.g., `\\p{scx=Katakana}`.\n","sig":null,"attributes":[{"value":"/ A property set to a specific value, e.g., `\\p{scx=Katakana}`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38468,"byte_end":38533,"line_start":891,"line_end":891,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1985},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38641,"byte_end":38646,"line_start":895,"line_end":895,"column_start":5,"column_end":10},"name":"Colon","qualname":"::ast::ClassUnicodeOpKind::Colon","value":"ClassUnicodeOpKind::Colon","parent":{"krate":0,"index":1982},"children":[],"decl_id":null,"docs":" A property set to a specific value using a colon, e.g.,\n `\\p{scx:Katakana}`.\n","sig":null,"attributes":[{"value":"/ A property set to a specific value using a colon, e.g.,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38549,"byte_end":38608,"line_start":893,"line_end":893,"column_start":5,"column_end":64}},{"value":"/ `\\p{scx:Katakana}`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38613,"byte_end":38636,"line_start":894,"line_end":894,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1987},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38729,"byte_end":38737,"line_start":897,"line_end":897,"column_start":5,"column_end":13},"name":"NotEqual","qualname":"::ast::ClassUnicodeOpKind::NotEqual","value":"ClassUnicodeOpKind::NotEqual","parent":{"krate":0,"index":1982},"children":[],"decl_id":null,"docs":" A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.\n","sig":null,"attributes":[{"value":"/ A property that isn't a particular value, e.g., `\\p{scx!=Katakana}`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38652,"byte_end":38724,"line_start":896,"line_end":896,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":1982},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38443,"byte_end":38461,"line_start":890,"line_end":890,"column_start":10,"column_end":28},"name":"ClassUnicodeOpKind","qualname":"::ast::ClassUnicodeOpKind","value":"ClassUnicodeOpKind::{Equal, Colon, NotEqual}","parent":null,"children":[{"krate":0,"index":1983},{"krate":0,"index":1985},{"krate":0,"index":1987}],"decl_id":null,"docs":" The type of op used in a Unicode character class.\n","sig":null,"attributes":[{"value":"/ The type of op used in a Unicode character class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38341,"byte_end":38394,"line_start":888,"line_end":888,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38828,"byte_end":38836,"line_start":902,"line_end":902,"column_start":12,"column_end":20},"name":"is_equal","qualname":"<ClassUnicodeOpKind>::is_equal","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Whether the op is an equality op or not.\n","sig":null,"attributes":[{"value":"/ Whether the op is an equality op or not.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38772,"byte_end":38816,"line_start":901,"line_end":901,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1999},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39093,"byte_end":39107,"line_start":912,"line_end":912,"column_start":12,"column_end":26},"name":"ClassBracketed","qualname":"::ast::ClassBracketed","value":"ClassBracketed { span, negated, kind }","parent":null,"children":[{"krate":0,"index":2000},{"krate":0,"index":2001},{"krate":0,"index":2002}],"decl_id":null,"docs":" A bracketed character class, e.g., `[a-z0-9]`.\n","sig":null,"attributes":[{"value":"/ A bracketed character class, e.g., `[a-z0-9]`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38992,"byte_end":39042,"line_start":910,"line_end":910,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":2000},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39150,"byte_end":39154,"line_start":914,"line_end":914,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassBracketed::span","value":"ast::Span","parent":{"krate":0,"index":1999},"children":[],"decl_id":null,"docs":" The span of this class.\n","sig":null,"attributes":[{"value":"/ The span of this class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39114,"byte_end":39141,"line_start":913,"line_end":913,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2001},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39266,"byte_end":39273,"line_start":917,"line_end":917,"column_start":9,"column_end":16},"name":"negated","qualname":"::ast::ClassBracketed::negated","value":"bool","parent":{"krate":0,"index":1999},"children":[],"decl_id":null,"docs":" Whether this class is negated or not. e.g., `[a]` is not negated but\n `[^a]` is.\n","sig":null,"attributes":[{"value":"/ Whether this class is negated or not. e.g., `[a]` is not negated but","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39166,"byte_end":39238,"line_start":915,"line_end":915,"column_start":5,"column_end":77}},{"value":"/ `[^a]` is.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39243,"byte_end":39257,"line_start":916,"line_end":916,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":2002},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39441,"byte_end":39445,"line_start":920,"line_end":920,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassBracketed::kind","value":"ast::ClassSet","parent":{"krate":0,"index":1999},"children":[],"decl_id":null,"docs":" The type of this set. A set is either a normal union of things, e.g.,\n `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.\n","sig":null,"attributes":[{"value":"/ The type of this set. A set is either a normal union of things, e.g.,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39285,"byte_end":39358,"line_start":918,"line_end":918,"column_start":5,"column_end":78}},{"value":"/ `[abc]` or a result of applying set operations, e.g., `[\\pL--c]`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39363,"byte_end":39432,"line_start":919,"line_end":919,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2015},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39910,"byte_end":39914,"line_start":933,"line_end":933,"column_start":5,"column_end":9},"name":"Item","qualname":"::ast::ClassSet::Item","value":"ClassSet::Item(ClassSetItem)","parent":{"krate":0,"index":2014},"children":[],"decl_id":null,"docs":" An item, which can be a single literal, range, nested character class\n or a union of items.\n","sig":null,"attributes":[{"value":"/ An item, which can be a single literal, range, nested character class","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39803,"byte_end":39876,"line_start":931,"line_end":931,"column_start":5,"column_end":78}},{"value":"/ or a union of items.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39881,"byte_end":39905,"line_start":932,"line_end":932,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2018},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39990,"byte_end":39998,"line_start":935,"line_end":935,"column_start":5,"column_end":13},"name":"BinaryOp","qualname":"::ast::ClassSet::BinaryOp","value":"ClassSet::BinaryOp(ClassSetBinaryOp)","parent":{"krate":0,"index":2014},"children":[],"decl_id":null,"docs":" A single binary operation (i.e., &&, -- or ~~).\n","sig":null,"attributes":[{"value":"/ A single binary operation (i.e., &&, -- or ~~).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39934,"byte_end":39985,"line_start":934,"line_end":934,"column_start":5,"column_end":56}}]},{"kind":"Enum","id":{"krate":0,"index":2014},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39788,"byte_end":39796,"line_start":930,"line_end":930,"column_start":10,"column_end":18},"name":"ClassSet","qualname":"::ast::ClassSet","value":"ClassSet::{Item, BinaryOp}","parent":null,"children":[{"krate":0,"index":2015},{"krate":0,"index":2018}],"decl_id":null,"docs":" A character class set.","sig":null,"attributes":[{"value":"/ A character class set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39460,"byte_end":39486,"line_start":923,"line_end":923,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39487,"byte_end":39490,"line_start":924,"line_end":924,"column_start":1,"column_end":4}},{"value":"/ This type corresponds to the internal structure of a bracketed character","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39491,"byte_end":39567,"line_start":925,"line_end":925,"column_start":1,"column_end":77}},{"value":"/ class. That is, every bracketed character is one of two types: a union of","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39568,"byte_end":39645,"line_start":926,"line_end":926,"column_start":1,"column_end":78}},{"value":"/ items (literals, ranges, other bracketed classes) or a tree of binary set","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39646,"byte_end":39723,"line_start":927,"line_end":927,"column_start":1,"column_end":78}},{"value":"/ operations.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":39724,"byte_end":39739,"line_start":928,"line_end":928,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":40082,"byte_end":40087,"line_start":940,"line_end":940,"column_start":12,"column_end":17},"name":"union","qualname":"<ClassSet>::union","value":"fn (ast: ClassSetUnion) -> ClassSet","parent":null,"children":[],"decl_id":null,"docs":" Build a set from a union.\n","sig":null,"attributes":[{"value":"/ Build a set from a union.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":40041,"byte_end":40070,"line_start":939,"line_end":939,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":367},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":40242,"byte_end":40246,"line_start":945,"line_end":945,"column_start":12,"column_end":16},"name":"span","qualname":"<ClassSet>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this character class set.\n","sig":null,"attributes":[{"value":"/ Return the span of this character class set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":40182,"byte_end":40230,"line_start":944,"line_end":944,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2033},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":40989,"byte_end":40994,"line_start":969,"line_end":969,"column_start":5,"column_end":10},"name":"Empty","qualname":"::ast::ClassSetItem::Empty","value":"ClassSetItem::Empty(Span)","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" An empty item.","sig":null,"attributes":[{"value":"/ An empty item.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":40735,"byte_end":40753,"line_start":964,"line_end":964,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":40758,"byte_end":40761,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ Note that a bracketed character class cannot contain a single empty","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":40766,"byte_end":40837,"line_start":966,"line_end":966,"column_start":5,"column_end":76}},{"value":"/ item. Empty items can appear when using one of the binary operators.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":40842,"byte_end":40914,"line_start":967,"line_end":967,"column_start":5,"column_end":77}},{"value":"/ For example, `[&&]` is the intersection of two empty classes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":40919,"byte_end":40984,"line_start":968,"line_end":968,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2036},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41032,"byte_end":41039,"line_start":971,"line_end":971,"column_start":5,"column_end":12},"name":"Literal","qualname":"::ast::ClassSetItem::Literal","value":"ClassSetItem::Literal(Literal)","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" A single literal.\n","sig":null,"attributes":[{"value":"/ A single literal.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41006,"byte_end":41027,"line_start":970,"line_end":970,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2039},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41092,"byte_end":41097,"line_start":973,"line_end":973,"column_start":5,"column_end":10},"name":"Range","qualname":"::ast::ClassSetItem::Range","value":"ClassSetItem::Range(ClassSetRange)","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" A range between two literals.\n","sig":null,"attributes":[{"value":"/ A range between two literals.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41054,"byte_end":41087,"line_start":972,"line_end":972,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2042},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41186,"byte_end":41191,"line_start":975,"line_end":975,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::ast::ClassSetItem::Ascii","value":"ClassSetItem::Ascii(ClassAscii)","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.\n","sig":null,"attributes":[{"value":"/ An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41118,"byte_end":41181,"line_start":974,"line_end":974,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2045},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41272,"byte_end":41279,"line_start":977,"line_end":977,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::ast::ClassSetItem::Unicode","value":"ClassSetItem::Unicode(ClassUnicode)","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.\n","sig":null,"attributes":[{"value":"/ A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41209,"byte_end":41267,"line_start":976,"line_end":976,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2048},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41351,"byte_end":41355,"line_start":979,"line_end":979,"column_start":5,"column_end":9},"name":"Perl","qualname":"::ast::ClassSetItem::Perl","value":"ClassSetItem::Perl(ClassPerl)","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" A perl character class, e.g., `\\d` or `\\W`.\n","sig":null,"attributes":[{"value":"/ A perl character class, e.g., `\\d` or `\\W`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41299,"byte_end":41346,"line_start":978,"line_end":978,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2051},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41534,"byte_end":41543,"line_start":983,"line_end":983,"column_start":5,"column_end":14},"name":"Bracketed","qualname":"::ast::ClassSetItem::Bracketed","value":"ClassSetItem::Bracketed(Box<ClassBracketed>)","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" A bracketed character class set, which may contain zero or more\n character ranges and/or zero or more nested classes. e.g.,\n `[a-zA-Z\\pL]`.\n","sig":null,"attributes":[{"value":"/ A bracketed character class set, which may contain zero or more","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41372,"byte_end":41439,"line_start":980,"line_end":980,"column_start":5,"column_end":72}},{"value":"/ character ranges and/or zero or more nested classes. e.g.,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41444,"byte_end":41506,"line_start":981,"line_end":981,"column_start":5,"column_end":67}},{"value":"/ `[a-zA-Z\\pL]`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41511,"byte_end":41529,"line_start":982,"line_end":982,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2054},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41596,"byte_end":41601,"line_start":985,"line_end":985,"column_start":5,"column_end":10},"name":"Union","qualname":"::ast::ClassSetItem::Union","value":"ClassSetItem::Union(ClassSetUnion)","parent":{"krate":0,"index":2032},"children":[],"decl_id":null,"docs":" A union of items.\n","sig":null,"attributes":[{"value":"/ A union of items.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41570,"byte_end":41591,"line_start":984,"line_end":984,"column_start":5,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":2032},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":40716,"byte_end":40728,"line_start":963,"line_end":963,"column_start":10,"column_end":22},"name":"ClassSetItem","qualname":"::ast::ClassSetItem","value":"ClassSetItem::{Empty, Literal, Range, Ascii, Unicode, Perl, Bracketed, Union}","parent":null,"children":[{"krate":0,"index":2033},{"krate":0,"index":2036},{"krate":0,"index":2039},{"krate":0,"index":2042},{"krate":0,"index":2045},{"krate":0,"index":2048},{"krate":0,"index":2051},{"krate":0,"index":2054}],"decl_id":null,"docs":" A single component of a character class set.\n","sig":null,"attributes":[{"value":"/ A single component of a character class set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":40619,"byte_end":40667,"line_start":961,"line_end":961,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41710,"byte_end":41714,"line_start":990,"line_end":990,"column_start":12,"column_end":16},"name":"span","qualname":"<ClassSetItem>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span of this character class set item.\n","sig":null,"attributes":[{"value":"/ Return the span of this character class set item.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41645,"byte_end":41698,"line_start":989,"line_end":989,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":2068},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42284,"byte_end":42297,"line_start":1006,"line_end":1006,"column_start":12,"column_end":25},"name":"ClassSetRange","qualname":"::ast::ClassSetRange","value":"ClassSetRange { span, start, end }","parent":null,"children":[{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071}],"decl_id":null,"docs":" A single character class range in a set.\n","sig":null,"attributes":[{"value":"/ A single character class range in a set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42189,"byte_end":42233,"line_start":1004,"line_end":1004,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2069},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42340,"byte_end":42344,"line_start":1008,"line_end":1008,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassSetRange::span","value":"ast::Span","parent":{"krate":0,"index":2068},"children":[],"decl_id":null,"docs":" The span of this range.\n","sig":null,"attributes":[{"value":"/ The span of this range.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42304,"byte_end":42331,"line_start":1007,"line_end":1007,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2070},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42393,"byte_end":42398,"line_start":1010,"line_end":1010,"column_start":9,"column_end":14},"name":"start","qualname":"::ast::ClassSetRange::start","value":"ast::Literal","parent":{"krate":0,"index":2068},"children":[],"decl_id":null,"docs":" The start of this range.\n","sig":null,"attributes":[{"value":"/ The start of this range.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42356,"byte_end":42384,"line_start":1009,"line_end":1009,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":2071},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42448,"byte_end":42451,"line_start":1012,"line_end":1012,"column_start":9,"column_end":12},"name":"end","qualname":"::ast::ClassSetRange::end","value":"ast::Literal","parent":{"krate":0,"index":2068},"children":[],"decl_id":null,"docs":" The end of this range.\n","sig":null,"attributes":[{"value":"/ The end of this range.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42413,"byte_end":42439,"line_start":1011,"line_end":1011,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42674,"byte_end":42682,"line_start":1020,"line_end":1020,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<ClassSetRange>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this character class range is valid.","sig":null,"attributes":[{"value":"/ Returns true if and only if this character class range is valid.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42490,"byte_end":42558,"line_start":1016,"line_end":1016,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42563,"byte_end":42566,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ The only case where a range is invalid is if its start is greater than","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42571,"byte_end":42645,"line_start":1018,"line_end":1018,"column_start":5,"column_end":79}},{"value":"/ its end.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42650,"byte_end":42662,"line_start":1019,"line_end":1019,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":2083},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42845,"byte_end":42858,"line_start":1027,"line_end":1027,"column_start":12,"column_end":25},"name":"ClassSetUnion","qualname":"::ast::ClassSetUnion","value":"ClassSetUnion { span, items }","parent":null,"children":[{"krate":0,"index":2084},{"krate":0,"index":2085}],"decl_id":null,"docs":" A union of items inside a character class set.\n","sig":null,"attributes":[{"value":"/ A union of items inside a character class set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42744,"byte_end":42794,"line_start":1025,"line_end":1025,"column_start":1,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":2084},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42960,"byte_end":42964,"line_start":1030,"line_end":1030,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassSetUnion::span","value":"ast::Span","parent":{"krate":0,"index":2083},"children":[],"decl_id":null,"docs":" The span of the items in this operation. e.g., the `a-z0-9` in\n `[^a-z0-9]`\n","sig":null,"attributes":[{"value":"/ The span of the items in this operation. e.g., the `a-z0-9` in","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42865,"byte_end":42931,"line_start":1028,"line_end":1028,"column_start":5,"column_end":71}},{"value":"/ `[^a-z0-9]`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42936,"byte_end":42951,"line_start":1029,"line_end":1029,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":2085},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43035,"byte_end":43040,"line_start":1032,"line_end":1032,"column_start":9,"column_end":14},"name":"items","qualname":"::ast::ClassSetUnion::items","value":"std::vec::Vec<ast::ClassSetItem>","parent":{"krate":0,"index":2083},"children":[],"decl_id":null,"docs":" The sequence of items that make up this union.\n","sig":null,"attributes":[{"value":"/ The sequence of items that make up this union.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42976,"byte_end":43026,"line_start":1031,"line_end":1031,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43606,"byte_end":43610,"line_start":1046,"line_end":1046,"column_start":12,"column_end":16},"name":"push","qualname":"<ClassSetUnion>::push","value":"fn (&mut self, item: ClassSetItem) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Push a new item in this union.","sig":null,"attributes":[{"value":"/ Push a new item in this union.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43089,"byte_end":43123,"line_start":1036,"line_end":1036,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43128,"byte_end":43131,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ The ending position of this union's span is updated to the ending","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43136,"byte_end":43205,"line_start":1038,"line_end":1038,"column_start":5,"column_end":74}},{"value":"/ position of the span of the item given. If the union is empty, then","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43210,"byte_end":43281,"line_start":1039,"line_end":1039,"column_start":5,"column_end":76}},{"value":"/ the starting position of this union is set to the starting position","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43286,"byte_end":43357,"line_start":1040,"line_end":1040,"column_start":5,"column_end":76}},{"value":"/ of this item.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43362,"byte_end":43379,"line_start":1041,"line_end":1041,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43384,"byte_end":43387,"line_start":1042,"line_end":1042,"column_start":5,"column_end":8}},{"value":"/ In other words, if you only use this method to add items to a union","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43392,"byte_end":43463,"line_start":1043,"line_end":1043,"column_start":5,"column_end":76}},{"value":"/ and you set the spans on each item correctly, then you should never","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43468,"byte_end":43539,"line_start":1044,"line_end":1044,"column_start":5,"column_end":76}},{"value":"/ need to adjust the span of the union directly.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43544,"byte_end":43594,"line_start":1045,"line_end":1045,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44125,"byte_end":44134,"line_start":1060,"line_end":1060,"column_start":12,"column_end":21},"name":"into_item","qualname":"<ClassSetUnion>::into_item","value":"fn (mut self) -> ClassSetItem","parent":null,"children":[],"decl_id":null,"docs":" Return this union as a character class set item.","sig":null,"attributes":[{"value":"/ Return this union as a character class set item.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43821,"byte_end":43873,"line_start":1054,"line_end":1054,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43878,"byte_end":43881,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ If this union contains zero items, then an empty union is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43886,"byte_end":43947,"line_start":1056,"line_end":1056,"column_start":5,"column_end":66}},{"value":"/ returned. If this concatenation contains exactly 1 item, then the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43952,"byte_end":44021,"line_start":1057,"line_end":1057,"column_start":5,"column_end":74}},{"value":"/ corresponding item is returned. Otherwise, ClassSetItem::Union is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44026,"byte_end":44095,"line_start":1058,"line_end":1058,"column_start":5,"column_end":74}},{"value":"/ returned.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44100,"byte_end":44113,"line_start":1059,"line_end":1059,"column_start":5,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":2097},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44447,"byte_end":44463,"line_start":1071,"line_end":1071,"column_start":12,"column_end":28},"name":"ClassSetBinaryOp","qualname":"::ast::ClassSetBinaryOp","value":"ClassSetBinaryOp { span, kind, lhs, rhs }","parent":null,"children":[{"krate":0,"index":2098},{"krate":0,"index":2099},{"krate":0,"index":2100},{"krate":0,"index":2101}],"decl_id":null,"docs":" A Unicode character class set operation.\n","sig":null,"attributes":[{"value":"/ A Unicode character class set operation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44352,"byte_end":44396,"line_start":1069,"line_end":1069,"column_start":1,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2098},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44550,"byte_end":44554,"line_start":1073,"line_end":1073,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::ClassSetBinaryOp::span","value":"ast::Span","parent":{"krate":0,"index":2097},"children":[],"decl_id":null,"docs":" The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.\n","sig":null,"attributes":[{"value":"/ The span of this operation. e.g., the `a-z--[h-p]` in `[a-z--h-p]`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44470,"byte_end":44541,"line_start":1072,"line_end":1072,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":2099},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44610,"byte_end":44614,"line_start":1075,"line_end":1075,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::ClassSetBinaryOp::kind","value":"ast::ClassSetBinaryOpKind","parent":{"krate":0,"index":2097},"children":[],"decl_id":null,"docs":" The type of this set operation.\n","sig":null,"attributes":[{"value":"/ The type of this set operation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44566,"byte_end":44601,"line_start":1074,"line_end":1074,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":2100},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44691,"byte_end":44694,"line_start":1077,"line_end":1077,"column_start":9,"column_end":12},"name":"lhs","qualname":"::ast::ClassSetBinaryOp::lhs","value":"std::boxed::Box<ast::ClassSet>","parent":{"krate":0,"index":2097},"children":[],"decl_id":null,"docs":" The left hand side of the operation.\n","sig":null,"attributes":[{"value":"/ The left hand side of the operation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44642,"byte_end":44682,"line_start":1076,"line_end":1076,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2101},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44765,"byte_end":44768,"line_start":1079,"line_end":1079,"column_start":9,"column_end":12},"name":"rhs","qualname":"::ast::ClassSetBinaryOp::rhs","value":"std::boxed::Box<ast::ClassSet>","parent":{"krate":0,"index":2097},"children":[],"decl_id":null,"docs":" The right hand side of the operation.\n","sig":null,"attributes":[{"value":"/ The right hand side of the operation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44715,"byte_end":44756,"line_start":1078,"line_end":1078,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2114},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45168,"byte_end":45180,"line_start":1090,"line_end":1090,"column_start":5,"column_end":17},"name":"Intersection","qualname":"::ast::ClassSetBinaryOpKind::Intersection","value":"ClassSetBinaryOpKind::Intersection","parent":{"krate":0,"index":2113},"children":[],"decl_id":null,"docs":" The intersection of two sets, e.g., `\\pN&&[a-z]`.\n","sig":null,"attributes":[{"value":"/ The intersection of two sets, e.g., `\\pN&&[a-z]`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45110,"byte_end":45163,"line_start":1089,"line_end":1089,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2116},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45242,"byte_end":45252,"line_start":1092,"line_end":1092,"column_start":5,"column_end":15},"name":"Difference","qualname":"::ast::ClassSetBinaryOpKind::Difference","value":"ClassSetBinaryOpKind::Difference","parent":{"krate":0,"index":2113},"children":[],"decl_id":null,"docs":" The difference of two sets, e.g., `\\pN--[0-9]`.\n","sig":null,"attributes":[{"value":"/ The difference of two sets, e.g., `\\pN--[0-9]`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45186,"byte_end":45237,"line_start":1091,"line_end":1091,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2118},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45430,"byte_end":45449,"line_start":1096,"line_end":1096,"column_start":5,"column_end":24},"name":"SymmetricDifference","qualname":"::ast::ClassSetBinaryOpKind::SymmetricDifference","value":"ClassSetBinaryOpKind::SymmetricDifference","parent":{"krate":0,"index":2113},"children":[],"decl_id":null,"docs":" The symmetric difference of two sets. The symmetric difference is the\n set of elements belonging to one but not both sets.\n e.g., `[\\pL~~[:ascii:]]`.\n","sig":null,"attributes":[{"value":"/ The symmetric difference of two sets. The symmetric difference is the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45258,"byte_end":45331,"line_start":1093,"line_end":1093,"column_start":5,"column_end":78}},{"value":"/ set of elements belonging to one but not both sets.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45336,"byte_end":45391,"line_start":1094,"line_end":1094,"column_start":5,"column_end":60}},{"value":"/ e.g., `[\\pL~~[:ascii:]]`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45396,"byte_end":45425,"line_start":1095,"line_end":1095,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":2113},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45083,"byte_end":45103,"line_start":1088,"line_end":1088,"column_start":10,"column_end":30},"name":"ClassSetBinaryOpKind","qualname":"::ast::ClassSetBinaryOpKind","value":"ClassSetBinaryOpKind::{Intersection, Difference, SymmetricDifference}","parent":null,"children":[{"krate":0,"index":2114},{"krate":0,"index":2116},{"krate":0,"index":2118}],"decl_id":null,"docs":" The type of a Unicode character class set operation.","sig":null,"attributes":[{"value":"/ The type of a Unicode character class set operation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44788,"byte_end":44844,"line_start":1082,"line_end":1082,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44845,"byte_end":44848,"line_start":1083,"line_end":1083,"column_start":1,"column_end":4}},{"value":"/ Note that this doesn't explicitly represent union since there is no","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44849,"byte_end":44920,"line_start":1084,"line_end":1084,"column_start":1,"column_end":72}},{"value":"/ explicit union operator. Concatenation inside a character class corresponds","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":44921,"byte_end":45000,"line_start":1085,"line_end":1085,"column_start":1,"column_end":80}},{"value":"/ to the union operation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45001,"byte_end":45028,"line_start":1086,"line_end":1086,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":2131},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45539,"byte_end":45548,"line_start":1101,"line_end":1101,"column_start":12,"column_end":21},"name":"Assertion","qualname":"::ast::Assertion","value":"Assertion { span, kind }","parent":null,"children":[{"krate":0,"index":2132},{"krate":0,"index":2133}],"decl_id":null,"docs":" A single zero-width assertion.\n","sig":null,"attributes":[{"value":"/ A single zero-width assertion.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45454,"byte_end":45488,"line_start":1099,"line_end":1099,"column_start":1,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":2132},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45595,"byte_end":45599,"line_start":1103,"line_end":1103,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Assertion::span","value":"ast::Span","parent":{"krate":0,"index":2131},"children":[],"decl_id":null,"docs":" The span of this assertion.\n","sig":null,"attributes":[{"value":"/ The span of this assertion.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45555,"byte_end":45586,"line_start":1102,"line_end":1102,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2133},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45662,"byte_end":45666,"line_start":1105,"line_end":1105,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::Assertion::kind","value":"ast::AssertionKind","parent":{"krate":0,"index":2131},"children":[],"decl_id":null,"docs":" The assertion kind, e.g., `\\b` or `^`.\n","sig":null,"attributes":[{"value":"/ The assertion kind, e.g., `\\b` or `^`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45611,"byte_end":45653,"line_start":1104,"line_end":1104,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2146},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45789,"byte_end":45798,"line_start":1112,"line_end":1112,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::ast::AssertionKind::StartLine","value":"AssertionKind::StartLine","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" `^`\n","sig":null,"attributes":[{"value":"/ `^`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45777,"byte_end":45784,"line_start":1111,"line_end":1111,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2148},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45816,"byte_end":45823,"line_start":1114,"line_end":1114,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::ast::AssertionKind::EndLine","value":"AssertionKind::EndLine","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" `$`\n","sig":null,"attributes":[{"value":"/ `$`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45804,"byte_end":45811,"line_start":1113,"line_end":1113,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2150},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45842,"byte_end":45851,"line_start":1116,"line_end":1116,"column_start":5,"column_end":14},"name":"StartText","qualname":"::ast::AssertionKind::StartText","value":"AssertionKind::StartText","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" `\\A`\n","sig":null,"attributes":[{"value":"/ `\\A`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45829,"byte_end":45837,"line_start":1115,"line_end":1115,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2152},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45870,"byte_end":45877,"line_start":1118,"line_end":1118,"column_start":5,"column_end":12},"name":"EndText","qualname":"::ast::AssertionKind::EndText","value":"AssertionKind::EndText","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" `\\z`\n","sig":null,"attributes":[{"value":"/ `\\z`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45857,"byte_end":45865,"line_start":1117,"line_end":1117,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2154},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45896,"byte_end":45908,"line_start":1120,"line_end":1120,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::ast::AssertionKind::WordBoundary","value":"AssertionKind::WordBoundary","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" `\\b`\n","sig":null,"attributes":[{"value":"/ `\\b`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45883,"byte_end":45891,"line_start":1119,"line_end":1119,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2156},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45927,"byte_end":45942,"line_start":1122,"line_end":1122,"column_start":5,"column_end":20},"name":"NotWordBoundary","qualname":"::ast::AssertionKind::NotWordBoundary","value":"AssertionKind::NotWordBoundary","parent":{"krate":0,"index":2145},"children":[],"decl_id":null,"docs":" `\\B`\n","sig":null,"attributes":[{"value":"/ `\\B`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45914,"byte_end":45922,"line_start":1121,"line_end":1121,"column_start":5,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":2145},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45757,"byte_end":45770,"line_start":1110,"line_end":1110,"column_start":10,"column_end":23},"name":"AssertionKind","qualname":"::ast::AssertionKind","value":"AssertionKind::{StartLine, EndLine, StartText, EndText, WordBoundary, NotWordBoundary}","parent":null,"children":[{"krate":0,"index":2146},{"krate":0,"index":2148},{"krate":0,"index":2150},{"krate":0,"index":2152},{"krate":0,"index":2154},{"krate":0,"index":2156}],"decl_id":null,"docs":" An assertion kind.\n","sig":null,"attributes":[{"value":"/ An assertion kind.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45686,"byte_end":45708,"line_start":1108,"line_end":1108,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":2168},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46057,"byte_end":46067,"line_start":1127,"line_end":1127,"column_start":12,"column_end":22},"name":"Repetition","qualname":"::ast::Repetition","value":"Repetition { span, op, greedy, ast }","parent":null,"children":[{"krate":0,"index":2169},{"krate":0,"index":2170},{"krate":0,"index":2171},{"krate":0,"index":2172}],"decl_id":null,"docs":" A repetition operation applied to a regular expression.\n","sig":null,"attributes":[{"value":"/ A repetition operation applied to a regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":45947,"byte_end":46006,"line_start":1125,"line_end":1125,"column_start":1,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":2169},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46114,"byte_end":46118,"line_start":1129,"line_end":1129,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Repetition::span","value":"ast::Span","parent":{"krate":0,"index":2168},"children":[],"decl_id":null,"docs":" The span of this operation.\n","sig":null,"attributes":[{"value":"/ The span of this operation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46074,"byte_end":46105,"line_start":1128,"line_end":1128,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2170},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46164,"byte_end":46166,"line_start":1131,"line_end":1131,"column_start":9,"column_end":11},"name":"op","qualname":"::ast::Repetition::op","value":"ast::RepetitionOp","parent":{"krate":0,"index":2168},"children":[],"decl_id":null,"docs":" The actual operation.\n","sig":null,"attributes":[{"value":"/ The actual operation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46130,"byte_end":46155,"line_start":1130,"line_end":1130,"column_start":5,"column_end":30}}]},{"kind":"Field","id":{"krate":0,"index":2171},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46250,"byte_end":46256,"line_start":1133,"line_end":1133,"column_start":9,"column_end":15},"name":"greedy","qualname":"::ast::Repetition::greedy","value":"bool","parent":{"krate":0,"index":2168},"children":[],"decl_id":null,"docs":" Whether this operation was applied greedily or not.\n","sig":null,"attributes":[{"value":"/ Whether this operation was applied greedily or not.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46186,"byte_end":46241,"line_start":1132,"line_end":1132,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":2172},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46321,"byte_end":46324,"line_start":1135,"line_end":1135,"column_start":9,"column_end":12},"name":"ast","qualname":"::ast::Repetition::ast","value":"std::boxed::Box<ast::Ast>","parent":{"krate":0,"index":2168},"children":[],"decl_id":null,"docs":" The regular expression under repetition.\n","sig":null,"attributes":[{"value":"/ The regular expression under repetition.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46268,"byte_end":46312,"line_start":1134,"line_end":1134,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":2184},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46425,"byte_end":46437,"line_start":1140,"line_end":1140,"column_start":12,"column_end":24},"name":"RepetitionOp","qualname":"::ast::RepetitionOp","value":"RepetitionOp { span, kind }","parent":null,"children":[{"krate":0,"index":2185},{"krate":0,"index":2186}],"decl_id":null,"docs":" The repetition operator itself.\n","sig":null,"attributes":[{"value":"/ The repetition operator itself.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46339,"byte_end":46374,"line_start":1138,"line_end":1138,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2185},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46540,"byte_end":46544,"line_start":1143,"line_end":1143,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::RepetitionOp::span","value":"ast::Span","parent":{"krate":0,"index":2184},"children":[],"decl_id":null,"docs":" The span of this operator. This includes things like `+`, `*?` and\n `{m,n}`.\n","sig":null,"attributes":[{"value":"/ The span of this operator. This includes things like `+`, `*?` and","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46444,"byte_end":46514,"line_start":1141,"line_end":1141,"column_start":5,"column_end":75}},{"value":"/ `{m,n}`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46519,"byte_end":46531,"line_start":1142,"line_end":1142,"column_start":5,"column_end":17}}]},{"kind":"Field","id":{"krate":0,"index":2186},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46591,"byte_end":46595,"line_start":1145,"line_end":1145,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::RepetitionOp::kind","value":"ast::RepetitionKind","parent":{"krate":0,"index":2184},"children":[],"decl_id":null,"docs":" The type of operation.\n","sig":null,"attributes":[{"value":"/ The type of operation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46556,"byte_end":46582,"line_start":1144,"line_end":1144,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2199},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46736,"byte_end":46745,"line_start":1152,"line_end":1152,"column_start":5,"column_end":14},"name":"ZeroOrOne","qualname":"::ast::RepetitionKind::ZeroOrOne","value":"RepetitionKind::ZeroOrOne","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" `?`\n","sig":null,"attributes":[{"value":"/ `?`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46724,"byte_end":46731,"line_start":1151,"line_end":1151,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2201},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46763,"byte_end":46773,"line_start":1154,"line_end":1154,"column_start":5,"column_end":15},"name":"ZeroOrMore","qualname":"::ast::RepetitionKind::ZeroOrMore","value":"RepetitionKind::ZeroOrMore","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" `*`\n","sig":null,"attributes":[{"value":"/ `*`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46751,"byte_end":46758,"line_start":1153,"line_end":1153,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2203},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46791,"byte_end":46800,"line_start":1156,"line_end":1156,"column_start":5,"column_end":14},"name":"OneOrMore","qualname":"::ast::RepetitionKind::OneOrMore","value":"RepetitionKind::OneOrMore","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" `+`\n","sig":null,"attributes":[{"value":"/ `+`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46779,"byte_end":46786,"line_start":1155,"line_end":1155,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2205},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46822,"byte_end":46827,"line_start":1158,"line_end":1158,"column_start":5,"column_end":10},"name":"Range","qualname":"::ast::RepetitionKind::Range","value":"RepetitionKind::Range(RepetitionRange)","parent":{"krate":0,"index":2198},"children":[],"decl_id":null,"docs":" `{m,n}`\n","sig":null,"attributes":[{"value":"/ `{m,n}`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46806,"byte_end":46817,"line_start":1157,"line_end":1157,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":2198},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46703,"byte_end":46717,"line_start":1150,"line_end":1150,"column_start":10,"column_end":24},"name":"RepetitionKind","qualname":"::ast::RepetitionKind","value":"RepetitionKind::{ZeroOrOne, ZeroOrMore, OneOrMore, Range}","parent":null,"children":[{"krate":0,"index":2199},{"krate":0,"index":2201},{"krate":0,"index":2203},{"krate":0,"index":2205}],"decl_id":null,"docs":" The kind of a repetition operator.\n","sig":null,"attributes":[{"value":"/ The kind of a repetition operator.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46616,"byte_end":46654,"line_start":1148,"line_end":1148,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2220},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46966,"byte_end":46973,"line_start":1165,"line_end":1165,"column_start":5,"column_end":12},"name":"Exactly","qualname":"::ast::RepetitionRange::Exactly","value":"RepetitionRange::Exactly(u32)","parent":{"krate":0,"index":2219},"children":[],"decl_id":null,"docs":" `{m}`\n","sig":null,"attributes":[{"value":"/ `{m}`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46952,"byte_end":46961,"line_start":1164,"line_end":1164,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2223},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46999,"byte_end":47006,"line_start":1167,"line_end":1167,"column_start":5,"column_end":12},"name":"AtLeast","qualname":"::ast::RepetitionRange::AtLeast","value":"RepetitionRange::AtLeast(u32)","parent":{"krate":0,"index":2219},"children":[],"decl_id":null,"docs":" `{m,}`\n","sig":null,"attributes":[{"value":"/ `{m,}`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46984,"byte_end":46994,"line_start":1166,"line_end":1166,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2226},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47033,"byte_end":47040,"line_start":1169,"line_end":1169,"column_start":5,"column_end":12},"name":"Bounded","qualname":"::ast::RepetitionRange::Bounded","value":"RepetitionRange::Bounded(u32, u32)","parent":{"krate":0,"index":2219},"children":[],"decl_id":null,"docs":" `{m,n}`\n","sig":null,"attributes":[{"value":"/ `{m,n}`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47017,"byte_end":47028,"line_start":1168,"line_end":1168,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":2219},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46930,"byte_end":46945,"line_start":1163,"line_end":1163,"column_start":10,"column_end":25},"name":"RepetitionRange","qualname":"::ast::RepetitionRange","value":"RepetitionRange::{Exactly, AtLeast, Bounded}","parent":null,"children":[{"krate":0,"index":2220},{"krate":0,"index":2223},{"krate":0,"index":2226}],"decl_id":null,"docs":" A range repetition operator.\n","sig":null,"attributes":[{"value":"/ A range repetition operator.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":46849,"byte_end":46881,"line_start":1161,"line_end":1161,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47290,"byte_end":47298,"line_start":1177,"line_end":1177,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<RepetitionRange>::is_valid","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this repetition range is valid.","sig":null,"attributes":[{"value":"/ Returns true if and only if this repetition range is valid.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47082,"byte_end":47145,"line_start":1173,"line_end":1173,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47150,"byte_end":47153,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ The only case where a repetition range is invalid is if it is bounded","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47158,"byte_end":47231,"line_start":1175,"line_end":1175,"column_start":5,"column_end":78}},{"value":"/ and its start is greater than its end.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47236,"byte_end":47278,"line_start":1176,"line_end":1176,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2241},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47768,"byte_end":47773,"line_start":1192,"line_end":1192,"column_start":12,"column_end":17},"name":"Group","qualname":"::ast::Group","value":"Group { span, kind, ast }","parent":null,"children":[{"krate":0,"index":2242},{"krate":0,"index":2243},{"krate":0,"index":2244}],"decl_id":null,"docs":" A grouped regular expression.","sig":null,"attributes":[{"value":"/ A grouped regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47442,"byte_end":47475,"line_start":1185,"line_end":1185,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47476,"byte_end":47479,"line_start":1186,"line_end":1186,"column_start":1,"column_end":4}},{"value":"/ This includes both capturing and non-capturing groups. This does **not**","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47480,"byte_end":47556,"line_start":1187,"line_end":1187,"column_start":1,"column_end":77}},{"value":"/ include flag-only groups like `(?is)`, but does contain any group that","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47557,"byte_end":47631,"line_start":1188,"line_end":1188,"column_start":1,"column_end":75}},{"value":"/ contains a sub-expression, e.g., `(a)`, `(?P<name>a)`, `(?:a)` and","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47632,"byte_end":47702,"line_start":1189,"line_end":1189,"column_start":1,"column_end":71}},{"value":"/ `(?is:a)`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47703,"byte_end":47717,"line_start":1190,"line_end":1190,"column_start":1,"column_end":15}}]},{"kind":"Field","id":{"krate":0,"index":2242},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47816,"byte_end":47820,"line_start":1194,"line_end":1194,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Group::span","value":"ast::Span","parent":{"krate":0,"index":2241},"children":[],"decl_id":null,"docs":" The span of this group.\n","sig":null,"attributes":[{"value":"/ The span of this group.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47780,"byte_end":47807,"line_start":1193,"line_end":1193,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2243},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47868,"byte_end":47872,"line_start":1196,"line_end":1196,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::Group::kind","value":"ast::GroupKind","parent":{"krate":0,"index":2241},"children":[],"decl_id":null,"docs":" The kind of this group.\n","sig":null,"attributes":[{"value":"/ The kind of this group.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47832,"byte_end":47859,"line_start":1195,"line_end":1195,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":2244},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47939,"byte_end":47942,"line_start":1198,"line_end":1198,"column_start":9,"column_end":12},"name":"ast","qualname":"::ast::Group::ast","value":"std::boxed::Box<ast::Ast>","parent":{"krate":0,"index":2241},"children":[],"decl_id":null,"docs":" The regular expression in this group.\n","sig":null,"attributes":[{"value":"/ The regular expression in this group.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47889,"byte_end":47930,"line_start":1197,"line_end":1197,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":48113,"byte_end":48118,"line_start":1204,"line_end":1204,"column_start":12,"column_end":17},"name":"flags","qualname":"<Group>::flags","value":"fn (&self) -> Option<&Flags>","parent":null,"children":[],"decl_id":null,"docs":" If this group is non-capturing, then this returns the (possibly empty)\n set of flags. Otherwise, `None` is returned.\n","sig":null,"attributes":[{"value":"/ If this group is non-capturing, then this returns the (possibly empty)","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47974,"byte_end":48048,"line_start":1202,"line_end":1202,"column_start":5,"column_end":79}},{"value":"/ set of flags. Otherwise, `None` is returned.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":48053,"byte_end":48101,"line_start":1203,"line_end":1203,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":48347,"byte_end":48359,"line_start":1212,"line_end":1212,"column_start":12,"column_end":24},"name":"is_capturing","qualname":"<Group>::is_capturing","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this group is capturing.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this group is capturing.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":48279,"byte_end":48335,"line_start":1211,"line_end":1211,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":48721,"byte_end":48734,"line_start":1222,"line_end":1222,"column_start":12,"column_end":25},"name":"capture_index","qualname":"<Group>::capture_index","value":"fn (&self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the capture index of this group, if this is a capturing group.","sig":null,"attributes":[{"value":"/ Returns the capture index of this group, if this is a capturing group.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":48549,"byte_end":48623,"line_start":1219,"line_end":1219,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":48628,"byte_end":48631,"line_start":1220,"line_end":1220,"column_start":5,"column_end":8}},{"value":"/ This returns a capture index precisely when `is_capturing` is `true`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":48636,"byte_end":48709,"line_start":1221,"line_end":1221,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2257},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49066,"byte_end":49078,"line_start":1235,"line_end":1235,"column_start":5,"column_end":17},"name":"CaptureIndex","qualname":"::ast::GroupKind::CaptureIndex","value":"GroupKind::CaptureIndex(u32)","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" `(a)`\n","sig":null,"attributes":[{"value":"/ `(a)`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49052,"byte_end":49061,"line_start":1234,"line_end":1234,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2260},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49111,"byte_end":49122,"line_start":1237,"line_end":1237,"column_start":5,"column_end":16},"name":"CaptureName","qualname":"::ast::GroupKind::CaptureName","value":"GroupKind::CaptureName(CaptureName)","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" `(?P<name>a)`\n","sig":null,"attributes":[{"value":"/ `(?P<name>a)`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49089,"byte_end":49106,"line_start":1236,"line_end":1236,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2263},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49170,"byte_end":49182,"line_start":1239,"line_end":1239,"column_start":5,"column_end":17},"name":"NonCapturing","qualname":"::ast::GroupKind::NonCapturing","value":"GroupKind::NonCapturing(Flags)","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" `(?:a)` and `(?i:a)`\n","sig":null,"attributes":[{"value":"/ `(?:a)` and `(?i:a)`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49141,"byte_end":49165,"line_start":1238,"line_end":1238,"column_start":5,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":2256},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49036,"byte_end":49045,"line_start":1233,"line_end":1233,"column_start":10,"column_end":19},"name":"GroupKind","qualname":"::ast::GroupKind","value":"GroupKind::{CaptureIndex, CaptureName, NonCapturing}","parent":null,"children":[{"krate":0,"index":2257},{"krate":0,"index":2260},{"krate":0,"index":2263}],"decl_id":null,"docs":" The kind of a group.\n","sig":null,"attributes":[{"value":"/ The kind of a group.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":48963,"byte_end":48987,"line_start":1231,"line_end":1231,"column_start":1,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":2277},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49366,"byte_end":49377,"line_start":1247,"line_end":1247,"column_start":12,"column_end":23},"name":"CaptureName","qualname":"::ast::CaptureName","value":"CaptureName { span, name, index }","parent":null,"children":[{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2280}],"decl_id":null,"docs":" A capture name.","sig":null,"attributes":[{"value":"/ A capture name.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49194,"byte_end":49213,"line_start":1242,"line_end":1242,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49214,"byte_end":49217,"line_start":1243,"line_end":1243,"column_start":1,"column_end":4}},{"value":"/ This corresponds to the name itself between the angle brackets in, e.g.,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49218,"byte_end":49294,"line_start":1244,"line_end":1244,"column_start":1,"column_end":77}},{"value":"/ `(?P<foo>expr)`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49295,"byte_end":49315,"line_start":1245,"line_end":1245,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":2278},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49427,"byte_end":49431,"line_start":1249,"line_end":1249,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::CaptureName::span","value":"ast::Span","parent":{"krate":0,"index":2277},"children":[],"decl_id":null,"docs":" The span of this capture name.\n","sig":null,"attributes":[{"value":"/ The span of this capture name.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49384,"byte_end":49418,"line_start":1248,"line_end":1248,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2279},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49473,"byte_end":49477,"line_start":1251,"line_end":1251,"column_start":9,"column_end":13},"name":"name","qualname":"::ast::CaptureName::name","value":"std::string::String","parent":{"krate":0,"index":2277},"children":[],"decl_id":null,"docs":" The capture name.\n","sig":null,"attributes":[{"value":"/ The capture name.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49443,"byte_end":49464,"line_start":1250,"line_end":1250,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":2280},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49522,"byte_end":49527,"line_start":1253,"line_end":1253,"column_start":9,"column_end":14},"name":"index","qualname":"::ast::CaptureName::index","value":"u32","parent":{"krate":0,"index":2277},"children":[],"decl_id":null,"docs":" The capture index.\n","sig":null,"attributes":[{"value":"/ The capture index.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49491,"byte_end":49513,"line_start":1252,"line_end":1252,"column_start":5,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":2292},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49664,"byte_end":49672,"line_start":1258,"line_end":1258,"column_start":12,"column_end":20},"name":"SetFlags","qualname":"::ast::SetFlags","value":"SetFlags { span, flags }","parent":null,"children":[{"krate":0,"index":2293},{"krate":0,"index":2294}],"decl_id":null,"docs":" A group of flags that is not applied to a particular regular expression.\n","sig":null,"attributes":[{"value":"/ A group of flags that is not applied to a particular regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49537,"byte_end":49613,"line_start":1256,"line_end":1256,"column_start":1,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":2293},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49752,"byte_end":49756,"line_start":1260,"line_end":1260,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::SetFlags::span","value":"ast::Span","parent":{"krate":0,"index":2292},"children":[],"decl_id":null,"docs":" The span of these flags, including the grouping parentheses.\n","sig":null,"attributes":[{"value":"/ The span of these flags, including the grouping parentheses.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49679,"byte_end":49743,"line_start":1259,"line_end":1259,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":2294},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49810,"byte_end":49815,"line_start":1262,"line_end":1262,"column_start":9,"column_end":14},"name":"flags","qualname":"::ast::SetFlags::flags","value":"ast::Flags","parent":{"krate":0,"index":2292},"children":[],"decl_id":null,"docs":" The actual sequence of flags.\n","sig":null,"attributes":[{"value":"/ The actual sequence of flags.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49768,"byte_end":49801,"line_start":1261,"line_end":1261,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":2306},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49980,"byte_end":49985,"line_start":1269,"line_end":1269,"column_start":12,"column_end":17},"name":"Flags","qualname":"::ast::Flags","value":"Flags { span, items }","parent":null,"children":[{"krate":0,"index":2307},{"krate":0,"index":2308}],"decl_id":null,"docs":" A group of flags.","sig":null,"attributes":[{"value":"/ A group of flags.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49827,"byte_end":49848,"line_start":1265,"line_end":1265,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49849,"byte_end":49852,"line_start":1266,"line_end":1266,"column_start":1,"column_end":4}},{"value":"/ This corresponds only to the sequence of flags themselves, e.g., `is-u`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49853,"byte_end":49929,"line_start":1267,"line_end":1267,"column_start":1,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":2307},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50037,"byte_end":50041,"line_start":1271,"line_end":1271,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::Flags::span","value":"ast::Span","parent":{"krate":0,"index":2306},"children":[],"decl_id":null,"docs":" The span of this group of flags.\n","sig":null,"attributes":[{"value":"/ The span of this group of flags.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":49992,"byte_end":50028,"line_start":1270,"line_end":1270,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":2308},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50150,"byte_end":50155,"line_start":1274,"line_end":1274,"column_start":9,"column_end":14},"name":"items","qualname":"::ast::Flags::items","value":"std::vec::Vec<ast::FlagsItem>","parent":{"krate":0,"index":2306},"children":[],"decl_id":null,"docs":" A sequence of flag items. Each item is either a flag or a negation\n operator.\n","sig":null,"attributes":[{"value":"/ A sequence of flag items. Each item is either a flag or a negation","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50053,"byte_end":50123,"line_start":1272,"line_end":1272,"column_start":5,"column_end":75}},{"value":"/ operator.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50128,"byte_end":50141,"line_start":1273,"line_end":1273,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50445,"byte_end":50453,"line_start":1283,"line_end":1283,"column_start":12,"column_end":20},"name":"add_item","qualname":"<Flags>::add_item","value":"fn (&mut self, item: FlagsItem) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Add the given item to this sequence of flags.","sig":null,"attributes":[{"value":"/ Add the given item to this sequence of flags.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50193,"byte_end":50242,"line_start":1278,"line_end":1278,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50247,"byte_end":50250,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ If the item was added successfully, then `None` is returned. If the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50255,"byte_end":50326,"line_start":1280,"line_end":1280,"column_start":5,"column_end":76}},{"value":"/ given item is a duplicate, then `Some(i)` is returned, where","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50331,"byte_end":50395,"line_start":1281,"line_end":1281,"column_start":5,"column_end":69}},{"value":"/ `items[i].kind == item.kind`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50400,"byte_end":50433,"line_start":1282,"line_end":1282,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51025,"byte_end":51035,"line_start":1302,"line_end":1302,"column_start":12,"column_end":22},"name":"flag_state","qualname":"<Flags>::flag_state","value":"fn (&self, flag: Flag) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Returns the state of the given flag in this set.","sig":null,"attributes":[{"value":"/ Returns the state of the given flag in this set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50703,"byte_end":50755,"line_start":1293,"line_end":1293,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50760,"byte_end":50763,"line_start":1294,"line_end":1294,"column_start":5,"column_end":8}},{"value":"/ If the given flag is in the set but is negated, then `Some(false)` is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50768,"byte_end":50841,"line_start":1295,"line_end":1295,"column_start":5,"column_end":78}},{"value":"/ returned.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50846,"byte_end":50859,"line_start":1296,"line_end":1296,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50864,"byte_end":50867,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ If the given flag is in the set and is not negated, then `Some(true)`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50872,"byte_end":50945,"line_start":1298,"line_end":1298,"column_start":5,"column_end":78}},{"value":"/ is returned.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50950,"byte_end":50966,"line_start":1299,"line_end":1299,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50971,"byte_end":50974,"line_start":1300,"line_end":1300,"column_start":5,"column_end":8}},{"value":"/ Otherwise, `None` is returned.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50979,"byte_end":51013,"line_start":1301,"line_end":1301,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":2320},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51553,"byte_end":51562,"line_start":1321,"line_end":1321,"column_start":12,"column_end":21},"name":"FlagsItem","qualname":"::ast::FlagsItem","value":"FlagsItem { span, kind }","parent":null,"children":[{"krate":0,"index":2321},{"krate":0,"index":2322}],"decl_id":null,"docs":" A single item in a group of flags.\n","sig":null,"attributes":[{"value":"/ A single item in a group of flags.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51464,"byte_end":51502,"line_start":1319,"line_end":1319,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2321},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51604,"byte_end":51608,"line_start":1323,"line_end":1323,"column_start":9,"column_end":13},"name":"span","qualname":"::ast::FlagsItem::span","value":"ast::Span","parent":{"krate":0,"index":2320},"children":[],"decl_id":null,"docs":" The span of this item.\n","sig":null,"attributes":[{"value":"/ The span of this item.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51569,"byte_end":51595,"line_start":1322,"line_end":1322,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2322},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51655,"byte_end":51659,"line_start":1325,"line_end":1325,"column_start":9,"column_end":13},"name":"kind","qualname":"::ast::FlagsItem::kind","value":"ast::FlagsItemKind","parent":{"krate":0,"index":2320},"children":[],"decl_id":null,"docs":" The kind of this item.\n","sig":null,"attributes":[{"value":"/ The kind of this item.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51620,"byte_end":51646,"line_start":1324,"line_end":1324,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2335},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51884,"byte_end":51892,"line_start":1333,"line_end":1333,"column_start":5,"column_end":13},"name":"Negation","qualname":"::ast::FlagsItemKind::Negation","value":"FlagsItemKind::Negation","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" A negation operator applied to all subsequent flags in the enclosing\n group.\n","sig":null,"attributes":[{"value":"/ A negation operator applied to all subsequent flags in the enclosing","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51792,"byte_end":51864,"line_start":1331,"line_end":1331,"column_start":5,"column_end":77}},{"value":"/ group.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51869,"byte_end":51879,"line_start":1332,"line_end":1332,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2337},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51932,"byte_end":51936,"line_start":1335,"line_end":1335,"column_start":5,"column_end":9},"name":"Flag","qualname":"::ast::FlagsItemKind::Flag","value":"FlagsItemKind::Flag(Flag)","parent":{"krate":0,"index":2334},"children":[],"decl_id":null,"docs":" A single flag in a group.\n","sig":null,"attributes":[{"value":"/ A single flag in a group.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51898,"byte_end":51927,"line_start":1334,"line_end":1334,"column_start":5,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":2334},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51772,"byte_end":51785,"line_start":1330,"line_end":1330,"column_start":10,"column_end":23},"name":"FlagsItemKind","qualname":"::ast::FlagsItemKind","value":"FlagsItemKind::{Negation, Flag}","parent":null,"children":[{"krate":0,"index":2335},{"krate":0,"index":2337}],"decl_id":null,"docs":" The kind of an item in a group of flags.\n","sig":null,"attributes":[{"value":"/ The kind of an item in a group of flags.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51679,"byte_end":51723,"line_start":1328,"line_end":1328,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52049,"byte_end":52060,"line_start":1340,"line_end":1340,"column_start":12,"column_end":23},"name":"is_negation","qualname":"<FlagsItemKind>::is_negation","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this item is a negation operator.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this item is a negation operator.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51972,"byte_end":52037,"line_start":1339,"line_end":1339,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2352},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52284,"byte_end":52299,"line_start":1352,"line_end":1352,"column_start":5,"column_end":20},"name":"CaseInsensitive","qualname":"::ast::Flag::CaseInsensitive","value":"Flag::CaseInsensitive","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" `i`\n","sig":null,"attributes":[{"value":"/ `i`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52272,"byte_end":52279,"line_start":1351,"line_end":1351,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2354},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52317,"byte_end":52326,"line_start":1354,"line_end":1354,"column_start":5,"column_end":14},"name":"MultiLine","qualname":"::ast::Flag::MultiLine","value":"Flag::MultiLine","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" `m`\n","sig":null,"attributes":[{"value":"/ `m`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52305,"byte_end":52312,"line_start":1353,"line_end":1353,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2356},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52344,"byte_end":52361,"line_start":1356,"line_end":1356,"column_start":5,"column_end":22},"name":"DotMatchesNewLine","qualname":"::ast::Flag::DotMatchesNewLine","value":"Flag::DotMatchesNewLine","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" `s`\n","sig":null,"attributes":[{"value":"/ `s`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52332,"byte_end":52339,"line_start":1355,"line_end":1355,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2358},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52379,"byte_end":52388,"line_start":1358,"line_end":1358,"column_start":5,"column_end":14},"name":"SwapGreed","qualname":"::ast::Flag::SwapGreed","value":"Flag::SwapGreed","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" `U`\n","sig":null,"attributes":[{"value":"/ `U`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52367,"byte_end":52374,"line_start":1357,"line_end":1357,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2360},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52406,"byte_end":52413,"line_start":1360,"line_end":1360,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::ast::Flag::Unicode","value":"Flag::Unicode","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" `u`\n","sig":null,"attributes":[{"value":"/ `u`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52394,"byte_end":52401,"line_start":1359,"line_end":1359,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2362},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52431,"byte_end":52447,"line_start":1362,"line_end":1362,"column_start":5,"column_end":21},"name":"IgnoreWhitespace","qualname":"::ast::Flag::IgnoreWhitespace","value":"Flag::IgnoreWhitespace","parent":{"krate":0,"index":2351},"children":[],"decl_id":null,"docs":" `x`\n","sig":null,"attributes":[{"value":"/ `x`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52419,"byte_end":52426,"line_start":1361,"line_end":1361,"column_start":5,"column_end":12}}]},{"kind":"Enum","id":{"krate":0,"index":2351},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52261,"byte_end":52265,"line_start":1350,"line_end":1350,"column_start":10,"column_end":14},"name":"Flag","qualname":"::ast::Flag","value":"Flag::{CaseInsensitive, MultiLine, DotMatchesNewLine, SwapGreed, Unicode, IgnoreWhitespace}","parent":null,"children":[{"krate":0,"index":2352},{"krate":0,"index":2354},{"krate":0,"index":2356},{"krate":0,"index":2358},{"krate":0,"index":2360},{"krate":0,"index":2362}],"decl_id":null,"docs":" A single flag.\n","sig":null,"attributes":[{"value":"/ A single flag.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52188,"byte_end":52206,"line_start":1348,"line_end":1348,"column_start":1,"column_end":19}}]},{"kind":"Type","id":{"krate":0,"index":405},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":291715,"byte_end":291721,"line_start":10,"line_end":10,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A type alias for dealing with errors returned by this crate.\n","sig":null,"attributes":[{"value":"/ A type alias for dealing with errors returned by this crate.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":291641,"byte_end":291705,"line_start":9,"line_end":9,"column_start":1,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2408},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":291993,"byte_end":291998,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Parse","qualname":"::error::Error::Parse","value":"Error::Parse(ast::Error)","parent":{"krate":0,"index":2407},"children":[],"decl_id":null,"docs":" An error that occurred while translating concrete syntax into abstract\n syntax (AST).\n","sig":null,"attributes":[{"value":"/ An error that occurred while translating concrete syntax into abstract","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":291892,"byte_end":291966,"line_start":15,"line_end":15,"column_start":5,"column_end":79}},{"value":"/ syntax (AST).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":291971,"byte_end":291988,"line_start":16,"line_end":16,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2411},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292142,"byte_end":292151,"line_start":20,"line_end":20,"column_start":5,"column_end":14},"name":"Translate","qualname":"::error::Error::Translate","value":"Error::Translate(hir::Error)","parent":{"krate":0,"index":2407},"children":[],"decl_id":null,"docs":" An error that occurred while translating abstract syntax into a high\n level intermediate representation (HIR).\n","sig":null,"attributes":[{"value":"/ An error that occurred while translating abstract syntax into a high","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292016,"byte_end":292088,"line_start":18,"line_end":18,"column_start":5,"column_end":77}},{"value":"/ level intermediate representation (HIR).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292093,"byte_end":292137,"line_start":19,"line_end":19,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2414},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292443,"byte_end":292458,"line_start":27,"line_end":27,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::Error::__Nonexhaustive","value":"Error::__Nonexhaustive","parent":{"krate":0,"index":2407},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292169,"byte_end":292223,"line_start":21,"line_end":21,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292228,"byte_end":292231,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292236,"byte_end":292306,"line_start":23,"line_end":23,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292311,"byte_end":292383,"line_start":24,"line_end":24,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292388,"byte_end":292419,"line_start":25,"line_end":25,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":2407},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":291880,"byte_end":291885,"line_start":14,"line_end":14,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Parse, Translate, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":2408},{"krate":0,"index":2411},{"krate":0,"index":2414}],"decl_id":null,"docs":" This error type encompasses any error that can be returned by this crate.\n","sig":null,"attributes":[{"value":"/ This error type encompasses any error that can be returned by this crate.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":291754,"byte_end":291831,"line_start":12,"line_end":12,"column_start":1,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":442},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hir","qualname":"::hir","value":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":516},{"krate":0,"index":620},{"krate":0,"index":654},{"krate":0,"index":763},{"krate":0,"index":2570},{"krate":0,"index":2583},{"krate":0,"index":2581},{"krate":0,"index":2578},{"krate":0,"index":2579},{"krate":0,"index":2574},{"krate":0,"index":2575},{"krate":0,"index":805},{"krate":0,"index":2585},{"krate":0,"index":2606},{"krate":0,"index":2604},{"krate":0,"index":2601},{"krate":0,"index":2602},{"krate":0,"index":2598},{"krate":0,"index":2599},{"krate":0,"index":809},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":2608},{"krate":0,"index":2620},{"krate":0,"index":2618},{"krate":0,"index":2615},{"krate":0,"index":2616},{"krate":0,"index":2611},{"krate":0,"index":2612},{"krate":0,"index":2622},{"krate":0,"index":2658},{"krate":0,"index":2656},{"krate":0,"index":2653},{"krate":0,"index":2654},{"krate":0,"index":2649},{"krate":0,"index":2650},{"krate":0,"index":818},{"krate":0,"index":844},{"krate":0,"index":847},{"krate":0,"index":2660},{"krate":0,"index":2676},{"krate":0,"index":2674},{"krate":0,"index":2671},{"krate":0,"index":2672},{"krate":0,"index":2667},{"krate":0,"index":2668},{"krate":0,"index":850},{"krate":0,"index":2678},{"krate":0,"index":2694},{"krate":0,"index":2692},{"krate":0,"index":2689},{"krate":0,"index":2690},{"krate":0,"index":2685},{"krate":0,"index":2686},{"krate":0,"index":852},{"krate":0,"index":2696},{"krate":0,"index":2707},{"krate":0,"index":2705},{"krate":0,"index":2702},{"krate":0,"index":2703},{"krate":0,"index":2698},{"krate":0,"index":2699},{"krate":0,"index":856},{"krate":0,"index":2709},{"krate":0,"index":2713},{"krate":0,"index":869},{"krate":0,"index":2716},{"krate":0,"index":2741},{"krate":0,"index":2740},{"krate":0,"index":2738},{"krate":0,"index":2735},{"krate":0,"index":2736},{"krate":0,"index":2731},{"krate":0,"index":2732},{"krate":0,"index":2721},{"krate":0,"index":2719},{"krate":0,"index":873},{"krate":0,"index":875},{"krate":0,"index":883},{"krate":0,"index":2743},{"krate":0,"index":2754},{"krate":0,"index":2752},{"krate":0,"index":2749},{"krate":0,"index":2750},{"krate":0,"index":2745},{"krate":0,"index":2746},{"krate":0,"index":887},{"krate":0,"index":2756},{"krate":0,"index":2760},{"krate":0,"index":902},{"krate":0,"index":2763},{"krate":0,"index":2788},{"krate":0,"index":2787},{"krate":0,"index":2785},{"krate":0,"index":2782},{"krate":0,"index":2783},{"krate":0,"index":2778},{"krate":0,"index":2779},{"krate":0,"index":2768},{"krate":0,"index":2766},{"krate":0,"index":906},{"krate":0,"index":913},{"krate":0,"index":917},{"krate":0,"index":2790},{"krate":0,"index":2807},{"krate":0,"index":2805},{"krate":0,"index":2802},{"krate":0,"index":2803},{"krate":0,"index":2799},{"krate":0,"index":2800},{"krate":0,"index":2809},{"krate":0,"index":2826},{"krate":0,"index":2824},{"krate":0,"index":2821},{"krate":0,"index":2822},{"krate":0,"index":2818},{"krate":0,"index":2819},{"krate":0,"index":919},{"krate":0,"index":2828},{"krate":0,"index":2840},{"krate":0,"index":2838},{"krate":0,"index":2835},{"krate":0,"index":2836},{"krate":0,"index":2831},{"krate":0,"index":2832},{"krate":0,"index":2842},{"krate":0,"index":2860},{"krate":0,"index":2858},{"krate":0,"index":2855},{"krate":0,"index":2856},{"krate":0,"index":2851},{"krate":0,"index":2852},{"krate":0,"index":2862},{"krate":0,"index":2875},{"krate":0,"index":2873},{"krate":0,"index":2870},{"krate":0,"index":2871},{"krate":0,"index":2866},{"krate":0,"index":2867},{"krate":0,"index":921},{"krate":0,"index":2877},{"krate":0,"index":2896},{"krate":0,"index":2894},{"krate":0,"index":2891},{"krate":0,"index":2892},{"krate":0,"index":2887},{"krate":0,"index":2888},{"krate":0,"index":2898},{"krate":0,"index":2918},{"krate":0,"index":2916},{"krate":0,"index":2913},{"krate":0,"index":2914},{"krate":0,"index":2909},{"krate":0,"index":2910},{"krate":0,"index":923},{"krate":0,"index":2920},{"krate":0,"index":2931},{"krate":0,"index":2929},{"krate":0,"index":2926},{"krate":0,"index":2927},{"krate":0,"index":2922},{"krate":0,"index":2923},{"krate":0,"index":926},{"krate":0,"index":927}],"decl_id":null,"docs":"Defines a high-level intermediate representation for regular expressions.\n","sig":null,"attributes":[{"value":"!\nDefines a high-level intermediate representation for regular expressions.\n*/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":302277,"byte_end":302357,"line_start":11,"line_end":13,"column_start":1,"column_end":3}}]},{"kind":"Type","id":{"krate":0,"index":484},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":388392,"byte_end":388397,"line_start":329,"line_end":329,"column_start":10,"column_end":15},"name":"Bound","qualname":"::hir::interval::Interval::Bound","value":"type Bound: Bound;","parent":{"krate":0,"index":483},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":516},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"literal","qualname":"::hir::literal","value":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","parent":null,"children":[{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":526},{"krate":0,"index":2467},{"krate":0,"index":2478},{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2471},{"krate":0,"index":2472},{"krate":0,"index":2480},{"krate":0,"index":2488},{"krate":0,"index":2485},{"krate":0,"index":2486},{"krate":0,"index":2483},{"krate":0,"index":527},{"krate":0,"index":576},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":589},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":609},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":618}],"decl_id":null,"docs":"Provides routines for extracting literal prefixes and suffixes from an `Hir`.\n","sig":null,"attributes":[{"value":"!\nProvides routines for extracting literal prefixes and suffixes from an `Hir`.\n*/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":394461,"byte_end":394545,"line_start":11,"line_end":13,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":2467},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395894,"byte_end":395902,"line_start":46,"line_end":46,"column_start":12,"column_end":20},"name":"Literals","qualname":"::hir::literal::Literals","value":"Literals {  }","parent":null,"children":[{"krate":0,"index":2468},{"krate":0,"index":2469},{"krate":0,"index":2470}],"decl_id":null,"docs":" A set of literal byte strings extracted from a regular expression.","sig":null,"attributes":[{"value":"/ A set of literal byte strings extracted from a regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":394664,"byte_end":394734,"line_start":24,"line_end":24,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":394735,"byte_end":394738,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Every member of the set is a `Literal`, which is represented by a","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":394739,"byte_end":394808,"line_start":26,"line_end":26,"column_start":1,"column_end":70}},{"value":"/ `Vec<u8>`. (Notably, it may contain invalid UTF-8.) Every member is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":394809,"byte_end":394880,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/ said to be either *complete* or *cut*. A complete literal means that","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":394881,"byte_end":394953,"line_start":28,"line_end":28,"column_start":1,"column_end":73}},{"value":"/ it extends until the beginning (or end) of the regular expression. In","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":394954,"byte_end":395027,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/ some circumstances, this can be used to indicate a match in the regular","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395028,"byte_end":395103,"line_start":30,"line_end":30,"column_start":1,"column_end":76}},{"value":"/ expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395104,"byte_end":395119,"line_start":31,"line_end":31,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395120,"byte_end":395123,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ A key aspect of literal extraction is knowing when to stop. It is not","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395124,"byte_end":395197,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ feasible to blindly extract all literals from a regular expression, even if","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395198,"byte_end":395277,"line_start":34,"line_end":34,"column_start":1,"column_end":80}},{"value":"/ there are finitely many. For example, the regular expression `[0-9]{10}`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395278,"byte_end":395354,"line_start":35,"line_end":35,"column_start":1,"column_end":77}},{"value":"/ has `10^10` distinct literals. For this reason, literal extraction is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395355,"byte_end":395428,"line_start":36,"line_end":36,"column_start":1,"column_end":74}},{"value":"/ bounded to some low number by default using heuristics, but the limits can","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395429,"byte_end":395507,"line_start":37,"line_end":37,"column_start":1,"column_end":79}},{"value":"/ be tweaked.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395508,"byte_end":395523,"line_start":38,"line_end":38,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395524,"byte_end":395527,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ **WARNING**: Literal extraction uses stack space proportional to the size","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395528,"byte_end":395605,"line_start":40,"line_end":40,"column_start":1,"column_end":78}},{"value":"/ of the `Hir` expression. At some point, this drawback will be eliminated.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395606,"byte_end":395683,"line_start":41,"line_end":41,"column_start":1,"column_end":78}},{"value":"/ To protect yourself, set a reasonable","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395684,"byte_end":395725,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"/ [`nest_limit` on your `Parser`](../../struct.ParserBuilder.html#method.nest_limit).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395726,"byte_end":395813,"line_start":43,"line_end":43,"column_start":1,"column_end":88}},{"value":"/ This is done for you by default.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395814,"byte_end":395850,"line_start":44,"line_end":44,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":2480},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":396216,"byte_end":396223,"line_start":57,"line_end":57,"column_start":12,"column_end":19},"name":"Literal","qualname":"::hir::literal::Literal","value":"Literal {  }","parent":null,"children":[{"krate":0,"index":2481},{"krate":0,"index":2482}],"decl_id":null,"docs":" A single member of a set of literals extracted from a regular expression.","sig":null,"attributes":[{"value":"/ A single member of a set of literals extracted from a regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":395979,"byte_end":396056,"line_start":52,"line_end":52,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":396057,"byte_end":396060,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ This type has `Deref` and `DerefMut` impls to `Vec<u8>` so that all slice","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":396061,"byte_end":396138,"line_start":54,"line_end":54,"column_start":1,"column_end":78}},{"value":"/ and `Vec` operations are available.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":396139,"byte_end":396178,"line_start":55,"line_end":55,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":396353,"byte_end":396358,"line_start":64,"line_end":64,"column_start":12,"column_end":17},"name":"empty","qualname":"<Literals>::empty","value":"fn () -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new empty set of literals using default limits.\n","sig":null,"attributes":[{"value":"/ Returns a new empty set of literals using default limits.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":396280,"byte_end":396341,"line_start":63,"line_end":63,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":396580,"byte_end":396588,"line_start":73,"line_end":73,"column_start":12,"column_end":20},"name":"prefixes","qualname":"<Literals>::prefixes","value":"fn (expr: &Hir) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a set of literal prefixes extracted from the given `Hir`.\n","sig":null,"attributes":[{"value":"/ Returns a set of literal prefixes extracted from the given `Hir`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":396499,"byte_end":396568,"line_start":72,"line_end":72,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":396797,"byte_end":396805,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"suffixes","qualname":"<Literals>::suffixes","value":"fn (expr: &Hir) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a set of literal suffixes extracted from the given `Hir`.\n","sig":null,"attributes":[{"value":"/ Returns a set of literal suffixes extracted from the given `Hir`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":396716,"byte_end":396785,"line_start":79,"line_end":79,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":531},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397003,"byte_end":397013,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"limit_size","qualname":"<Literals>::limit_size","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the approximate size limit (in bytes) of this set.\n","sig":null,"attributes":[{"value":"/ Get the approximate size limit (in bytes) of this set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":396933,"byte_end":396991,"line_start":86,"line_end":86,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397398,"byte_end":397412,"line_start":98,"line_end":98,"column_start":12,"column_end":26},"name":"set_limit_size","qualname":"<Literals>::set_limit_size","value":"fn (&mut self, size: usize) -> &mut Literals","parent":null,"children":[],"decl_id":null,"docs":" Set the approximate size limit (in bytes) of this set.","sig":null,"attributes":[{"value":"/ Set the approximate size limit (in bytes) of this set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397067,"byte_end":397125,"line_start":91,"line_end":91,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397130,"byte_end":397133,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ If extracting a literal would put the set over this limit, then","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397138,"byte_end":397205,"line_start":93,"line_end":93,"column_start":5,"column_end":72}},{"value":"/ extraction stops.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397210,"byte_end":397231,"line_start":94,"line_end":94,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397236,"byte_end":397239,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ The new limits will only apply to additions to this set. Existing","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397244,"byte_end":397313,"line_start":96,"line_end":96,"column_start":5,"column_end":74}},{"value":"/ members remain unchanged, even if the set exceeds the new limit.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397318,"byte_end":397386,"line_start":97,"line_end":97,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397576,"byte_end":397587,"line_start":104,"line_end":104,"column_start":12,"column_end":23},"name":"limit_class","qualname":"<Literals>::limit_class","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the character class size limit for this set.\n","sig":null,"attributes":[{"value":"/ Get the character class size limit for this set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397512,"byte_end":397564,"line_start":103,"line_end":103,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":398141,"byte_end":398156,"line_start":118,"line_end":118,"column_start":12,"column_end":27},"name":"set_limit_class","qualname":"<Literals>::set_limit_class","value":"fn (&mut self, size: usize) -> &mut Literals","parent":null,"children":[],"decl_id":null,"docs":" Limits the size of character(or byte) classes considered.","sig":null,"attributes":[{"value":"/ Limits the size of character(or byte) classes considered.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397642,"byte_end":397703,"line_start":108,"line_end":108,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397708,"byte_end":397711,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ A value of `0` prevents all character classes from being considered.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397716,"byte_end":397788,"line_start":110,"line_end":110,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397793,"byte_end":397796,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ This limit also applies to case insensitive literals, since each","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397801,"byte_end":397869,"line_start":112,"line_end":112,"column_start":5,"column_end":73}},{"value":"/ character in the case insensitive literal is converted to a class, and","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397874,"byte_end":397948,"line_start":113,"line_end":113,"column_start":5,"column_end":79}},{"value":"/ then case folded.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397953,"byte_end":397974,"line_start":114,"line_end":114,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397979,"byte_end":397982,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ The new limits will only apply to additions to this set. Existing","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":397987,"byte_end":398056,"line_start":116,"line_end":116,"column_start":5,"column_end":74}},{"value":"/ members remain unchanged, even if the set exceeds the new limit.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":398061,"byte_end":398129,"line_start":117,"line_end":117,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":398338,"byte_end":398346,"line_start":124,"line_end":124,"column_start":12,"column_end":20},"name":"literals","qualname":"<Literals>::literals","value":"fn (&self) -> &[Literal]","parent":null,"children":[],"decl_id":null,"docs":" Returns the set of literals as a slice. Its order is unspecified.\n","sig":null,"attributes":[{"value":"/ Returns the set of literals as a slice. Its order is unspecified.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":398257,"byte_end":398326,"line_start":123,"line_end":123,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":398525,"byte_end":398532,"line_start":131,"line_end":131,"column_start":12,"column_end":19},"name":"min_len","qualname":"<Literals>::min_len","value":"fn (&self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the smallest literal.","sig":null,"attributes":[{"value":"/ Returns the length of the smallest literal.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":398400,"byte_end":398447,"line_start":128,"line_end":128,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":398452,"byte_end":398455,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Returns None is there are no literals in the set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":398460,"byte_end":398513,"line_start":130,"line_end":130,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":398897,"byte_end":398909,"line_start":144,"line_end":144,"column_start":12,"column_end":24},"name":"all_complete","qualname":"<Literals>::all_complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if all members in this set are complete.\n","sig":null,"attributes":[{"value":"/ Returns true if all members in this set are complete.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":398828,"byte_end":398885,"line_start":143,"line_end":143,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":399076,"byte_end":399088,"line_start":149,"line_end":149,"column_start":12,"column_end":24},"name":"any_complete","qualname":"<Literals>::any_complete","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if any member in this set is complete.\n","sig":null,"attributes":[{"value":"/ Returns true if any member in this set is complete.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":399009,"byte_end":399064,"line_start":148,"line_end":148,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":399234,"byte_end":399248,"line_start":154,"line_end":154,"column_start":12,"column_end":26},"name":"contains_empty","qualname":"<Literals>::contains_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this set contains an empty literal.\n","sig":null,"attributes":[{"value":"/ Returns true if this set contains an empty literal.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":399167,"byte_end":399222,"line_start":153,"line_end":153,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":399412,"byte_end":399420,"line_start":159,"line_end":159,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Literals>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this set is empty or if all of its members is empty.\n","sig":null,"attributes":[{"value":"/ Returns true if this set is empty or if all of its members is empty.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":399328,"byte_end":399400,"line_start":158,"line_end":158,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":399600,"byte_end":399608,"line_start":164,"line_end":164,"column_start":12,"column_end":20},"name":"to_empty","qualname":"<Literals>::to_empty","value":"fn (&self) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new empty set of literals using this set's limits.\n","sig":null,"attributes":[{"value":"/ Returns a new empty set of literals using this set's limits.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":399524,"byte_end":399588,"line_start":163,"line_end":163,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":399866,"byte_end":399887,"line_start":172,"line_end":172,"column_start":12,"column_end":33},"name":"longest_common_prefix","qualname":"<Literals>::longest_common_prefix","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest common prefix of all members in this set.\n","sig":null,"attributes":[{"value":"/ Returns the longest common prefix of all members in this set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":399789,"byte_end":399854,"line_start":171,"line_end":171,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":400387,"byte_end":400408,"line_start":190,"line_end":190,"column_start":12,"column_end":33},"name":"longest_common_suffix","qualname":"<Literals>::longest_common_suffix","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the longest common suffix of all members in this set.\n","sig":null,"attributes":[{"value":"/ Returns the longest common suffix of all members in this set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":400310,"byte_end":400375,"line_start":189,"line_end":189,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":401223,"byte_end":401234,"line_start":216,"line_end":216,"column_start":12,"column_end":23},"name":"trim_suffix","qualname":"<Literals>::trim_suffix","value":"fn (&self, num_bytes: usize) -> Option<Literals>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new set of literals with the given number of bytes trimmed\n from the suffix of each literal.","sig":null,"attributes":[{"value":"/ Returns a new set of literals with the given number of bytes trimmed","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":400891,"byte_end":400963,"line_start":208,"line_end":208,"column_start":5,"column_end":77}},{"value":"/ from the suffix of each literal.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":400968,"byte_end":401004,"line_start":209,"line_end":209,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":401009,"byte_end":401012,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ If any literal would be cut out completely by trimming, then None is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":401017,"byte_end":401089,"line_start":211,"line_end":211,"column_start":5,"column_end":77}},{"value":"/ returned.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":401094,"byte_end":401107,"line_start":212,"line_end":212,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":401112,"byte_end":401115,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ Any duplicates that are created as a result of this transformation are","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":401120,"byte_end":401194,"line_start":214,"line_end":214,"column_start":5,"column_end":79}},{"value":"/ removed.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":401199,"byte_end":401211,"line_start":215,"line_end":215,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":402131,"byte_end":402151,"line_start":241,"line_end":241,"column_start":12,"column_end":32},"name":"unambiguous_prefixes","qualname":"<Literals>::unambiguous_prefixes","value":"fn (&self) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new set of prefixes of this set of literals that are\n guaranteed to be unambiguous.","sig":null,"attributes":[{"value":"/ Returns a new set of prefixes of this set of literals that are","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":401708,"byte_end":401774,"line_start":232,"line_end":232,"column_start":5,"column_end":71}},{"value":"/ guaranteed to be unambiguous.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":401779,"byte_end":401812,"line_start":233,"line_end":233,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":401817,"byte_end":401820,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ Any substring match with a member of the set is returned is guaranteed","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":401825,"byte_end":401899,"line_start":235,"line_end":235,"column_start":5,"column_end":79}},{"value":"/ to never overlap with a substring match of another member of the set","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":401904,"byte_end":401976,"line_start":236,"line_end":236,"column_start":5,"column_end":77}},{"value":"/ at the same starting position.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":401981,"byte_end":402015,"line_start":237,"line_end":237,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":402020,"byte_end":402023,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ Given any two members of the returned set, neither is a substring of","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":402028,"byte_end":402100,"line_start":239,"line_end":239,"column_start":5,"column_end":77}},{"value":"/ the other.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":402105,"byte_end":402119,"line_start":240,"line_end":240,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":404724,"byte_end":404744,"line_start":309,"line_end":309,"column_start":12,"column_end":32},"name":"unambiguous_suffixes","qualname":"<Literals>::unambiguous_suffixes","value":"fn (&self) -> Literals","parent":null,"children":[],"decl_id":null,"docs":" Returns a new set of suffixes of this set of literals that are\n guaranteed to be unambiguous.","sig":null,"attributes":[{"value":"/ Returns a new set of suffixes of this set of literals that are","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":404303,"byte_end":404369,"line_start":300,"line_end":300,"column_start":5,"column_end":71}},{"value":"/ guaranteed to be unambiguous.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":404374,"byte_end":404407,"line_start":301,"line_end":301,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":404412,"byte_end":404415,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ Any substring match with a member of the set is returned is guaranteed","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":404420,"byte_end":404494,"line_start":303,"line_end":303,"column_start":5,"column_end":79}},{"value":"/ to never overlap with a substring match of another member of the set","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":404499,"byte_end":404571,"line_start":304,"line_end":304,"column_start":5,"column_end":77}},{"value":"/ at the same ending position.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":404576,"byte_end":404608,"line_start":305,"line_end":305,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":404613,"byte_end":404616,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Given any two members of the returned set, neither is a substring of","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":404621,"byte_end":404693,"line_start":307,"line_end":307,"column_start":5,"column_end":77}},{"value":"/ the other.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":404698,"byte_end":404712,"line_start":308,"line_end":308,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":555},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405435,"byte_end":405449,"line_start":327,"line_end":327,"column_start":12,"column_end":26},"name":"union_prefixes","qualname":"<Literals>::union_prefixes","value":"fn (&mut self, expr: &Hir) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unions the prefixes from the given expression to this set.","sig":null,"attributes":[{"value":"/ Unions the prefixes from the given expression to this set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":404969,"byte_end":405031,"line_start":318,"line_end":318,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405036,"byte_end":405039,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ If prefixes could not be added (for example, this set would exceed its","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405044,"byte_end":405118,"line_start":320,"line_end":320,"column_start":5,"column_end":79}},{"value":"/ size limits or the set of prefixes from `expr` includes the empty","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405123,"byte_end":405192,"line_start":321,"line_end":321,"column_start":5,"column_end":74}},{"value":"/ string), then false is returned.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405197,"byte_end":405233,"line_start":322,"line_end":322,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405238,"byte_end":405241,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ Note that prefix literals extracted from `expr` are said to be complete","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405246,"byte_end":405321,"line_start":324,"line_end":324,"column_start":5,"column_end":80}},{"value":"/ if and only if the literal extends from the beginning of `expr` to the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405326,"byte_end":405400,"line_start":325,"line_end":325,"column_start":5,"column_end":79}},{"value":"/ end of `expr`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405405,"byte_end":405423,"line_start":326,"line_end":326,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":406106,"byte_end":406120,"line_start":342,"line_end":342,"column_start":12,"column_end":26},"name":"union_suffixes","qualname":"<Literals>::union_suffixes","value":"fn (&mut self, expr: &Hir) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unions the suffixes from the given expression to this set.","sig":null,"attributes":[{"value":"/ Unions the suffixes from the given expression to this set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405640,"byte_end":405702,"line_start":333,"line_end":333,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405707,"byte_end":405710,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ If suffixes could not be added (for example, this set would exceed its","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405715,"byte_end":405789,"line_start":335,"line_end":335,"column_start":5,"column_end":79}},{"value":"/ size limits or the set of suffixes from `expr` includes the empty","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405794,"byte_end":405863,"line_start":336,"line_end":336,"column_start":5,"column_end":74}},{"value":"/ string), then false is returned.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405868,"byte_end":405904,"line_start":337,"line_end":337,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405909,"byte_end":405912,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ Note that prefix literals extracted from `expr` are said to be complete","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405917,"byte_end":405992,"line_start":339,"line_end":339,"column_start":5,"column_end":80}},{"value":"/ if and only if the literal extends from the end of `expr` to the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":405997,"byte_end":406065,"line_start":340,"line_end":340,"column_start":5,"column_end":73}},{"value":"/ beginning of `expr`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":406070,"byte_end":406094,"line_start":341,"line_end":341,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":557},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":406570,"byte_end":406575,"line_start":354,"line_end":354,"column_start":12,"column_end":17},"name":"union","qualname":"<Literals>::union","value":"fn (&mut self, lits: Literals) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Unions this set with another set.","sig":null,"attributes":[{"value":"/ Unions this set with another set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":406335,"byte_end":406372,"line_start":349,"line_end":349,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":406377,"byte_end":406380,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ If the union would cause the set to exceed its limits, then the union","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":406385,"byte_end":406458,"line_start":351,"line_end":351,"column_start":5,"column_end":78}},{"value":"/ is skipped and it returns false. Otherwise, if the union succeeds, it","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":406463,"byte_end":406536,"line_start":352,"line_end":352,"column_start":5,"column_end":78}},{"value":"/ returns true.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":406541,"byte_end":406558,"line_start":353,"line_end":353,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":407211,"byte_end":407224,"line_start":373,"line_end":373,"column_start":12,"column_end":25},"name":"cross_product","qualname":"<Literals>::cross_product","value":"fn (&mut self, lits: &Literals) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends this set with another set.","sig":null,"attributes":[{"value":"/ Extends this set with another set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":406883,"byte_end":406921,"line_start":366,"line_end":366,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":406926,"byte_end":406929,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ The set of literals is extended via a cross product.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":406934,"byte_end":406990,"line_start":368,"line_end":368,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":406995,"byte_end":406998,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ If a cross product would cause this set to exceed its limits, then the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":407003,"byte_end":407077,"line_start":370,"line_end":370,"column_start":5,"column_end":79}},{"value":"/ cross product is skipped and it returns false. Otherwise, if the cross","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":407082,"byte_end":407156,"line_start":371,"line_end":371,"column_start":5,"column_end":79}},{"value":"/ product succeeds, it returns true.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":407161,"byte_end":407199,"line_start":372,"line_end":372,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":408958,"byte_end":408967,"line_start":422,"line_end":422,"column_start":12,"column_end":21},"name":"cross_add","qualname":"<Literals>::cross_add","value":"fn (&mut self, bytes: &[u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends each literal in this set with the bytes given.","sig":null,"attributes":[{"value":"/ Extends each literal in this set with the bytes given.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":408531,"byte_end":408589,"line_start":414,"line_end":414,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":408594,"byte_end":408597,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ If the set is empty, then the given literal is added to the set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":408602,"byte_end":408670,"line_start":416,"line_end":416,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":408675,"byte_end":408678,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ If adding any number of bytes to all members of this set causes a limit","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":408683,"byte_end":408758,"line_start":418,"line_end":418,"column_start":5,"column_end":80}},{"value":"/ to be exceeded, then no bytes are added and false is returned. If a","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":408763,"byte_end":408834,"line_start":419,"line_end":419,"column_start":5,"column_end":76}},{"value":"/ prefix of `bytes` can be fit into this set, then it is used and all","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":408839,"byte_end":408910,"line_start":420,"line_end":420,"column_start":5,"column_end":76}},{"value":"/ resulting literals are cut.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":408915,"byte_end":408946,"line_start":421,"line_end":421,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":561},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":410214,"byte_end":410217,"line_start":459,"line_end":459,"column_start":12,"column_end":15},"name":"add","qualname":"<Literals>::add","value":"fn (&mut self, lit: Literal) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds the given literal to this set.","sig":null,"attributes":[{"value":"/ Adds the given literal to this set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":410065,"byte_end":410104,"line_start":455,"line_end":455,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":410109,"byte_end":410112,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Returns false if adding this literal would cause the class to be too","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":410117,"byte_end":410189,"line_start":457,"line_end":457,"column_start":5,"column_end":77}},{"value":"/ big.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":410194,"byte_end":410202,"line_start":458,"line_end":458,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":410555,"byte_end":410569,"line_start":470,"line_end":470,"column_start":12,"column_end":26},"name":"add_char_class","qualname":"<Literals>::add_char_class","value":"fn (&mut self, cls: &hir::ClassUnicode) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends each literal in this set with the character class given.","sig":null,"attributes":[{"value":"/ Extends each literal in this set with the character class given.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":410402,"byte_end":410470,"line_start":467,"line_end":467,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":410475,"byte_end":410478,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ Returns false if the character class was too big to add.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":410483,"byte_end":410543,"line_start":469,"line_end":469,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":411997,"byte_end":412011,"line_start":515,"line_end":515,"column_start":12,"column_end":26},"name":"add_byte_class","qualname":"<Literals>::add_byte_class","value":"fn (&mut self, cls: &hir::ClassBytes) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Extends each literal in this set with the byte class given.","sig":null,"attributes":[{"value":"/ Extends each literal in this set with the byte class given.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":411854,"byte_end":411917,"line_start":512,"line_end":512,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":411922,"byte_end":411925,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ Returns false if the byte class was too big to add.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":411930,"byte_end":411985,"line_start":514,"line_end":514,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":412707,"byte_end":412710,"line_start":537,"line_end":537,"column_start":12,"column_end":15},"name":"cut","qualname":"<Literals>::cut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Cuts every member of this set. When a member is cut, it can never\n be extended.\n","sig":null,"attributes":[{"value":"/ Cuts every member of this set. When a member is cut, it can never","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":412605,"byte_end":412674,"line_start":535,"line_end":535,"column_start":5,"column_end":74}},{"value":"/ be extended.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":412679,"byte_end":412695,"line_start":536,"line_end":536,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":412850,"byte_end":412857,"line_start":544,"line_end":544,"column_start":12,"column_end":19},"name":"reverse","qualname":"<Literals>::reverse","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reverses all members in place.\n","sig":null,"attributes":[{"value":"/ Reverses all members in place.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":412804,"byte_end":412838,"line_start":543,"line_end":543,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":413002,"byte_end":413007,"line_start":551,"line_end":551,"column_start":12,"column_end":17},"name":"clear","qualname":"<Literals>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears this set of all members.\n","sig":null,"attributes":[{"value":"/ Clears this set of all members.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":412955,"byte_end":412990,"line_start":550,"line_end":550,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":423981,"byte_end":423984,"line_start":883,"line_end":883,"column_start":12,"column_end":15},"name":"new","qualname":"<Literal>::new","value":"fn (bytes: Vec<u8>) -> Literal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new complete literal with the bytes given.\n","sig":null,"attributes":[{"value":"/ Returns a new complete literal with the bytes given.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":423913,"byte_end":423969,"line_start":882,"line_end":882,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":424119,"byte_end":424124,"line_start":888,"line_end":888,"column_start":12,"column_end":17},"name":"empty","qualname":"<Literal>::empty","value":"fn () -> Literal","parent":null,"children":[],"decl_id":null,"docs":" Returns a new complete empty literal.\n","sig":null,"attributes":[{"value":"/ Returns a new complete empty literal.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":424066,"byte_end":424107,"line_start":887,"line_end":887,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":424248,"byte_end":424254,"line_start":893,"line_end":893,"column_start":12,"column_end":18},"name":"is_cut","qualname":"<Literal>::is_cut","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this literal was \"cut.\"\n","sig":null,"attributes":[{"value":"/ Returns true if this literal was \"cut.\"","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":424193,"byte_end":424236,"line_start":892,"line_end":892,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":424334,"byte_end":424337,"line_start":898,"line_end":898,"column_start":12,"column_end":15},"name":"cut","qualname":"<Literal>::cut","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Cuts this literal.\n","sig":null,"attributes":[{"value":"/ Cuts this literal.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":424300,"byte_end":424322,"line_start":897,"line_end":897,"column_start":5,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":620},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"print","qualname":"::hir::print","value":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":626},{"krate":0,"index":629},{"krate":0,"index":2490},{"krate":0,"index":2494},{"krate":0,"index":2492},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":2496},{"krate":0,"index":2498},{"krate":0,"index":635},{"krate":0,"index":2500},{"krate":0,"index":2505},{"krate":0,"index":639},{"krate":0,"index":648}],"decl_id":null,"docs":"This module provides a regular expression printer for `Hir`.\n","sig":null,"attributes":[{"value":"!\nThis module provides a regular expression printer for `Hir`.\n*/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":450094,"byte_end":450161,"line_start":1,"line_end":3,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":2496},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451695,"byte_end":451702,"line_start":57,"line_end":57,"column_start":12,"column_end":19},"name":"Printer","qualname":"::hir::print::Printer","value":"Printer {  }","parent":null,"children":[{"krate":0,"index":2497}],"decl_id":null,"docs":" A printer for a regular expression's high-level intermediate\n representation.","sig":null,"attributes":[{"value":"/ A printer for a regular expression's high-level intermediate","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":450805,"byte_end":450869,"line_start":40,"line_end":40,"column_start":1,"column_end":65}},{"value":"/ representation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":450870,"byte_end":450889,"line_start":41,"line_end":41,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":450890,"byte_end":450893,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ A printer converts a high-level intermediate representation (HIR) to a","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":450894,"byte_end":450968,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ regular expression pattern string. This particular printer uses constant","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":450969,"byte_end":451045,"line_start":44,"line_end":44,"column_start":1,"column_end":77}},{"value":"/ stack space and heap space proportional to the size of the HIR.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451046,"byte_end":451113,"line_start":45,"line_end":45,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451114,"byte_end":451117,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ Since this printer is only using the HIR, the pattern it prints will likely","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451118,"byte_end":451197,"line_start":47,"line_end":47,"column_start":1,"column_end":80}},{"value":"/ not resemble the original pattern at all. For example, a pattern like","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451198,"byte_end":451271,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ `\\pL` will have its entire class written out.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451272,"byte_end":451321,"line_start":49,"line_end":49,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451322,"byte_end":451325,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The purpose of this printer is to provide a means to mutate an HIR and then","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451326,"byte_end":451405,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ build a regular expression from the result of that mutation. (A regex","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451406,"byte_end":451479,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/ library could provide a constructor from this HIR explicitly, but that","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451480,"byte_end":451554,"line_start":53,"line_end":53,"column_start":1,"column_end":75}},{"value":"/ creates an unnecessary public coupling between the regex library and this","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451555,"byte_end":451632,"line_start":54,"line_end":54,"column_start":1,"column_end":78}},{"value":"/ specific HIR representation.)","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451633,"byte_end":451666,"line_start":55,"line_end":55,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451779,"byte_end":451782,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<Printer>::new","value":"fn () -> Printer","parent":null,"children":[],"decl_id":null,"docs":" Create a new printer.\n","sig":null,"attributes":[{"value":"/ Create a new printer.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451742,"byte_end":451767,"line_start":62,"line_end":62,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":452129,"byte_end":452134,"line_start":71,"line_end":71,"column_start":12,"column_end":17},"name":"print","qualname":"<Printer>::print","value":"fn <W> (&mut self, hir: &Hir, wtr: W) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Print the given `Ast` to the given writer. The writer must implement\n `fmt::Write`. Typical implementations of `fmt::Write` that can be used\n here are a `fmt::Formatter` (which is available in `fmt::Display`\n implementations) or a `&mut String`.\n","sig":null,"attributes":[{"value":"/ Print the given `Ast` to the given writer. The writer must implement","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451847,"byte_end":451919,"line_start":67,"line_end":67,"column_start":5,"column_end":77}},{"value":"/ `fmt::Write`. Typical implementations of `fmt::Write` that can be used","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451924,"byte_end":451998,"line_start":68,"line_end":68,"column_start":5,"column_end":79}},{"value":"/ here are a `fmt::Formatter` (which is available in `fmt::Display`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":452003,"byte_end":452072,"line_start":69,"line_end":69,"column_start":5,"column_end":74}},{"value":"/ implementations) or a `&mut String`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":452077,"byte_end":452117,"line_start":70,"line_end":70,"column_start":5,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":654},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"translate","qualname":"::hir::translate","value":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","parent":null,"children":[{"krate":0,"index":655},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":664},{"krate":0,"index":669},{"krate":0,"index":672},{"krate":0,"index":2509},{"krate":0,"index":2514},{"krate":0,"index":2512},{"krate":0,"index":674},{"krate":0,"index":676},{"krate":0,"index":2516},{"krate":0,"index":2522},{"krate":0,"index":2520},{"krate":0,"index":685},{"krate":0,"index":2524},{"krate":0,"index":2542},{"krate":0,"index":2540},{"krate":0,"index":688},{"krate":0,"index":693},{"krate":0,"index":2544},{"krate":0,"index":2553},{"krate":0,"index":2549},{"krate":0,"index":708},{"krate":0,"index":2557},{"krate":0,"index":2568},{"krate":0,"index":2567},{"krate":0,"index":2565},{"krate":0,"index":2563},{"krate":0,"index":736},{"krate":0,"index":744},{"krate":0,"index":746}],"decl_id":null,"docs":"Defines a translator that converts an `Ast` to an `Hir`.\n","sig":null,"attributes":[{"value":"!\nDefines a translator that converts an `Ast` to an `Hir`.\n*/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":461983,"byte_end":462046,"line_start":11,"line_end":13,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":2509},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":462343,"byte_end":462360,"line_start":26,"line_end":26,"column_start":12,"column_end":29},"name":"TranslatorBuilder","qualname":"::hir::translate::TranslatorBuilder","value":"TranslatorBuilder {  }","parent":null,"children":[{"krate":0,"index":2510},{"krate":0,"index":2511}],"decl_id":null,"docs":" A builder for constructing an AST->HIR translator.\n","sig":null,"attributes":[{"value":"/ A builder for constructing an AST->HIR translator.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":462253,"byte_end":462307,"line_start":24,"line_end":24,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":462640,"byte_end":462643,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<TranslatorBuilder>::new","value":"fn () -> TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new translator builder with a default c onfiguration.\n","sig":null,"attributes":[{"value":"/ Create a new translator builder with a default c onfiguration.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":462562,"byte_end":462628,"line_start":38,"line_end":38,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":462861,"byte_end":462866,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"name":"build","qualname":"<TranslatorBuilder>::build","value":"fn (&self) -> Translator","parent":null,"children":[],"decl_id":null,"docs":" Build a translator using the current configuration.\n","sig":null,"attributes":[{"value":"/ Build a translator using the current configuration.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":462794,"byte_end":462849,"line_start":46,"line_end":46,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":463693,"byte_end":463711,"line_start":66,"line_end":66,"column_start":12,"column_end":30},"name":"allow_invalid_utf8","qualname":"<TranslatorBuilder>::allow_invalid_utf8","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" When enabled, translation will permit the construction of a regular\n expression that may match invalid UTF-8.","sig":null,"attributes":[{"value":"/ When enabled, translation will permit the construction of a regular","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":463072,"byte_end":463143,"line_start":55,"line_end":55,"column_start":5,"column_end":76}},{"value":"/ expression that may match invalid UTF-8.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":463148,"byte_end":463192,"line_start":56,"line_end":56,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":463197,"byte_end":463200,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ When disabled (the default), the translator is guaranteed to produce","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":463205,"byte_end":463277,"line_start":58,"line_end":58,"column_start":5,"column_end":77}},{"value":"/ an expression that will only ever match valid UTF-8 (otherwise, the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":463282,"byte_end":463353,"line_start":59,"line_end":59,"column_start":5,"column_end":76}},{"value":"/ translator will return an error).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":463358,"byte_end":463395,"line_start":60,"line_end":60,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":463400,"byte_end":463403,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ Note that currently, even when invalid UTF-8 is banned, the translator","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":463408,"byte_end":463482,"line_start":62,"line_end":62,"column_start":5,"column_end":79}},{"value":"/ will permit a negated ASCII word boundary (i.e., `(?-u:\\B)`) even","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":463487,"byte_end":463556,"line_start":63,"line_end":63,"column_start":5,"column_end":74}},{"value":"/ though it can actually match at invalid UTF-8 boundaries. This bug","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":463561,"byte_end":463631,"line_start":64,"line_end":64,"column_start":5,"column_end":75}},{"value":"/ will be fixed on the next semver release.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":463636,"byte_end":463681,"line_start":65,"line_end":65,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":463925,"byte_end":463941,"line_start":75,"line_end":75,"column_start":12,"column_end":28},"name":"case_insensitive","qualname":"<TranslatorBuilder>::case_insensitive","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the case insensitive flag (`i`) by default.\n","sig":null,"attributes":[{"value":"/ Enable or disable the case insensitive flag (`i`) by default.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":463848,"byte_end":463913,"line_start":74,"line_end":74,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":464171,"byte_end":464181,"line_start":81,"line_end":81,"column_start":12,"column_end":22},"name":"multi_line","qualname":"<TranslatorBuilder>::multi_line","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the multi-line matching flag (`m`) by default.\n","sig":null,"attributes":[{"value":"/ Enable or disable the multi-line matching flag (`m`) by default.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":464091,"byte_end":464159,"line_start":80,"line_end":80,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":464421,"byte_end":464441,"line_start":88,"line_end":88,"column_start":12,"column_end":32},"name":"dot_matches_new_line","qualname":"<TranslatorBuilder>::dot_matches_new_line","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"dot matches any character\" flag (`s`) by\n default.\n","sig":null,"attributes":[{"value":"/ Enable or disable the \"dot matches any character\" flag (`s`) by","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":464325,"byte_end":464392,"line_start":86,"line_end":86,"column_start":5,"column_end":72}},{"value":"/ default.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":464397,"byte_end":464409,"line_start":87,"line_end":87,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":464691,"byte_end":464701,"line_start":97,"line_end":97,"column_start":12,"column_end":22},"name":"swap_greed","qualname":"<TranslatorBuilder>::swap_greed","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"swap greed\" flag (`U`) by default.\n","sig":null,"attributes":[{"value":"/ Enable or disable the \"swap greed\" flag (`U`) by default.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":464618,"byte_end":464679,"line_start":96,"line_end":96,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":464913,"byte_end":464920,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"unicode","qualname":"<TranslatorBuilder>::unicode","value":"fn (&mut self, yes: bool) -> &mut TranslatorBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the Unicode flag (`u`) by default.\n","sig":null,"attributes":[{"value":"/ Enable or disable the Unicode flag (`u`) by default.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":464845,"byte_end":464901,"line_start":102,"line_end":102,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2516},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465418,"byte_end":465428,"line_start":118,"line_end":118,"column_start":12,"column_end":22},"name":"Translator","qualname":"::hir::translate::Translator","value":"Translator {  }","parent":null,"children":[{"krate":0,"index":2517},{"krate":0,"index":2518},{"krate":0,"index":2519}],"decl_id":null,"docs":" A translator maps abstract syntax to a high level intermediate\n representation.","sig":null,"attributes":[{"value":"/ A translator maps abstract syntax to a high level intermediate","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465060,"byte_end":465126,"line_start":109,"line_end":109,"column_start":1,"column_end":67}},{"value":"/ representation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465127,"byte_end":465146,"line_start":110,"line_end":110,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465147,"byte_end":465150,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ A translator may be benefit from reuse. That is, a translator can translate","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465151,"byte_end":465230,"line_start":112,"line_end":112,"column_start":1,"column_end":80}},{"value":"/ many abstract syntax trees.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465231,"byte_end":465262,"line_start":113,"line_end":113,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465263,"byte_end":465266,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ A `Translator` can be configured in more detail via a","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465267,"byte_end":465324,"line_start":115,"line_end":115,"column_start":1,"column_end":58}},{"value":"/ [`TranslatorBuilder`](struct.TranslatorBuilder.html).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465325,"byte_end":465382,"line_start":116,"line_end":116,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465770,"byte_end":465773,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"new","qualname":"<Translator>::new","value":"fn () -> Translator","parent":null,"children":[],"decl_id":null,"docs":" Create a new translator using the default configuration.\n","sig":null,"attributes":[{"value":"/ Create a new translator using the default configuration.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465698,"byte_end":465758,"line_start":128,"line_end":128,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":466300,"byte_end":466309,"line_start":142,"line_end":142,"column_start":12,"column_end":21},"name":"translate","qualname":"<Translator>::translate","value":"fn (&mut self, pattern: &str, ast: &Ast) -> Result<Hir>","parent":null,"children":[],"decl_id":null,"docs":" Translate the given abstract syntax tree (AST) into a high level\n intermediate representation (HIR).","sig":null,"attributes":[{"value":"/ Translate the given abstract syntax tree (AST) into a high level","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465844,"byte_end":465912,"line_start":133,"line_end":133,"column_start":5,"column_end":73}},{"value":"/ intermediate representation (HIR).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465917,"byte_end":465955,"line_start":134,"line_end":134,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465960,"byte_end":465963,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ If there was a problem doing the translation, then an HIR-specific","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465968,"byte_end":466038,"line_start":136,"line_end":136,"column_start":5,"column_end":75}},{"value":"/ error is returned.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":466043,"byte_end":466065,"line_start":137,"line_end":137,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":466070,"byte_end":466073,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ The original pattern string used to produce the `Ast` *must* also be","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":466078,"byte_end":466150,"line_start":139,"line_end":139,"column_start":5,"column_end":77}},{"value":"/ provided. The translator does not use the pattern string during any","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":466155,"byte_end":466226,"line_start":140,"line_end":140,"column_start":5,"column_end":76}},{"value":"/ correct translation, but is used for error reporting.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":466231,"byte_end":466288,"line_start":141,"line_end":141,"column_start":5,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":768},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552766,"byte_end":552773,"line_start":23,"line_end":23,"column_start":11,"column_end":18},"name":"Visitor","qualname":"::hir::visitor::Visitor","value":"Visitor","parent":null,"children":[{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775}],"decl_id":null,"docs":" A trait for visiting the high-level IR (HIR) in depth first order.","sig":null,"attributes":[{"value":"/ A trait for visiting the high-level IR (HIR) in depth first order.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552166,"byte_end":552236,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552237,"byte_end":552240,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The principle aim of this trait is to enable callers to perform case","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552241,"byte_end":552313,"line_start":15,"line_end":15,"column_start":1,"column_end":73}},{"value":"/ analysis on a high-level intermediate representation of a regular","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552314,"byte_end":552383,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ expression without necessarily using recursion. In particular, this permits","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552384,"byte_end":552463,"line_start":17,"line_end":17,"column_start":1,"column_end":80}},{"value":"/ callers to do case analysis with constant stack usage, which can be","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552464,"byte_end":552535,"line_start":18,"line_end":18,"column_start":1,"column_end":72}},{"value":"/ important since the size of an HIR may be proportional to end user input.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552536,"byte_end":552613,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552614,"byte_end":552617,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Typical usage of this trait involves providing an implementation and then","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552618,"byte_end":552695,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ running it using the [`visit`](fn.visit.html) function.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552696,"byte_end":552755,"line_start":22,"line_end":22,"column_start":1,"column_end":60}}]},{"kind":"Type","id":{"krate":0,"index":769},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552824,"byte_end":552830,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::hir::visitor::Visitor::Output","value":"type Output;","parent":{"krate":0,"index":768},"children":[],"decl_id":null,"docs":" The result of visiting an HIR.\n","sig":null,"attributes":[{"value":"/ The result of visiting an HIR.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552780,"byte_end":552814,"line_start":24,"line_end":24,"column_start":5,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":770},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552893,"byte_end":552896,"line_start":27,"line_end":27,"column_start":10,"column_end":13},"name":"Err","qualname":"::hir::visitor::Visitor::Err","value":"type Err;","parent":{"krate":0,"index":768},"children":[],"decl_id":null,"docs":" An error that visiting an HIR might return.\n","sig":null,"attributes":[{"value":"/ An error that visiting an HIR might return.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552836,"byte_end":552883,"line_start":26,"line_end":26,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553041,"byte_end":553047,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"finish","qualname":"::hir::visitor::Visitor::finish","value":"fn (self) -> Result<Self::Output, Self::Err>","parent":{"krate":0,"index":768},"children":[],"decl_id":null,"docs":" All implementors of `Visitor` must provide a `finish` method, which\n yields the result of visiting the HIR or an error.\n","sig":null,"attributes":[{"value":"/ All implementors of `Visitor` must provide a `finish` method, which","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552903,"byte_end":552974,"line_start":29,"line_end":29,"column_start":5,"column_end":76}},{"value":"/ yields the result of visiting the HIR or an error.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":552979,"byte_end":553033,"line_start":30,"line_end":30,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553167,"byte_end":553172,"line_start":34,"line_end":34,"column_start":8,"column_end":13},"name":"start","qualname":"::hir::visitor::Visitor::start","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":768},"children":[],"decl_id":null,"docs":" This method is called before beginning traversal of the HIR.\n","sig":null,"attributes":[{"value":"/ This method is called before beginning traversal of the HIR.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553095,"byte_end":553159,"line_start":33,"line_end":33,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":773},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553287,"byte_end":553296,"line_start":38,"line_end":38,"column_start":8,"column_end":17},"name":"visit_pre","qualname":"::hir::visitor::Visitor::visit_pre","value":"fn (&mut self, _hir: &Hir) -> Result<(), Self::Err>","parent":{"krate":0,"index":768},"children":[],"decl_id":null,"docs":" This method is called on an `Hir` before descending into child `Hir`\n nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on an `Hir` before descending into child `Hir`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553192,"byte_end":553264,"line_start":36,"line_end":36,"column_start":5,"column_end":77}},{"value":"/ nodes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553269,"byte_end":553279,"line_start":37,"line_end":37,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553473,"byte_end":553483,"line_start":44,"line_end":44,"column_start":8,"column_end":18},"name":"visit_post","qualname":"::hir::visitor::Visitor::visit_post","value":"fn (&mut self, _hir: &Hir) -> Result<(), Self::Err>","parent":{"krate":0,"index":768},"children":[],"decl_id":null,"docs":" This method is called on an `Hir` after descending all of its child\n `Hir` nodes.\n","sig":null,"attributes":[{"value":"/ This method is called on an `Hir` after descending all of its child","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553373,"byte_end":553444,"line_start":42,"line_end":42,"column_start":5,"column_end":76}},{"value":"/ `Hir` nodes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553449,"byte_end":553465,"line_start":43,"line_end":43,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":775},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553632,"byte_end":553652,"line_start":49,"line_end":49,"column_start":8,"column_end":28},"name":"visit_alternation_in","qualname":"::hir::visitor::Visitor::visit_alternation_in","value":"fn (&mut self) -> Result<(), Self::Err>","parent":{"krate":0,"index":768},"children":[],"decl_id":null,"docs":" This method is called between child nodes of an alternation.\n","sig":null,"attributes":[{"value":"/ This method is called between child nodes of an alternation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553560,"byte_end":553624,"line_start":48,"line_end":48,"column_start":5,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":776},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":554462,"byte_end":554467,"line_start":69,"line_end":69,"column_start":8,"column_end":13},"name":"visit","qualname":"::hir::visitor::visit","value":"fn <V> (hir: &Hir, visitor: V) -> Result<V::Output, V::Err>","parent":null,"children":[],"decl_id":null,"docs":" Executes an implementation of `Visitor` in constant stack space.","sig":null,"attributes":[{"value":"/ Executes an implementation of `Visitor` in constant stack space.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553715,"byte_end":553783,"line_start":54,"line_end":54,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553784,"byte_end":553787,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This function will visit every node in the given `Hir` while calling","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553788,"byte_end":553860,"line_start":56,"line_end":56,"column_start":1,"column_end":73}},{"value":"/ appropriate methods provided by the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553861,"byte_end":553900,"line_start":57,"line_end":57,"column_start":1,"column_end":40}},{"value":"/ [`Visitor`](trait.Visitor.html) trait.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553901,"byte_end":553943,"line_start":58,"line_end":58,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553944,"byte_end":553947,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ The primary use case for this method is when one wants to perform case","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":553948,"byte_end":554022,"line_start":60,"line_end":60,"column_start":1,"column_end":75}},{"value":"/ analysis over an `Hir` without using a stack size proportional to the depth","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":554023,"byte_end":554102,"line_start":61,"line_end":61,"column_start":1,"column_end":80}},{"value":"/ of the `Hir`. Namely, this method will instead use constant stack space,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":554103,"byte_end":554179,"line_start":62,"line_end":62,"column_start":1,"column_end":77}},{"value":"/ but will use heap space proportional to the size of the `Hir`. This may be","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":554180,"byte_end":554258,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/ desirable in cases where the size of `Hir` is proportional to end user","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":554259,"byte_end":554333,"line_start":64,"line_end":64,"column_start":1,"column_end":75}},{"value":"/ input.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":554334,"byte_end":554344,"line_start":65,"line_end":65,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":554345,"byte_end":554348,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ If the visitor returns an error at any point, then visiting is stopped and","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":554349,"byte_end":554427,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ the error is returned.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":554428,"byte_end":554454,"line_start":68,"line_end":68,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":2570},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":302758,"byte_end":302763,"line_start":34,"line_end":34,"column_start":12,"column_end":17},"name":"Error","qualname":"::hir::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":2571},{"krate":0,"index":2572},{"krate":0,"index":2573}],"decl_id":null,"docs":" An error that can occur while translating an `Ast` to a `Hir`.\n","sig":null,"attributes":[{"value":"/ An error that can occur while translating an `Ast` to a `Hir`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":302641,"byte_end":302707,"line_start":32,"line_end":32,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":806},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303133,"byte_end":303137,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"fn (&self) -> &ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the type of this error.\n","sig":null,"attributes":[{"value":"/ Return the type of this error.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303087,"byte_end":303121,"line_start":45,"line_end":45,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303351,"byte_end":303358,"line_start":53,"line_end":53,"column_start":12,"column_end":19},"name":"pattern","qualname":"<Error>::pattern","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" The original pattern string in which this error occurred.","sig":null,"attributes":[{"value":"/ The original pattern string in which this error occurred.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303191,"byte_end":303252,"line_start":50,"line_end":50,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303257,"byte_end":303260,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Every span reported by this error is reported in terms of this string.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303265,"byte_end":303339,"line_start":52,"line_end":52,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303470,"byte_end":303474,"line_start":58,"line_end":58,"column_start":12,"column_end":16},"name":"span","qualname":"<Error>::span","value":"fn (&self) -> &Span","parent":null,"children":[],"decl_id":null,"docs":" Return the span at which this error occurred.\n","sig":null,"attributes":[{"value":"/ Return the span at which this error occurred.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303409,"byte_end":303458,"line_start":57,"line_end":57,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2586},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303798,"byte_end":303815,"line_start":68,"line_end":68,"column_start":5,"column_end":22},"name":"UnicodeNotAllowed","qualname":"::hir::ErrorKind::UnicodeNotAllowed","value":"ErrorKind::UnicodeNotAllowed","parent":{"krate":0,"index":2585},"children":[],"decl_id":null,"docs":" This error occurs when a Unicode feature is used when Unicode\n support is disabled. For example `(?-u:\\pL)` would trigger this error.\n","sig":null,"attributes":[{"value":"/ This error occurs when a Unicode feature is used when Unicode","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303649,"byte_end":303714,"line_start":66,"line_end":66,"column_start":5,"column_end":70}},{"value":"/ support is disabled. For example `(?-u:\\pL)` would trigger this error.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303719,"byte_end":303793,"line_start":67,"line_end":67,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2588},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303971,"byte_end":303982,"line_start":71,"line_end":71,"column_start":5,"column_end":16},"name":"InvalidUtf8","qualname":"::hir::ErrorKind::InvalidUtf8","value":"ErrorKind::InvalidUtf8","parent":{"krate":0,"index":2585},"children":[],"decl_id":null,"docs":" This error occurs when translating a pattern that could match a byte\n sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.\n","sig":null,"attributes":[{"value":"/ This error occurs when translating a pattern that could match a byte","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303821,"byte_end":303893,"line_start":69,"line_end":69,"column_start":5,"column_end":77}},{"value":"/ sequence that isn't UTF-8 and `allow_invalid_utf8` was disabled.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303898,"byte_end":303966,"line_start":70,"line_end":70,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2590},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304079,"byte_end":304102,"line_start":74,"line_end":74,"column_start":5,"column_end":28},"name":"UnicodePropertyNotFound","qualname":"::hir::ErrorKind::UnicodePropertyNotFound","value":"ErrorKind::UnicodePropertyNotFound","parent":{"krate":0,"index":2585},"children":[],"decl_id":null,"docs":" This occurs when an unrecognized Unicode property name could not\n be found.\n","sig":null,"attributes":[{"value":"/ This occurs when an unrecognized Unicode property name could not","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303988,"byte_end":304056,"line_start":72,"line_end":72,"column_start":5,"column_end":73}},{"value":"/ be found.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304061,"byte_end":304074,"line_start":73,"line_end":73,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2592},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304200,"byte_end":304228,"line_start":77,"line_end":77,"column_start":5,"column_end":33},"name":"UnicodePropertyValueNotFound","qualname":"::hir::ErrorKind::UnicodePropertyValueNotFound","value":"ErrorKind::UnicodePropertyValueNotFound","parent":{"krate":0,"index":2585},"children":[],"decl_id":null,"docs":" This occurs when an unrecognized Unicode property value could not\n be found.\n","sig":null,"attributes":[{"value":"/ This occurs when an unrecognized Unicode property value could not","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304108,"byte_end":304177,"line_start":75,"line_end":75,"column_start":5,"column_end":74}},{"value":"/ be found.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304182,"byte_end":304195,"line_start":76,"line_end":76,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2594},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304436,"byte_end":304456,"line_start":83,"line_end":83,"column_start":5,"column_end":25},"name":"EmptyClassNotAllowed","qualname":"::hir::ErrorKind::EmptyClassNotAllowed","value":"ErrorKind::EmptyClassNotAllowed","parent":{"krate":0,"index":2585},"children":[],"decl_id":null,"docs":" This occurs when the translator attempts to construct a character class\n that is empty.","sig":null,"attributes":[{"value":"/ This occurs when the translator attempts to construct a character class","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304234,"byte_end":304309,"line_start":78,"line_end":78,"column_start":5,"column_end":80}},{"value":"/ that is empty.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304314,"byte_end":304332,"line_start":79,"line_end":79,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304337,"byte_end":304340,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ Note that this restriction in the translator may be removed in the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304345,"byte_end":304415,"line_start":81,"line_end":81,"column_start":5,"column_end":75}},{"value":"/ future.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304420,"byte_end":304431,"line_start":82,"line_end":82,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2596},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304736,"byte_end":304751,"line_start":90,"line_end":90,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::hir::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":2585},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304462,"byte_end":304516,"line_start":84,"line_end":84,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304521,"byte_end":304524,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304529,"byte_end":304599,"line_start":86,"line_end":86,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304604,"byte_end":304676,"line_start":87,"line_end":87,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304681,"byte_end":304712,"line_start":88,"line_end":88,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":2585},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303633,"byte_end":303642,"line_start":65,"line_end":65,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::hir::ErrorKind","value":"ErrorKind::{UnicodeNotAllowed, InvalidUtf8, UnicodePropertyNotFound, UnicodePropertyValueNotFound, EmptyClassNotAllowed, __Nonexhaustive}","parent":null,"children":[{"krate":0,"index":2586},{"krate":0,"index":2588},{"krate":0,"index":2590},{"krate":0,"index":2592},{"krate":0,"index":2594},{"krate":0,"index":2596}],"decl_id":null,"docs":" The type of an error that occurred while building an `Hir`.\n","sig":null,"attributes":[{"value":"/ The type of an error that occurred while building an `Hir`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303521,"byte_end":303584,"line_start":63,"line_end":63,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":2608},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":307681,"byte_end":307684,"line_start":161,"line_end":161,"column_start":12,"column_end":15},"name":"Hir","qualname":"::hir::Hir","value":"Hir {  }","parent":null,"children":[{"krate":0,"index":2609},{"krate":0,"index":2610}],"decl_id":null,"docs":" A high-level intermediate representation (HIR) for a regular expression.","sig":null,"attributes":[{"value":"/ A high-level intermediate representation (HIR) for a regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":305659,"byte_end":305735,"line_start":125,"line_end":125,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":305736,"byte_end":305739,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ The HIR of a regular expression represents an intermediate step between its","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":305740,"byte_end":305819,"line_start":127,"line_end":127,"column_start":1,"column_end":80}},{"value":"/ abstract syntax (a structured description of the concrete syntax) and","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":305820,"byte_end":305893,"line_start":128,"line_end":128,"column_start":1,"column_end":74}},{"value":"/ compiled byte codes. The purpose of HIR is to make regular expressions","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":305894,"byte_end":305968,"line_start":129,"line_end":129,"column_start":1,"column_end":75}},{"value":"/ easier to analyze. In particular, the AST is much more complex than the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":305969,"byte_end":306044,"line_start":130,"line_end":130,"column_start":1,"column_end":76}},{"value":"/ HIR. For example, while an AST supports arbitrarily nested character","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306045,"byte_end":306117,"line_start":131,"line_end":131,"column_start":1,"column_end":73}},{"value":"/ classes, the HIR will flatten all nested classes into a single set. The HIR","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306118,"byte_end":306197,"line_start":132,"line_end":132,"column_start":1,"column_end":80}},{"value":"/ will also \"compile away\" every flag present in the concrete syntax. For","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306198,"byte_end":306273,"line_start":133,"line_end":133,"column_start":1,"column_end":76}},{"value":"/ example, users of HIR expressions never need to worry about case folding;","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306274,"byte_end":306351,"line_start":134,"line_end":134,"column_start":1,"column_end":78}},{"value":"/ it is handled automatically by the translator (e.g., by translating `(?i)A`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306352,"byte_end":306431,"line_start":135,"line_end":135,"column_start":1,"column_end":80}},{"value":"/ to `[aA]`).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306432,"byte_end":306447,"line_start":136,"line_end":136,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306448,"byte_end":306451,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ If the HIR was produced by a translator that disallows invalid UTF-8, then","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306452,"byte_end":306530,"line_start":138,"line_end":138,"column_start":1,"column_end":79}},{"value":"/ the HIR is guaranteed to match UTF-8 exclusively.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306531,"byte_end":306584,"line_start":139,"line_end":139,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306585,"byte_end":306588,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ This type defines its own destructor that uses constant stack space and","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306589,"byte_end":306664,"line_start":141,"line_end":141,"column_start":1,"column_end":76}},{"value":"/ heap space proportional to the size of the HIR.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306665,"byte_end":306716,"line_start":142,"line_end":142,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306717,"byte_end":306720,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ The specific type of an HIR expression can be accessed via its `kind`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306721,"byte_end":306794,"line_start":144,"line_end":144,"column_start":1,"column_end":74}},{"value":"/ or `into_kind` methods. This extra level of indirection exists for two","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306795,"byte_end":306869,"line_start":145,"line_end":145,"column_start":1,"column_end":75}},{"value":"/ reasons:","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306870,"byte_end":306882,"line_start":146,"line_end":146,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306883,"byte_end":306886,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ 1. Construction of an HIR expression *must* use the constructor methods","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306887,"byte_end":306962,"line_start":148,"line_end":148,"column_start":1,"column_end":76}},{"value":"/    on this `Hir` type instead of building the `HirKind` values directly.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":306963,"byte_end":307039,"line_start":149,"line_end":149,"column_start":1,"column_end":77}},{"value":"/    This permits construction to enforce invariants like \"concatenations","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":307040,"byte_end":307115,"line_start":150,"line_end":150,"column_start":1,"column_end":76}},{"value":"/    always consist of two or more sub-expressions.\"","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":307116,"byte_end":307170,"line_start":151,"line_end":151,"column_start":1,"column_end":55}},{"value":"/ 2. Every HIR expression contains attributes that are defined inductively,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":307171,"byte_end":307248,"line_start":152,"line_end":152,"column_start":1,"column_end":78}},{"value":"/    and can be computed cheaply during the construction process. For","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":307249,"byte_end":307320,"line_start":153,"line_end":153,"column_start":1,"column_end":72}},{"value":"/    example, one such attribute is whether the expression must match at the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":307321,"byte_end":307399,"line_start":154,"line_end":154,"column_start":1,"column_end":79}},{"value":"/    beginning of the text.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":307400,"byte_end":307429,"line_start":155,"line_end":155,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":307430,"byte_end":307433,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ Also, an `Hir`'s `fmt::Display` implementation prints an HIR as a regular","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":307434,"byte_end":307511,"line_start":157,"line_end":157,"column_start":1,"column_end":78}},{"value":"/ expression pattern string, and uses constant stack space and heap space","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":307512,"byte_end":307587,"line_start":158,"line_end":158,"column_start":1,"column_end":76}},{"value":"/ proportional to the size of the `Hir`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":307588,"byte_end":307630,"line_start":159,"line_end":159,"column_start":1,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2623},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308038,"byte_end":308043,"line_start":173,"line_end":173,"column_start":5,"column_end":10},"name":"Empty","qualname":"::hir::HirKind::Empty","value":"HirKind::Empty","parent":{"krate":0,"index":2622},"children":[],"decl_id":null,"docs":" The empty regular expression, which matches everything, including the\n empty string.\n","sig":null,"attributes":[{"value":"/ The empty regular expression, which matches everything, including the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":307938,"byte_end":308011,"line_start":171,"line_end":171,"column_start":5,"column_end":78}},{"value":"/ empty string.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308016,"byte_end":308033,"line_start":172,"line_end":172,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2625},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308121,"byte_end":308128,"line_start":175,"line_end":175,"column_start":5,"column_end":12},"name":"Literal","qualname":"::hir::HirKind::Literal","value":"HirKind::Literal(Literal)","parent":{"krate":0,"index":2622},"children":[],"decl_id":null,"docs":" A single literal character that matches exactly this character.\n","sig":null,"attributes":[{"value":"/ A single literal character that matches exactly this character.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308049,"byte_end":308116,"line_start":174,"line_end":174,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2628},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308329,"byte_end":308334,"line_start":179,"line_end":179,"column_start":5,"column_end":10},"name":"Class","qualname":"::hir::HirKind::Class","value":"HirKind::Class(Class)","parent":{"krate":0,"index":2622},"children":[],"decl_id":null,"docs":" A single character class that matches any of the characters in the\n class. A class can either consist of Unicode scalar values as\n characters, or it can use bytes.\n","sig":null,"attributes":[{"value":"/ A single character class that matches any of the characters in the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308143,"byte_end":308213,"line_start":176,"line_end":176,"column_start":5,"column_end":75}},{"value":"/ class. A class can either consist of Unicode scalar values as","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308218,"byte_end":308283,"line_start":177,"line_end":177,"column_start":5,"column_end":70}},{"value":"/ characters, or it can use bytes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308288,"byte_end":308324,"line_start":178,"line_end":178,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2631},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308426,"byte_end":308432,"line_start":181,"line_end":181,"column_start":5,"column_end":11},"name":"Anchor","qualname":"::hir::HirKind::Anchor","value":"HirKind::Anchor(Anchor)","parent":{"krate":0,"index":2622},"children":[],"decl_id":null,"docs":" An anchor assertion. An anchor assertion match always has zero length.\n","sig":null,"attributes":[{"value":"/ An anchor assertion. An anchor assertion match always has zero length.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308347,"byte_end":308421,"line_start":180,"line_end":180,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2634},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308584,"byte_end":308596,"line_start":184,"line_end":184,"column_start":5,"column_end":17},"name":"WordBoundary","qualname":"::hir::HirKind::WordBoundary","value":"HirKind::WordBoundary(WordBoundary)","parent":{"krate":0,"index":2622},"children":[],"decl_id":null,"docs":" A word boundary assertion, which may or may not be Unicode aware. A\n word boundary assertion match always has zero length.\n","sig":null,"attributes":[{"value":"/ A word boundary assertion, which may or may not be Unicode aware. A","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308446,"byte_end":308517,"line_start":182,"line_end":182,"column_start":5,"column_end":76}},{"value":"/ word boundary assertion match always has zero length.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308522,"byte_end":308579,"line_start":183,"line_end":183,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2637},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308678,"byte_end":308688,"line_start":186,"line_end":186,"column_start":5,"column_end":15},"name":"Repetition","qualname":"::hir::HirKind::Repetition","value":"HirKind::Repetition(Repetition)","parent":{"krate":0,"index":2622},"children":[],"decl_id":null,"docs":" A repetition operation applied to a child expression.\n","sig":null,"attributes":[{"value":"/ A repetition operation applied to a child expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308616,"byte_end":308673,"line_start":185,"line_end":185,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2640},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308777,"byte_end":308782,"line_start":188,"line_end":188,"column_start":5,"column_end":10},"name":"Group","qualname":"::hir::HirKind::Group","value":"HirKind::Group(Group)","parent":{"krate":0,"index":2622},"children":[],"decl_id":null,"docs":" A possibly capturing group, which contains a child expression.\n","sig":null,"attributes":[{"value":"/ A possibly capturing group, which contains a child expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308706,"byte_end":308772,"line_start":187,"line_end":187,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2643},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309016,"byte_end":309022,"line_start":194,"line_end":194,"column_start":5,"column_end":11},"name":"Concat","qualname":"::hir::HirKind::Concat","value":"HirKind::Concat(Vec<Hir>)","parent":{"krate":0,"index":2622},"children":[],"decl_id":null,"docs":" A concatenation of expressions. A concatenation always has at least two\n child expressions.","sig":null,"attributes":[{"value":"/ A concatenation of expressions. A concatenation always has at least two","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308795,"byte_end":308870,"line_start":189,"line_end":189,"column_start":5,"column_end":80}},{"value":"/ child expressions.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308875,"byte_end":308897,"line_start":190,"line_end":190,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308902,"byte_end":308905,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ A concatenation matches only if each of its child expression matches","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308910,"byte_end":308982,"line_start":192,"line_end":192,"column_start":5,"column_end":77}},{"value":"/ one after the other.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":308987,"byte_end":309011,"line_start":193,"line_end":193,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2646},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309307,"byte_end":309318,"line_start":200,"line_end":200,"column_start":5,"column_end":16},"name":"Alternation","qualname":"::hir::HirKind::Alternation","value":"HirKind::Alternation(Vec<Hir>)","parent":{"krate":0,"index":2622},"children":[],"decl_id":null,"docs":" An alternation of expressions. An alternation always has at least two\n child expressions.","sig":null,"attributes":[{"value":"/ An alternation of expressions. An alternation always has at least two","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309038,"byte_end":309111,"line_start":195,"line_end":195,"column_start":5,"column_end":78}},{"value":"/ child expressions.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309116,"byte_end":309138,"line_start":196,"line_end":196,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309143,"byte_end":309146,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ An alternation matches only if at least one of its child expression","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309151,"byte_end":309222,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/ matches. If multiple expressions match, then the leftmost is preferred.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309227,"byte_end":309302,"line_start":199,"line_end":199,"column_start":5,"column_end":80}}]},{"kind":"Enum","id":{"krate":0,"index":2622},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":307924,"byte_end":307931,"line_start":170,"line_end":170,"column_start":10,"column_end":17},"name":"HirKind","qualname":"::hir::HirKind","value":"HirKind::{Empty, Literal, Class, Anchor, WordBoundary, Repetition, Group, Concat, Alternation}","parent":null,"children":[{"krate":0,"index":2623},{"krate":0,"index":2625},{"krate":0,"index":2628},{"krate":0,"index":2631},{"krate":0,"index":2634},{"krate":0,"index":2637},{"krate":0,"index":2640},{"krate":0,"index":2643},{"krate":0,"index":2646}],"decl_id":null,"docs":" The kind of an arbitrary `Hir` expression.\n","sig":null,"attributes":[{"value":"/ The kind of an arbitrary `Hir` expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":307829,"byte_end":307875,"line_start":168,"line_end":168,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309411,"byte_end":309415,"line_start":205,"line_end":205,"column_start":12,"column_end":16},"name":"kind","qualname":"<Hir>::kind","value":"fn (&self) -> &HirKind","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying HIR kind.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying HIR kind.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309348,"byte_end":309399,"line_start":204,"line_end":204,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":820},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309570,"byte_end":309579,"line_start":211,"line_end":211,"column_start":12,"column_end":21},"name":"into_kind","qualname":"<Hir>::into_kind","value":"fn (mut self) -> HirKind","parent":null,"children":[],"decl_id":null,"docs":" Consumes ownership of this HIR expression and returns its underlying\n `HirKind`.\n","sig":null,"attributes":[{"value":"/ Consumes ownership of this HIR expression and returns its underlying","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309467,"byte_end":309539,"line_start":209,"line_end":209,"column_start":5,"column_end":77}},{"value":"/ `HirKind`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309544,"byte_end":309558,"line_start":210,"line_end":210,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309821,"byte_end":309826,"line_start":219,"line_end":219,"column_start":12,"column_end":17},"name":"empty","qualname":"<Hir>::empty","value":"fn () -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty HIR expression.","sig":null,"attributes":[{"value":"/ Returns an empty HIR expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309689,"byte_end":309725,"line_start":216,"line_end":216,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309730,"byte_end":309733,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ An empty HIR expression always matches, including the empty string.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309738,"byte_end":309809,"line_start":218,"line_end":218,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":310514,"byte_end":310521,"line_start":239,"line_end":239,"column_start":12,"column_end":19},"name":"literal","qualname":"<Hir>::literal","value":"fn (lit: Literal) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a literal HIR expression.","sig":null,"attributes":[{"value":"/ Creates a literal HIR expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":310245,"byte_end":310282,"line_start":234,"line_end":234,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":310287,"byte_end":310290,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ If the given literal has a `Byte` variant with an ASCII byte, then this","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":310295,"byte_end":310370,"line_start":236,"line_end":236,"column_start":5,"column_end":80}},{"value":"/ method panics. This enforces the invariant that `Byte` variants are","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":310375,"byte_end":310446,"line_start":237,"line_end":237,"column_start":5,"column_end":76}},{"value":"/ only used to express matching of invalid UTF-8.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":310451,"byte_end":310502,"line_start":238,"line_end":238,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":311102,"byte_end":311107,"line_start":259,"line_end":259,"column_start":12,"column_end":17},"name":"class","qualname":"<Hir>::class","value":"fn (class: Class) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a class HIR expression.\n","sig":null,"attributes":[{"value":"/ Creates a class HIR expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":311055,"byte_end":311090,"line_start":258,"line_end":258,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":311624,"byte_end":311630,"line_start":275,"line_end":275,"column_start":12,"column_end":18},"name":"anchor","qualname":"<Hir>::anchor","value":"fn (anchor: Anchor) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates an anchor assertion HIR expression.\n","sig":null,"attributes":[{"value":"/ Creates an anchor assertion HIR expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":311565,"byte_end":311612,"line_start":274,"line_end":274,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":312419,"byte_end":312432,"line_start":299,"line_end":299,"column_start":12,"column_end":25},"name":"word_boundary","qualname":"<Hir>::word_boundary","value":"fn (word_boundary: WordBoundary) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a word boundary assertion HIR expression.\n","sig":null,"attributes":[{"value":"/ Creates a word boundary assertion HIR expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":312354,"byte_end":312407,"line_start":298,"line_end":298,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":313259,"byte_end":313269,"line_start":321,"line_end":321,"column_start":12,"column_end":22},"name":"repetition","qualname":"<Hir>::repetition","value":"fn (rep: Repetition) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a repetition HIR expression.\n","sig":null,"attributes":[{"value":"/ Creates a repetition HIR expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":313207,"byte_end":313247,"line_start":320,"line_end":320,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":314131,"byte_end":314136,"line_start":343,"line_end":343,"column_start":12,"column_end":17},"name":"group","qualname":"<Hir>::group","value":"fn (group: Group) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Creates a group HIR expression.\n","sig":null,"attributes":[{"value":"/ Creates a group HIR expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":314084,"byte_end":314119,"line_start":342,"line_end":342,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":314874,"byte_end":314880,"line_start":361,"line_end":361,"column_start":12,"column_end":18},"name":"concat","qualname":"<Hir>::concat","value":"fn (mut exprs: Vec<Hir>) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Returns the concatenation of the given expressions.","sig":null,"attributes":[{"value":"/ Returns the concatenation of the given expressions.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":314743,"byte_end":314798,"line_start":358,"line_end":358,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":314803,"byte_end":314806,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ This flattens the concatenation as appropriate.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":314811,"byte_end":314862,"line_start":360,"line_end":360,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":317864,"byte_end":317875,"line_start":432,"line_end":432,"column_start":12,"column_end":23},"name":"alternation","qualname":"<Hir>::alternation","value":"fn (mut exprs: Vec<Hir>) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Returns the alternation of the given expressions.","sig":null,"attributes":[{"value":"/ Returns the alternation of the given expressions.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":317737,"byte_end":317790,"line_start":429,"line_end":429,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":317795,"byte_end":317798,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ This flattens the alternation as appropriate.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":317803,"byte_end":317852,"line_start":431,"line_end":431,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":835},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":320004,"byte_end":320007,"line_start":489,"line_end":489,"column_start":12,"column_end":15},"name":"dot","qualname":"<Hir>::dot","value":"fn (bytes: bool) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Build an HIR expression for `.`.","sig":null,"attributes":[{"value":"/ Build an HIR expression for `.`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":319674,"byte_end":319710,"line_start":481,"line_end":481,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":319715,"byte_end":319718,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ A `.` expression matches any character except for `\\n`. To build an","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":319723,"byte_end":319794,"line_start":483,"line_end":483,"column_start":5,"column_end":76}},{"value":"/ expression that matches any character, including `\\n`, use the `any`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":319799,"byte_end":319871,"line_start":484,"line_end":484,"column_start":5,"column_end":77}},{"value":"/ method.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":319876,"byte_end":319887,"line_start":485,"line_end":485,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":319892,"byte_end":319895,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ If `bytes` is `true`, then this assumes characters are limited to a","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":319900,"byte_end":319971,"line_start":487,"line_end":487,"column_start":5,"column_end":76}},{"value":"/ single byte.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":319976,"byte_end":319992,"line_start":488,"line_end":488,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":320862,"byte_end":320865,"line_start":511,"line_end":511,"column_start":12,"column_end":15},"name":"any","qualname":"<Hir>::any","value":"fn (bytes: bool) -> Hir","parent":null,"children":[],"decl_id":null,"docs":" Build an HIR expression for `(?s).`.","sig":null,"attributes":[{"value":"/ Build an HIR expression for `(?s).`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":320519,"byte_end":320559,"line_start":503,"line_end":503,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":320564,"byte_end":320567,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ A `(?s).` expression matches any character, including `\\n`. To build an","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":320572,"byte_end":320647,"line_start":505,"line_end":505,"column_start":5,"column_end":80}},{"value":"/ expression that matches any character except for `\\n`, then use the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":320652,"byte_end":320723,"line_start":506,"line_end":506,"column_start":5,"column_end":76}},{"value":"/ `dot` method.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":320728,"byte_end":320745,"line_start":507,"line_end":507,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":320750,"byte_end":320753,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ If `bytes` is `true`, then this assumes characters are limited to a","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":320758,"byte_end":320829,"line_start":509,"line_end":509,"column_start":5,"column_end":76}},{"value":"/ single byte.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":320834,"byte_end":320850,"line_start":510,"line_end":510,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":837},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":321452,"byte_end":321466,"line_start":527,"line_end":527,"column_start":12,"column_end":26},"name":"is_always_utf8","qualname":"<Hir>::is_always_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR will always match valid UTF-8.","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR will always match valid UTF-8.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":321253,"byte_end":321323,"line_start":523,"line_end":523,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":321328,"byte_end":321331,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ When this returns false, then it is possible for this HIR expression","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":321336,"byte_end":321408,"line_start":525,"line_end":525,"column_start":5,"column_end":77}},{"value":"/ to match invalid UTF-8.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":321413,"byte_end":321440,"line_start":526,"line_end":526,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":321749,"byte_end":321766,"line_start":536,"line_end":536,"column_start":12,"column_end":29},"name":"is_all_assertions","qualname":"<Hir>::is_all_assertions","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this entire HIR expression is made up of\n zero-width assertions.","sig":null,"attributes":[{"value":"/ Returns true if and only if this entire HIR expression is made up of","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":321530,"byte_end":321602,"line_start":531,"line_end":531,"column_start":5,"column_end":77}},{"value":"/ zero-width assertions.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":321607,"byte_end":321633,"line_start":532,"line_end":532,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":321638,"byte_end":321641,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ This includes expressions like `^$\\b\\A\\z` and even `((\\b)+())*^`, but","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":321646,"byte_end":321719,"line_start":534,"line_end":534,"column_start":5,"column_end":78}},{"value":"/ not `^a`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":321724,"byte_end":321737,"line_start":535,"line_end":535,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":322034,"byte_end":322051,"line_start":543,"line_end":543,"column_start":12,"column_end":29},"name":"is_anchored_start","qualname":"<Hir>::is_anchored_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is required to match from the\n beginning of text. This includes expressions like `^foo`, `^(foo|bar)`,\n `^foo|^bar` but not `^foo|bar`.\n","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR is required to match from the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":321833,"byte_end":321902,"line_start":540,"line_end":540,"column_start":5,"column_end":74}},{"value":"/ beginning of text. This includes expressions like `^foo`, `^(foo|bar)`,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":321907,"byte_end":321982,"line_start":541,"line_end":541,"column_start":5,"column_end":80}},{"value":"/ `^foo|^bar` but not `^foo|bar`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":321987,"byte_end":322022,"line_start":542,"line_end":542,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":322311,"byte_end":322326,"line_start":550,"line_end":550,"column_start":12,"column_end":27},"name":"is_anchored_end","qualname":"<Hir>::is_anchored_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is required to match at the end\n of text. This includes expressions like `foo$`, `(foo|bar)$`,\n `foo$|bar$` but not `foo$|bar`.\n","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR is required to match at the end","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":322118,"byte_end":322189,"line_start":547,"line_end":547,"column_start":5,"column_end":76}},{"value":"/ of text. This includes expressions like `foo$`, `(foo|bar)$`,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":322194,"byte_end":322259,"line_start":548,"line_end":548,"column_start":5,"column_end":70}},{"value":"/ `foo$|bar$` but not `foo$|bar`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":322264,"byte_end":322299,"line_start":549,"line_end":549,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":841},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":322679,"byte_end":322700,"line_start":558,"line_end":558,"column_start":12,"column_end":33},"name":"is_any_anchored_start","qualname":"<Hir>::is_any_anchored_start","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR contains any sub-expression that\n is required to match at the beginning of text. Specifically, this\n returns true if the `^` symbol (when multiline mode is disabled) or the\n `\\A` escape appear anywhere in the regex.\n","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR contains any sub-expression that","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":322391,"byte_end":322463,"line_start":554,"line_end":554,"column_start":5,"column_end":77}},{"value":"/ is required to match at the beginning of text. Specifically, this","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":322468,"byte_end":322537,"line_start":555,"line_end":555,"column_start":5,"column_end":74}},{"value":"/ returns true if the `^` symbol (when multiline mode is disabled) or the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":322542,"byte_end":322617,"line_start":556,"line_end":556,"column_start":5,"column_end":80}},{"value":"/ `\\A` escape appear anywhere in the regex.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":322622,"byte_end":322667,"line_start":557,"line_end":557,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323053,"byte_end":323072,"line_start":566,"line_end":566,"column_start":12,"column_end":31},"name":"is_any_anchored_end","qualname":"<Hir>::is_any_anchored_end","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR contains any sub-expression that is\n required to match at the end of text. Specifically, this returns true\n if the `$` symbol (when multiline mode is disabled) or the `\\z` escape\n appear anywhere in the regex.\n","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR contains any sub-expression that is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":322771,"byte_end":322846,"line_start":562,"line_end":562,"column_start":5,"column_end":80}},{"value":"/ required to match at the end of text. Specifically, this returns true","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":322851,"byte_end":322924,"line_start":563,"line_end":563,"column_start":5,"column_end":78}},{"value":"/ if the `$` symbol (when multiline mode is disabled) or the `\\z` escape","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":322929,"byte_end":323003,"line_start":564,"line_end":564,"column_start":5,"column_end":79}},{"value":"/ appear anywhere in the regex.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323008,"byte_end":323041,"line_start":565,"line_end":565,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":843},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323388,"byte_end":323402,"line_start":575,"line_end":575,"column_start":12,"column_end":26},"name":"is_match_empty","qualname":"<Hir>::is_match_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if the empty string is part of the language\n matched by this regular expression.","sig":null,"attributes":[{"value":"/ Return true if and only if the empty string is part of the language","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323141,"byte_end":323212,"line_start":570,"line_end":570,"column_start":5,"column_end":76}},{"value":"/ matched by this regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323217,"byte_end":323256,"line_start":571,"line_end":571,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323261,"byte_end":323264,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ This includes `a*`, `a?b*`, `a{0}`, `()`, `()+`, `^$`, `a|b?`, `\\B`,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323269,"byte_end":323341,"line_start":573,"line_end":573,"column_start":5,"column_end":77}},{"value":"/ but not `a`, `a+` or `\\b`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323346,"byte_end":323376,"line_start":574,"line_end":574,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":845},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323796,"byte_end":323804,"line_start":586,"line_end":586,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HirKind>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return true if and only if this HIR is the empty regular expression.","sig":null,"attributes":[{"value":"/ Return true if and only if this HIR is the empty regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323483,"byte_end":323555,"line_start":581,"line_end":581,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323560,"byte_end":323563,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ Note that this is not defined inductively. That is, it only tests if","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323568,"byte_end":323640,"line_start":583,"line_end":583,"column_start":5,"column_end":77}},{"value":"/ this kind is the `Empty` variant. To get the inductive definition,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323645,"byte_end":323715,"line_start":584,"line_end":584,"column_start":5,"column_end":75}},{"value":"/ use the `is_match_empty` method on [`Hir`](struct.Hir.html).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323720,"byte_end":323784,"line_start":585,"line_end":585,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":324037,"byte_end":324049,"line_start":595,"line_end":595,"column_start":12,"column_end":24},"name":"has_subexprs","qualname":"<HirKind>::has_subexprs","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this kind has any (including possibly\n empty) subexpressions.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this kind has any (including possibly","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323925,"byte_end":323994,"line_start":593,"line_end":593,"column_start":5,"column_end":74}},{"value":"/ empty) subexpressions.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323999,"byte_end":324025,"line_start":594,"line_end":594,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2661},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325309,"byte_end":325316,"line_start":632,"line_end":632,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::hir::Literal::Unicode","value":"Literal::Unicode(char)","parent":{"krate":0,"index":2660},"children":[],"decl_id":null,"docs":" A single character represented by a Unicode scalar value.\n","sig":null,"attributes":[{"value":"/ A single character represented by a Unicode scalar value.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325243,"byte_end":325304,"line_start":631,"line_end":631,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2664},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325389,"byte_end":325393,"line_start":634,"line_end":634,"column_start":5,"column_end":9},"name":"Byte","qualname":"::hir::Literal::Byte","value":"Literal::Byte(u8)","parent":{"krate":0,"index":2660},"children":[],"decl_id":null,"docs":" A single character represented by an arbitrary byte.\n","sig":null,"attributes":[{"value":"/ A single character represented by an arbitrary byte.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325328,"byte_end":325384,"line_start":633,"line_end":633,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":2660},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325229,"byte_end":325236,"line_start":630,"line_end":630,"column_start":10,"column_end":17},"name":"Literal","qualname":"::hir::Literal","value":"Literal::{Unicode, Byte}","parent":null,"children":[{"krate":0,"index":2661},{"krate":0,"index":2664}],"decl_id":null,"docs":" The high-level intermediate representation of a literal.","sig":null,"attributes":[{"value":"/ The high-level intermediate representation of a literal.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":324830,"byte_end":324890,"line_start":623,"line_end":623,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":324891,"byte_end":324894,"line_start":624,"line_end":624,"column_start":1,"column_end":4}},{"value":"/ A literal corresponds to a single character, where a character is either","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":324895,"byte_end":324971,"line_start":625,"line_end":625,"column_start":1,"column_end":77}},{"value":"/ defined by a Unicode scalar value or an arbitrary byte. Unicode characters","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":324972,"byte_end":325050,"line_start":626,"line_end":626,"column_start":1,"column_end":79}},{"value":"/ are preferred whenever possible. In particular, a `Byte` variant is only","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325051,"byte_end":325127,"line_start":627,"line_end":627,"column_start":1,"column_end":77}},{"value":"/ ever produced when it could match invalid UTF-8.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325128,"byte_end":325180,"line_start":628,"line_end":628,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325524,"byte_end":325534,"line_start":640,"line_end":640,"column_start":12,"column_end":22},"name":"is_unicode","qualname":"<Literal>::is_unicode","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this literal corresponds to a Unicode\n scalar value.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this literal corresponds to a Unicode","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325421,"byte_end":325490,"line_start":638,"line_end":638,"column_start":5,"column_end":74}},{"value":"/ scalar value.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325495,"byte_end":325512,"line_start":639,"line_end":639,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2679},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326740,"byte_end":326747,"line_start":668,"line_end":668,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::hir::Class::Unicode","value":"Class::Unicode(ClassUnicode)","parent":{"krate":0,"index":2678},"children":[],"decl_id":null,"docs":" A set of characters represented by Unicode scalar values.\n","sig":null,"attributes":[{"value":"/ A set of characters represented by Unicode scalar values.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326674,"byte_end":326735,"line_start":667,"line_end":667,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2682},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326860,"byte_end":326865,"line_start":671,"line_end":671,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::hir::Class::Bytes","value":"Class::Bytes(ClassBytes)","parent":{"krate":0,"index":2678},"children":[],"decl_id":null,"docs":" A set of characters represented by arbitrary bytes (one byte per\n character).\n","sig":null,"attributes":[{"value":"/ A set of characters represented by arbitrary bytes (one byte per","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326767,"byte_end":326835,"line_start":669,"line_end":669,"column_start":5,"column_end":73}},{"value":"/ character).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326840,"byte_end":326855,"line_start":670,"line_end":670,"column_start":5,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":2678},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326662,"byte_end":326667,"line_start":666,"line_end":666,"column_start":10,"column_end":15},"name":"Class","qualname":"::hir::Class","value":"Class::{Unicode, Bytes}","parent":null,"children":[{"krate":0,"index":2679},{"krate":0,"index":2682}],"decl_id":null,"docs":" The high-level intermediate representation of a character class.","sig":null,"attributes":[{"value":"/ The high-level intermediate representation of a character class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325724,"byte_end":325792,"line_start":649,"line_end":649,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325793,"byte_end":325796,"line_start":650,"line_end":650,"column_start":1,"column_end":4}},{"value":"/ A character class corresponds to a set of characters. A character is either","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325797,"byte_end":325876,"line_start":651,"line_end":651,"column_start":1,"column_end":80}},{"value":"/ defined by a Unicode scalar value or a byte. Unicode characters are used","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325877,"byte_end":325953,"line_start":652,"line_end":652,"column_start":1,"column_end":77}},{"value":"/ by default, while bytes are used when Unicode mode (via the `u` flag) is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325954,"byte_end":326030,"line_start":653,"line_end":653,"column_start":1,"column_end":77}},{"value":"/ disabled.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326031,"byte_end":326044,"line_start":654,"line_end":654,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326045,"byte_end":326048,"line_start":655,"line_end":655,"column_start":1,"column_end":4}},{"value":"/ A character class, regardless of its character type, is represented by a","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326049,"byte_end":326125,"line_start":656,"line_end":656,"column_start":1,"column_end":77}},{"value":"/ sequence of non-overlapping non-adjacent ranges of characters.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326126,"byte_end":326192,"line_start":657,"line_end":657,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326193,"byte_end":326196,"line_start":658,"line_end":658,"column_start":1,"column_end":4}},{"value":"/ Note that unlike [`Literal`](enum.Literal.html), a `Bytes` variant may","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326197,"byte_end":326271,"line_start":659,"line_end":659,"column_start":1,"column_end":75}},{"value":"/ be produced even when it exclusively matches valid UTF-8. This is because","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326272,"byte_end":326349,"line_start":660,"line_end":660,"column_start":1,"column_end":78}},{"value":"/ a `Bytes` variant represents an intention by the author of the regular","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326350,"byte_end":326424,"line_start":661,"line_end":661,"column_start":1,"column_end":75}},{"value":"/ expression to disable Unicode mode, which in turn impacts the semantics of","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326425,"byte_end":326503,"line_start":662,"line_end":662,"column_start":1,"column_end":79}},{"value":"/ case insensitive matching. For example, `(?i)k` and `(?i-u)k` will not","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326504,"byte_end":326578,"line_start":663,"line_end":663,"column_start":1,"column_end":75}},{"value":"/ match the same set of strings.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326579,"byte_end":326613,"line_start":664,"line_end":664,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327221,"byte_end":327237,"line_start":681,"line_end":681,"column_start":12,"column_end":28},"name":"case_fold_simple","qualname":"<Class>::case_fold_simple","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Apply Unicode simple case folding to this character class, in place.\n The character class will be expanded to include all simple case folded\n character variants.","sig":null,"attributes":[{"value":"/ Apply Unicode simple case folding to this character class, in place.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326899,"byte_end":326971,"line_start":675,"line_end":675,"column_start":5,"column_end":77}},{"value":"/ The character class will be expanded to include all simple case folded","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326976,"byte_end":327050,"line_start":676,"line_end":676,"column_start":5,"column_end":79}},{"value":"/ character variants.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327055,"byte_end":327078,"line_start":677,"line_end":677,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327083,"byte_end":327086,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ If this is a byte oriented character class, then this will be limited","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327091,"byte_end":327164,"line_start":679,"line_end":679,"column_start":5,"column_end":78}},{"value":"/ to the ASCII ranges `A-Z` and `a-z`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327169,"byte_end":327209,"line_start":680,"line_end":680,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":854},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327610,"byte_end":327616,"line_start":692,"line_end":692,"column_start":12,"column_end":18},"name":"negate","qualname":"<Class>::negate","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Negate this character class in place.","sig":null,"attributes":[{"value":"/ Negate this character class in place.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327418,"byte_end":327459,"line_start":688,"line_end":688,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327464,"byte_end":327467,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ After completion, this character class will contain precisely the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327472,"byte_end":327541,"line_start":690,"line_end":690,"column_start":5,"column_end":74}},{"value":"/ characters that weren't previously in the class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327546,"byte_end":327598,"line_start":691,"line_end":691,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":855},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":328321,"byte_end":328335,"line_start":710,"line_end":710,"column_start":12,"column_end":26},"name":"is_always_utf8","qualname":"<Class>::is_always_utf8","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this character class will only ever match\n valid UTF-8.","sig":null,"attributes":[{"value":"/ Returns true if and only if this character class will only ever match","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327777,"byte_end":327850,"line_start":699,"line_end":699,"column_start":5,"column_end":78}},{"value":"/ valid UTF-8.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327855,"byte_end":327871,"line_start":700,"line_end":700,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327876,"byte_end":327879,"line_start":701,"line_end":701,"column_start":5,"column_end":8}},{"value":"/ A character class can match invalid UTF-8 only when the following","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327884,"byte_end":327953,"line_start":702,"line_end":702,"column_start":5,"column_end":74}},{"value":"/ conditions are met:","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327958,"byte_end":327981,"line_start":703,"line_end":703,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327986,"byte_end":327989,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ 1. The translator was configured to permit generating an expression","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":327994,"byte_end":328065,"line_start":705,"line_end":705,"column_start":5,"column_end":76}},{"value":"/    that can match invalid UTF-8. (By default, this is disabled.)","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":328070,"byte_end":328138,"line_start":706,"line_end":706,"column_start":5,"column_end":73}},{"value":"/ 2. Unicode mode (via the `u` flag) was disabled either in the concrete","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":328143,"byte_end":328217,"line_start":707,"line_end":707,"column_start":5,"column_end":79}},{"value":"/    syntax or in the parser builder. By default, Unicode mode is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":328222,"byte_end":328289,"line_start":708,"line_end":708,"column_start":5,"column_end":72}},{"value":"/    enabled.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":328294,"byte_end":328309,"line_start":709,"line_end":709,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2696},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":328598,"byte_end":328610,"line_start":720,"line_end":720,"column_start":12,"column_end":24},"name":"ClassUnicode","qualname":"::hir::ClassUnicode","value":"ClassUnicode {  }","parent":null,"children":[{"krate":0,"index":2697}],"decl_id":null,"docs":" A set of characters represented by Unicode scalar values.\n","sig":null,"attributes":[{"value":"/ A set of characters represented by Unicode scalar values.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":328486,"byte_end":328547,"line_start":718,"line_end":718,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":328848,"byte_end":328851,"line_start":729,"line_end":729,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassUnicode>::new","value":"fn <I> (ranges: I) -> ClassUnicode","parent":null,"children":[],"decl_id":null,"docs":" Create a new class from a sequence of ranges.","sig":null,"attributes":[{"value":"/ Create a new class from a sequence of ranges.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":328681,"byte_end":328730,"line_start":725,"line_end":725,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":328735,"byte_end":328738,"line_start":726,"line_end":726,"column_start":5,"column_end":8}},{"value":"/ The given ranges do not need to be in any specific order, and ranges","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":328743,"byte_end":328815,"line_start":727,"line_end":727,"column_start":5,"column_end":77}},{"value":"/ may overlap.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":328820,"byte_end":328836,"line_start":728,"line_end":728,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329054,"byte_end":329059,"line_start":736,"line_end":736,"column_start":12,"column_end":17},"name":"empty","qualname":"<ClassUnicode>::empty","value":"fn () -> ClassUnicode","parent":null,"children":[],"decl_id":null,"docs":" Create a new class with no ranges.\n","sig":null,"attributes":[{"value":"/ Create a new class with no ranges.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329004,"byte_end":329042,"line_start":735,"line_end":735,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329169,"byte_end":329173,"line_start":741,"line_end":741,"column_start":12,"column_end":16},"name":"push","qualname":"<ClassUnicode>::push","value":"fn (&mut self, range: ClassUnicodeRange) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a new range to this set.\n","sig":null,"attributes":[{"value":"/ Add a new range to this set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329125,"byte_end":329157,"line_start":740,"line_end":740,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329382,"byte_end":329386,"line_start":748,"line_end":748,"column_start":12,"column_end":16},"name":"iter","qualname":"<ClassUnicode>::iter","value":"fn (&self) -> ClassUnicodeIter","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all ranges in this class.","sig":null,"attributes":[{"value":"/ Return an iterator over all ranges in this class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329254,"byte_end":329307,"line_start":745,"line_end":745,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329312,"byte_end":329315,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ The iterator yields ranges in ascending order.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329320,"byte_end":329370,"line_start":747,"line_end":747,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329525,"byte_end":329531,"line_start":753,"line_end":753,"column_start":12,"column_end":18},"name":"ranges","qualname":"<ClassUnicode>::ranges","value":"fn (&self) -> &[ClassUnicodeRange]","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying ranges as a slice.\n","sig":null,"attributes":[{"value":"/ Return the underlying ranges as a slice.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329469,"byte_end":329513,"line_start":752,"line_end":752,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329915,"byte_end":329931,"line_start":761,"line_end":761,"column_start":12,"column_end":28},"name":"case_fold_simple","qualname":"<ClassUnicode>::case_fold_simple","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expand this character class such that it contains all case folded\n characters, according to Unicode's \"simple\" mapping. For example, if\n this class consists of the range `a-z`, then applying case folding will\n result in the class containing both the ranges `a-z` and `A-Z`.\n","sig":null,"attributes":[{"value":"/ Expand this character class such that it contains all case folded","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329605,"byte_end":329674,"line_start":757,"line_end":757,"column_start":5,"column_end":74}},{"value":"/ characters, according to Unicode's \"simple\" mapping. For example, if","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329679,"byte_end":329751,"line_start":758,"line_end":758,"column_start":5,"column_end":77}},{"value":"/ this class consists of the range `a-z`, then applying case folding will","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329756,"byte_end":329831,"line_start":759,"line_end":759,"column_start":5,"column_end":80}},{"value":"/ result in the class containing both the ranges `a-z` and `A-Z`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329836,"byte_end":329903,"line_start":760,"line_end":760,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330182,"byte_end":330188,"line_start":769,"line_end":769,"column_start":12,"column_end":18},"name":"negate","qualname":"<ClassUnicode>::negate","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Negate this character class.","sig":null,"attributes":[{"value":"/ Negate this character class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":329993,"byte_end":330025,"line_start":765,"line_end":765,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330030,"byte_end":330033,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ For all `c` where `c` is a Unicode scalar value, if `c` was in this","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330038,"byte_end":330109,"line_start":767,"line_end":767,"column_start":5,"column_end":76}},{"value":"/ set, then it will not be in this set after negation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330114,"byte_end":330170,"line_start":768,"line_end":768,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330324,"byte_end":330329,"line_start":774,"line_end":774,"column_start":12,"column_end":17},"name":"union","qualname":"<ClassUnicode>::union","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Union this character class with the given character class, in place.\n","sig":null,"attributes":[{"value":"/ Union this character class with the given character class, in place.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330240,"byte_end":330312,"line_start":773,"line_end":773,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330508,"byte_end":330517,"line_start":780,"line_end":780,"column_start":12,"column_end":21},"name":"intersect","qualname":"<ClassUnicode>::intersect","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Intersect this character class with the given character class, in\n place.\n","sig":null,"attributes":[{"value":"/ Intersect this character class with the given character class, in","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330412,"byte_end":330481,"line_start":778,"line_end":778,"column_start":5,"column_end":74}},{"value":"/ place.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330486,"byte_end":330496,"line_start":779,"line_end":779,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330691,"byte_end":330701,"line_start":785,"line_end":785,"column_start":12,"column_end":22},"name":"difference","qualname":"<ClassUnicode>::difference","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Subtract the given character class from this character class, in place.\n","sig":null,"attributes":[{"value":"/ Subtract the given character class from this character class, in place.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330604,"byte_end":330679,"line_start":784,"line_end":784,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":331270,"byte_end":331290,"line_start":797,"line_end":797,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<ClassUnicode>::symmetric_difference","value":"fn (&mut self, other: &ClassUnicode) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the symmetric difference of the given character classes, in\n place.","sig":null,"attributes":[{"value":"/ Compute the symmetric difference of the given character classes, in","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330789,"byte_end":330860,"line_start":789,"line_end":789,"column_start":5,"column_end":76}},{"value":"/ place.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330865,"byte_end":330875,"line_start":790,"line_end":790,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330880,"byte_end":330883,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ This computes the symmetric difference of two character classes. This","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330888,"byte_end":330961,"line_start":792,"line_end":792,"column_start":5,"column_end":78}},{"value":"/ removes all elements in this class that are also in the given class,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":330966,"byte_end":331038,"line_start":793,"line_end":793,"column_start":5,"column_end":77}},{"value":"/ but all adds all elements from the given class that aren't in this","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":331043,"byte_end":331113,"line_start":794,"line_end":794,"column_start":5,"column_end":75}},{"value":"/ class. That is, the class will contain all elements in either class,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":331118,"byte_end":331190,"line_start":795,"line_end":795,"column_start":5,"column_end":77}},{"value":"/ but will not contain any elements that are in both classes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":331195,"byte_end":331258,"line_start":796,"line_end":796,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2709},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":331550,"byte_end":331566,"line_start":806,"line_end":806,"column_start":12,"column_end":28},"name":"ClassUnicodeIter","qualname":"::hir::ClassUnicodeIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all ranges in a Unicode character class.","sig":null,"attributes":[{"value":"/ An iterator over all ranges in a Unicode character class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":331386,"byte_end":331447,"line_start":802,"line_end":802,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":331448,"byte_end":331451,"line_start":803,"line_end":803,"column_start":1,"column_end":4}},{"value":"/ The lifetime `'a` refers to the lifetime of the underlying class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":331452,"byte_end":331521,"line_start":804,"line_end":804,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":2716},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":332033,"byte_end":332050,"line_start":821,"line_end":821,"column_start":12,"column_end":29},"name":"ClassUnicodeRange","qualname":"::hir::ClassUnicodeRange","value":"ClassUnicodeRange {  }","parent":null,"children":[{"krate":0,"index":2717},{"krate":0,"index":2718}],"decl_id":null,"docs":" A single range of characters represented by Unicode scalar values.","sig":null,"attributes":[{"value":"/ A single range of characters represented by Unicode scalar values.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":331787,"byte_end":331857,"line_start":816,"line_end":816,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":331858,"byte_end":331861,"line_start":817,"line_end":817,"column_start":1,"column_end":4}},{"value":"/ The range is closed. That is, the start and end of the range are included","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":331862,"byte_end":331939,"line_start":818,"line_end":818,"column_start":1,"column_end":78}},{"value":"/ in the range.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":331940,"byte_end":331957,"line_start":819,"line_end":819,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334369,"byte_end":334372,"line_start":889,"line_end":889,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassUnicodeRange>::new","value":"fn (start: char, end: char) -> ClassUnicodeRange","parent":null,"children":[],"decl_id":null,"docs":" Create a new Unicode scalar value range for a character class.","sig":null,"attributes":[{"value":"/ Create a new Unicode scalar value range for a character class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334137,"byte_end":334203,"line_start":885,"line_end":885,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334208,"byte_end":334211,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ The returned range is always in a canonical form. That is, the range","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334216,"byte_end":334288,"line_start":887,"line_end":887,"column_start":5,"column_end":77}},{"value":"/ returned always satisfies the invariant that `start <= end`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334293,"byte_end":334357,"line_start":888,"line_end":888,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334623,"byte_end":334628,"line_start":897,"line_end":897,"column_start":12,"column_end":17},"name":"start","qualname":"<ClassUnicodeRange>::start","value":"fn (&self) -> char","parent":null,"children":[],"decl_id":null,"docs":" Return the start of this range.","sig":null,"attributes":[{"value":"/ Return the start of this range.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334477,"byte_end":334512,"line_start":893,"line_end":893,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334517,"byte_end":334520,"line_start":894,"line_end":894,"column_start":5,"column_end":8}},{"value":"/ The start of a range is always less than or equal to the end of the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334525,"byte_end":334596,"line_start":895,"line_end":895,"column_start":5,"column_end":76}},{"value":"/ range.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334601,"byte_end":334611,"line_start":896,"line_end":896,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334823,"byte_end":334826,"line_start":905,"line_end":905,"column_start":12,"column_end":15},"name":"end","qualname":"<ClassUnicodeRange>::end","value":"fn (&self) -> char","parent":null,"children":[],"decl_id":null,"docs":" Return the end of this range.","sig":null,"attributes":[{"value":"/ Return the end of this range.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334676,"byte_end":334709,"line_start":901,"line_end":901,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334714,"byte_end":334717,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ The end of a range is always greater than or equal to the start of the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334722,"byte_end":334796,"line_start":903,"line_end":903,"column_start":5,"column_end":79}},{"value":"/ range.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334801,"byte_end":334811,"line_start":904,"line_end":904,"column_start":5,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":2743},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335026,"byte_end":335036,"line_start":913,"line_end":913,"column_start":12,"column_end":22},"name":"ClassBytes","qualname":"::hir::ClassBytes","value":"ClassBytes {  }","parent":null,"children":[{"krate":0,"index":2744}],"decl_id":null,"docs":" A set of characters represented by arbitrary bytes (where one byte\n corresponds to one character).\n","sig":null,"attributes":[{"value":"/ A set of characters represented by arbitrary bytes (where one byte","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334870,"byte_end":334940,"line_start":910,"line_end":910,"column_start":1,"column_end":71}},{"value":"/ corresponds to one character).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334941,"byte_end":334975,"line_start":911,"line_end":911,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335270,"byte_end":335273,"line_start":922,"line_end":922,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassBytes>::new","value":"fn <I> (ranges: I) -> ClassBytes","parent":null,"children":[],"decl_id":null,"docs":" Create a new class from a sequence of ranges.","sig":null,"attributes":[{"value":"/ Create a new class from a sequence of ranges.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335103,"byte_end":335152,"line_start":918,"line_end":918,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335157,"byte_end":335160,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ The given ranges do not need to be in any specific order, and ranges","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335165,"byte_end":335237,"line_start":920,"line_end":920,"column_start":5,"column_end":77}},{"value":"/ may overlap.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335242,"byte_end":335258,"line_start":921,"line_end":921,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335470,"byte_end":335475,"line_start":929,"line_end":929,"column_start":12,"column_end":17},"name":"empty","qualname":"<ClassBytes>::empty","value":"fn () -> ClassBytes","parent":null,"children":[],"decl_id":null,"docs":" Create a new class with no ranges.\n","sig":null,"attributes":[{"value":"/ Create a new class with no ranges.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335420,"byte_end":335458,"line_start":928,"line_end":928,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335581,"byte_end":335585,"line_start":934,"line_end":934,"column_start":12,"column_end":16},"name":"push","qualname":"<ClassBytes>::push","value":"fn (&mut self, range: ClassBytesRange) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a new range to this set.\n","sig":null,"attributes":[{"value":"/ Add a new range to this set.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335537,"byte_end":335569,"line_start":933,"line_end":933,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335792,"byte_end":335796,"line_start":941,"line_end":941,"column_start":12,"column_end":16},"name":"iter","qualname":"<ClassBytes>::iter","value":"fn (&self) -> ClassBytesIter","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over all ranges in this class.","sig":null,"attributes":[{"value":"/ Return an iterator over all ranges in this class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335664,"byte_end":335717,"line_start":938,"line_end":938,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335722,"byte_end":335725,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ The iterator yields ranges in ascending order.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335730,"byte_end":335780,"line_start":940,"line_end":940,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335931,"byte_end":335937,"line_start":946,"line_end":946,"column_start":12,"column_end":18},"name":"ranges","qualname":"<ClassBytes>::ranges","value":"fn (&self) -> &[ClassBytesRange]","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying ranges as a slice.\n","sig":null,"attributes":[{"value":"/ Return the underlying ranges as a slice.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335875,"byte_end":335919,"line_start":945,"line_end":945,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336402,"byte_end":336418,"line_start":957,"line_end":957,"column_start":12,"column_end":28},"name":"case_fold_simple","qualname":"<ClassBytes>::case_fold_simple","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Expand this character class such that it contains all case folded\n characters. For example, if this class consists of the range `a-z`,\n then applying case folding will result in the class containing both the\n ranges `a-z` and `A-Z`.","sig":null,"attributes":[{"value":"/ Expand this character class such that it contains all case folded","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336009,"byte_end":336078,"line_start":950,"line_end":950,"column_start":5,"column_end":74}},{"value":"/ characters. For example, if this class consists of the range `a-z`,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336083,"byte_end":336154,"line_start":951,"line_end":951,"column_start":5,"column_end":76}},{"value":"/ then applying case folding will result in the class containing both the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336159,"byte_end":336234,"line_start":952,"line_end":952,"column_start":5,"column_end":80}},{"value":"/ ranges `a-z` and `A-Z`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336239,"byte_end":336266,"line_start":953,"line_end":953,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336271,"byte_end":336274,"line_start":954,"line_end":954,"column_start":5,"column_end":8}},{"value":"/ Note that this only applies ASCII case folding, which is limited to the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336279,"byte_end":336354,"line_start":955,"line_end":955,"column_start":5,"column_end":80}},{"value":"/ characters `a-z` and `A-Z`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336359,"byte_end":336390,"line_start":956,"line_end":956,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336652,"byte_end":336658,"line_start":965,"line_end":965,"column_start":12,"column_end":18},"name":"negate","qualname":"<ClassBytes>::negate","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Negate this byte class.","sig":null,"attributes":[{"value":"/ Negate this byte class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336480,"byte_end":336507,"line_start":961,"line_end":961,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336512,"byte_end":336515,"line_start":962,"line_end":962,"column_start":5,"column_end":8}},{"value":"/ For all `b` where `b` is a any byte, if `b` was in this set, then it","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336520,"byte_end":336592,"line_start":963,"line_end":963,"column_start":5,"column_end":77}},{"value":"/ will not be in this set after negation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336597,"byte_end":336640,"line_start":964,"line_end":964,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336784,"byte_end":336789,"line_start":970,"line_end":970,"column_start":12,"column_end":17},"name":"union","qualname":"<ClassBytes>::union","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Union this byte class with the given byte class, in place.\n","sig":null,"attributes":[{"value":"/ Union this byte class with the given byte class, in place.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336710,"byte_end":336772,"line_start":969,"line_end":969,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336948,"byte_end":336957,"line_start":975,"line_end":975,"column_start":12,"column_end":21},"name":"intersect","qualname":"<ClassBytes>::intersect","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Intersect this byte class with the given byte class, in place.\n","sig":null,"attributes":[{"value":"/ Intersect this byte class with the given byte class, in place.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":336870,"byte_end":336936,"line_start":974,"line_end":974,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":337119,"byte_end":337129,"line_start":980,"line_end":980,"column_start":12,"column_end":22},"name":"difference","qualname":"<ClassBytes>::difference","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Subtract the given byte class from this byte class, in place.\n","sig":null,"attributes":[{"value":"/ Subtract the given byte class from this byte class, in place.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":337042,"byte_end":337107,"line_start":979,"line_end":979,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":337678,"byte_end":337698,"line_start":991,"line_end":991,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<ClassBytes>::symmetric_difference","value":"fn (&mut self, other: &ClassBytes) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Compute the symmetric difference of the given byte classes, in place.","sig":null,"attributes":[{"value":"/ Compute the symmetric difference of the given byte classes, in place.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":337215,"byte_end":337288,"line_start":984,"line_end":984,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":337293,"byte_end":337296,"line_start":985,"line_end":985,"column_start":5,"column_end":8}},{"value":"/ This computes the symmetric difference of two byte classes. This","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":337301,"byte_end":337369,"line_start":986,"line_end":986,"column_start":5,"column_end":73}},{"value":"/ removes all elements in this class that are also in the given class,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":337374,"byte_end":337446,"line_start":987,"line_end":987,"column_start":5,"column_end":77}},{"value":"/ but all adds all elements from the given class that aren't in this","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":337451,"byte_end":337521,"line_start":988,"line_end":988,"column_start":5,"column_end":75}},{"value":"/ class. That is, the class will contain all elements in either class,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":337526,"byte_end":337598,"line_start":989,"line_end":989,"column_start":5,"column_end":77}},{"value":"/ but will not contain any elements that are in both classes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":337603,"byte_end":337666,"line_start":990,"line_end":990,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":338013,"byte_end":338025,"line_start":998,"line_end":998,"column_start":12,"column_end":24},"name":"is_all_ascii","qualname":"<ClassBytes>::is_all_ascii","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this character class will either match\n nothing or only ASCII bytes. Stated differently, this returns false\n if and only if this class contains a non-ASCII byte.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this character class will either match","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":337794,"byte_end":337864,"line_start":995,"line_end":995,"column_start":5,"column_end":75}},{"value":"/ nothing or only ASCII bytes. Stated differently, this returns false","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":337869,"byte_end":337940,"line_start":996,"line_end":996,"column_start":5,"column_end":76}},{"value":"/ if and only if this class contains a non-ASCII byte.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":337945,"byte_end":338001,"line_start":997,"line_end":997,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2756},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":338281,"byte_end":338295,"line_start":1007,"line_end":1007,"column_start":12,"column_end":26},"name":"ClassBytesIter","qualname":"::hir::ClassBytesIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all ranges in a byte character class.","sig":null,"attributes":[{"value":"/ An iterator over all ranges in a byte character class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":338120,"byte_end":338178,"line_start":1003,"line_end":1003,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":338179,"byte_end":338182,"line_start":1004,"line_end":1004,"column_start":1,"column_end":4}},{"value":"/ The lifetime `'a` refers to the lifetime of the underlying class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":338183,"byte_end":338252,"line_start":1005,"line_end":1005,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":2763},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":338748,"byte_end":338763,"line_start":1022,"line_end":1022,"column_start":12,"column_end":27},"name":"ClassBytesRange","qualname":"::hir::ClassBytesRange","value":"ClassBytesRange {  }","parent":null,"children":[{"krate":0,"index":2764},{"krate":0,"index":2765}],"decl_id":null,"docs":" A single range of characters represented by arbitrary bytes.","sig":null,"attributes":[{"value":"/ A single range of characters represented by arbitrary bytes.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":338508,"byte_end":338572,"line_start":1017,"line_end":1017,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":338573,"byte_end":338576,"line_start":1018,"line_end":1018,"column_start":1,"column_end":4}},{"value":"/ The range is closed. That is, the start and end of the range are included","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":338577,"byte_end":338654,"line_start":1019,"line_end":1019,"column_start":1,"column_end":78}},{"value":"/ in the range.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":338655,"byte_end":338672,"line_start":1020,"line_end":1020,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340182,"byte_end":340185,"line_start":1059,"line_end":1059,"column_start":12,"column_end":15},"name":"new","qualname":"<ClassBytesRange>::new","value":"fn (start: u8, end: u8) -> ClassBytesRange","parent":null,"children":[],"decl_id":null,"docs":" Create a new byte range for a character class.","sig":null,"attributes":[{"value":"/ Create a new byte range for a character class.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":339966,"byte_end":340016,"line_start":1055,"line_end":1055,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340021,"byte_end":340024,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ The returned range is always in a canonical form. That is, the range","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340029,"byte_end":340101,"line_start":1057,"line_end":1057,"column_start":5,"column_end":77}},{"value":"/ returned always satisfies the invariant that `start <= end`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340106,"byte_end":340170,"line_start":1058,"line_end":1058,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340428,"byte_end":340433,"line_start":1067,"line_end":1067,"column_start":12,"column_end":17},"name":"start","qualname":"<ClassBytesRange>::start","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the start of this range.","sig":null,"attributes":[{"value":"/ Return the start of this range.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340282,"byte_end":340317,"line_start":1063,"line_end":1063,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340322,"byte_end":340325,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ The start of a range is always less than or equal to the end of the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340330,"byte_end":340401,"line_start":1065,"line_end":1065,"column_start":5,"column_end":76}},{"value":"/ range.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340406,"byte_end":340416,"line_start":1066,"line_end":1066,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":916},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340626,"byte_end":340629,"line_start":1075,"line_end":1075,"column_start":12,"column_end":15},"name":"end","qualname":"<ClassBytesRange>::end","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Return the end of this range.","sig":null,"attributes":[{"value":"/ Return the end of this range.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340479,"byte_end":340512,"line_start":1071,"line_end":1071,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340517,"byte_end":340520,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ The end of a range is always greater than or equal to the start of the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340525,"byte_end":340599,"line_start":1073,"line_end":1073,"column_start":5,"column_end":79}},{"value":"/ range.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340604,"byte_end":340614,"line_start":1074,"line_end":1074,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2791},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341572,"byte_end":341581,"line_start":1105,"line_end":1105,"column_start":5,"column_end":14},"name":"StartLine","qualname":"::hir::Anchor::StartLine","value":"Anchor::StartLine","parent":{"krate":0,"index":2790},"children":[],"decl_id":null,"docs":" Match the beginning of a line or the beginning of text. Specifically,\n this matches at the starting position of the input, or at the position\n immediately following a `\\n` character.\n","sig":null,"attributes":[{"value":"/ Match the beginning of a line or the beginning of text. Specifically,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341367,"byte_end":341440,"line_start":1102,"line_end":1102,"column_start":5,"column_end":78}},{"value":"/ this matches at the starting position of the input, or at the position","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341445,"byte_end":341519,"line_start":1103,"line_end":1103,"column_start":5,"column_end":79}},{"value":"/ immediately following a `\\n` character.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341524,"byte_end":341567,"line_start":1104,"line_end":1104,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2793},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341775,"byte_end":341782,"line_start":1109,"line_end":1109,"column_start":5,"column_end":12},"name":"EndLine","qualname":"::hir::Anchor::EndLine","value":"Anchor::EndLine","parent":{"krate":0,"index":2790},"children":[],"decl_id":null,"docs":" Match the end of a line or the end of text. Specifically,\n this matches at the end position of the input, or at the position\n immediately preceding a `\\n` character.\n","sig":null,"attributes":[{"value":"/ Match the end of a line or the end of text. Specifically,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341587,"byte_end":341648,"line_start":1106,"line_end":1106,"column_start":5,"column_end":66}},{"value":"/ this matches at the end position of the input, or at the position","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341653,"byte_end":341722,"line_start":1107,"line_end":1107,"column_start":5,"column_end":74}},{"value":"/ immediately preceding a `\\n` character.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341727,"byte_end":341770,"line_start":1108,"line_end":1108,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2795},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341899,"byte_end":341908,"line_start":1112,"line_end":1112,"column_start":5,"column_end":14},"name":"StartText","qualname":"::hir::Anchor::StartText","value":"Anchor::StartText","parent":{"krate":0,"index":2790},"children":[],"decl_id":null,"docs":" Match the beginning of text. Specifically, this matches at the starting\n position of the input.\n","sig":null,"attributes":[{"value":"/ Match the beginning of text. Specifically, this matches at the starting","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341788,"byte_end":341863,"line_start":1110,"line_end":1110,"column_start":5,"column_end":80}},{"value":"/ position of the input.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341868,"byte_end":341894,"line_start":1111,"line_end":1111,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2797},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342017,"byte_end":342024,"line_start":1115,"line_end":1115,"column_start":5,"column_end":12},"name":"EndText","qualname":"::hir::Anchor::EndText","value":"Anchor::EndText","parent":{"krate":0,"index":2790},"children":[],"decl_id":null,"docs":" Match the end of text. Specifically, this matches at the ending\n position of the input.\n","sig":null,"attributes":[{"value":"/ Match the end of text. Specifically, this matches at the ending","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341914,"byte_end":341981,"line_start":1113,"line_end":1113,"column_start":5,"column_end":72}},{"value":"/ position of the input.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341986,"byte_end":342012,"line_start":1114,"line_end":1114,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":2790},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341354,"byte_end":341360,"line_start":1101,"line_end":1101,"column_start":10,"column_end":16},"name":"Anchor","qualname":"::hir::Anchor","value":"Anchor::{StartLine, EndLine, StartText, EndText}","parent":null,"children":[{"krate":0,"index":2791},{"krate":0,"index":2793},{"krate":0,"index":2795},{"krate":0,"index":2797}],"decl_id":null,"docs":" The high-level intermediate representation for an anchor assertion.","sig":null,"attributes":[{"value":"/ The high-level intermediate representation for an anchor assertion.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341175,"byte_end":341246,"line_start":1097,"line_end":1097,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341247,"byte_end":341250,"line_start":1098,"line_end":1098,"column_start":1,"column_end":4}},{"value":"/ A matching anchor assertion is always zero-length.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":341251,"byte_end":341305,"line_start":1099,"line_end":1099,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2810},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342465,"byte_end":342472,"line_start":1126,"line_end":1126,"column_start":5,"column_end":12},"name":"Unicode","qualname":"::hir::WordBoundary::Unicode","value":"WordBoundary::Unicode","parent":{"krate":0,"index":2809},"children":[],"decl_id":null,"docs":" Match a Unicode-aware word boundary. That is, this matches a position\n where the left adjacent character and right adjacent character\n correspond to a word and non-word or a non-word and word character.\n","sig":null,"attributes":[{"value":"/ Match a Unicode-aware word boundary. That is, this matches a position","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342240,"byte_end":342313,"line_start":1123,"line_end":1123,"column_start":5,"column_end":78}},{"value":"/ where the left adjacent character and right adjacent character","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342318,"byte_end":342384,"line_start":1124,"line_end":1124,"column_start":5,"column_end":71}},{"value":"/ correspond to a word and non-word or a non-word and word character.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342389,"byte_end":342460,"line_start":1125,"line_end":1125,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2812},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342537,"byte_end":342550,"line_start":1128,"line_end":1128,"column_start":5,"column_end":18},"name":"UnicodeNegate","qualname":"::hir::WordBoundary::UnicodeNegate","value":"WordBoundary::UnicodeNegate","parent":{"krate":0,"index":2809},"children":[],"decl_id":null,"docs":" Match a Unicode-aware negation of a word boundary.\n","sig":null,"attributes":[{"value":"/ Match a Unicode-aware negation of a word boundary.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342478,"byte_end":342532,"line_start":1127,"line_end":1127,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2814},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342779,"byte_end":342784,"line_start":1132,"line_end":1132,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::hir::WordBoundary::Ascii","value":"WordBoundary::Ascii","parent":{"krate":0,"index":2809},"children":[],"decl_id":null,"docs":" Match an ASCII-only word boundary. That is, this matches a position\n where the left adjacent character and right adjacent character\n correspond to a word and non-word or a non-word and word character.\n","sig":null,"attributes":[{"value":"/ Match an ASCII-only word boundary. That is, this matches a position","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342556,"byte_end":342627,"line_start":1129,"line_end":1129,"column_start":5,"column_end":76}},{"value":"/ where the left adjacent character and right adjacent character","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342632,"byte_end":342698,"line_start":1130,"line_end":1130,"column_start":5,"column_end":71}},{"value":"/ correspond to a word and non-word or a non-word and word character.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342703,"byte_end":342774,"line_start":1131,"line_end":1131,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2816},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342847,"byte_end":342858,"line_start":1134,"line_end":1134,"column_start":5,"column_end":16},"name":"AsciiNegate","qualname":"::hir::WordBoundary::AsciiNegate","value":"WordBoundary::AsciiNegate","parent":{"krate":0,"index":2809},"children":[],"decl_id":null,"docs":" Match an ASCII-only negation of a word boundary.\n","sig":null,"attributes":[{"value":"/ Match an ASCII-only negation of a word boundary.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342790,"byte_end":342842,"line_start":1133,"line_end":1133,"column_start":5,"column_end":57}}]},{"kind":"Enum","id":{"krate":0,"index":2809},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342221,"byte_end":342233,"line_start":1122,"line_end":1122,"column_start":10,"column_end":22},"name":"WordBoundary","qualname":"::hir::WordBoundary","value":"WordBoundary::{Unicode, UnicodeNegate, Ascii, AsciiNegate}","parent":null,"children":[{"krate":0,"index":2810},{"krate":0,"index":2812},{"krate":0,"index":2814},{"krate":0,"index":2816}],"decl_id":null,"docs":" The high-level intermediate representation for a word-boundary assertion.","sig":null,"attributes":[{"value":"/ The high-level intermediate representation for a word-boundary assertion.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342029,"byte_end":342106,"line_start":1118,"line_end":1118,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342107,"byte_end":342110,"line_start":1119,"line_end":1119,"column_start":1,"column_end":4}},{"value":"/ A matching word boundary assertion is always zero-length.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342111,"byte_end":342172,"line_start":1120,"line_end":1120,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342971,"byte_end":342981,"line_start":1139,"line_end":1139,"column_start":12,"column_end":22},"name":"is_negated","qualname":"<WordBoundary>::is_negated","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this word boundary assertion is negated.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this word boundary assertion is negated.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342887,"byte_end":342959,"line_start":1138,"line_end":1138,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":2828},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343507,"byte_end":343512,"line_start":1155,"line_end":1155,"column_start":12,"column_end":17},"name":"Group","qualname":"::hir::Group","value":"Group { kind, hir }","parent":null,"children":[{"krate":0,"index":2829},{"krate":0,"index":2830}],"decl_id":null,"docs":" The high-level intermediate representation for a group.","sig":null,"attributes":[{"value":"/ The high-level intermediate representation for a group.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343185,"byte_end":343244,"line_start":1147,"line_end":1147,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343245,"byte_end":343248,"line_start":1148,"line_end":1148,"column_start":1,"column_end":4}},{"value":"/ This represents one of three possible group types:","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343249,"byte_end":343303,"line_start":1149,"line_end":1149,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343304,"byte_end":343307,"line_start":1150,"line_end":1150,"column_start":1,"column_end":4}},{"value":"/ 1. A non-capturing group (e.g., `(?:expr)`).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343308,"byte_end":343356,"line_start":1151,"line_end":1151,"column_start":1,"column_end":49}},{"value":"/ 2. A capturing group (e.g., `(expr)`).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343357,"byte_end":343399,"line_start":1152,"line_end":1152,"column_start":1,"column_end":43}},{"value":"/ 3. A named capturing group (e.g., `(?P<name>expr)`).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343400,"byte_end":343456,"line_start":1153,"line_end":1153,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":2829},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343686,"byte_end":343690,"line_start":1159,"line_end":1159,"column_start":9,"column_end":13},"name":"kind","qualname":"::hir::Group::kind","value":"hir::GroupKind","parent":{"krate":0,"index":2828},"children":[],"decl_id":null,"docs":" The kind of this group. If it is a capturing group, then the kind\n contains the capture group index (and the name, if it is a named\n group).\n","sig":null,"attributes":[{"value":"/ The kind of this group. If it is a capturing group, then the kind","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343519,"byte_end":343588,"line_start":1156,"line_end":1156,"column_start":5,"column_end":74}},{"value":"/ contains the capture group index (and the name, if it is a named","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343593,"byte_end":343661,"line_start":1157,"line_end":1157,"column_start":5,"column_end":73}},{"value":"/ group).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343666,"byte_end":343677,"line_start":1158,"line_end":1158,"column_start":5,"column_end":16}}]},{"kind":"Field","id":{"krate":0,"index":2830},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343782,"byte_end":343785,"line_start":1161,"line_end":1161,"column_start":9,"column_end":12},"name":"hir","qualname":"::hir::Group::hir","value":"std::boxed::Box<hir::Hir>","parent":{"krate":0,"index":2828},"children":[],"decl_id":null,"docs":" The expression inside the capturing group, which may be empty.\n","sig":null,"attributes":[{"value":"/ The expression inside the capturing group, which may be empty.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343707,"byte_end":343773,"line_start":1160,"line_end":1160,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2843},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343990,"byte_end":344002,"line_start":1170,"line_end":1170,"column_start":5,"column_end":17},"name":"CaptureIndex","qualname":"::hir::GroupKind::CaptureIndex","value":"GroupKind::CaptureIndex(u32)","parent":{"krate":0,"index":2842},"children":[],"decl_id":null,"docs":" A normal unnamed capturing group.","sig":null,"attributes":[{"value":"/ A normal unnamed capturing group.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343887,"byte_end":343924,"line_start":1167,"line_end":1167,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343929,"byte_end":343932,"line_start":1168,"line_end":1168,"column_start":5,"column_end":8}},{"value":"/ The value is the capture index of the group.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343937,"byte_end":343985,"line_start":1169,"line_end":1169,"column_start":5,"column_end":53}}]},{"kind":"StructVariant","id":{"krate":0,"index":2846},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344046,"byte_end":344057,"line_start":1172,"line_end":1172,"column_start":5,"column_end":16},"name":"CaptureName","qualname":"::hir::GroupKind::CaptureName","value":"GroupKind::CaptureName { name, index }","parent":{"krate":0,"index":2842},"children":[],"decl_id":null,"docs":" A named capturing group.\n","sig":null,"attributes":[{"value":"/ A named capturing group.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344013,"byte_end":344041,"line_start":1171,"line_end":1171,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2849},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344223,"byte_end":344235,"line_start":1179,"line_end":1179,"column_start":5,"column_end":17},"name":"NonCapturing","qualname":"::hir::GroupKind::NonCapturing","value":"GroupKind::NonCapturing","parent":{"krate":0,"index":2842},"children":[],"decl_id":null,"docs":" A non-capturing group.\n","sig":null,"attributes":[{"value":"/ A non-capturing group.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344192,"byte_end":344218,"line_start":1178,"line_end":1178,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":2842},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343871,"byte_end":343880,"line_start":1166,"line_end":1166,"column_start":10,"column_end":19},"name":"GroupKind","qualname":"::hir::GroupKind","value":"GroupKind::{CaptureIndex, CaptureName, NonCapturing}","parent":null,"children":[{"krate":0,"index":2843},{"krate":0,"index":2846},{"krate":0,"index":2849}],"decl_id":null,"docs":" The kind of group.\n","sig":null,"attributes":[{"value":"/ The kind of group.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":343800,"byte_end":343822,"line_start":1164,"line_end":1164,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":2862},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344452,"byte_end":344462,"line_start":1187,"line_end":1187,"column_start":12,"column_end":22},"name":"Repetition","qualname":"::hir::Repetition","value":"Repetition { kind, greedy, hir }","parent":null,"children":[{"krate":0,"index":2863},{"krate":0,"index":2864},{"krate":0,"index":2865}],"decl_id":null,"docs":" The high-level intermediate representation of a repetition operator.","sig":null,"attributes":[{"value":"/ The high-level intermediate representation of a repetition operator.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344240,"byte_end":344312,"line_start":1182,"line_end":1182,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344313,"byte_end":344316,"line_start":1183,"line_end":1183,"column_start":1,"column_end":4}},{"value":"/ A repetition operator permits the repetition of an arbitrary","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344317,"byte_end":344381,"line_start":1184,"line_end":1184,"column_start":1,"column_end":65}},{"value":"/ sub-expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344382,"byte_end":344401,"line_start":1185,"line_end":1185,"column_start":1,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":2863},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344519,"byte_end":344523,"line_start":1189,"line_end":1189,"column_start":9,"column_end":13},"name":"kind","qualname":"::hir::Repetition::kind","value":"hir::RepetitionKind","parent":{"krate":0,"index":2862},"children":[],"decl_id":null,"docs":" The kind of this repetition operator.\n","sig":null,"attributes":[{"value":"/ The kind of this repetition operator.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344469,"byte_end":344510,"line_start":1188,"line_end":1188,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":2864},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344962,"byte_end":344968,"line_start":1197,"line_end":1197,"column_start":9,"column_end":15},"name":"greedy","qualname":"::hir::Repetition::greedy","value":"bool","parent":{"krate":0,"index":2862},"children":[],"decl_id":null,"docs":" Whether this repetition operator is greedy or not. A greedy operator\n will match as much as it can. A non-greedy operator will match as\n little as it can.","sig":null,"attributes":[{"value":"/ Whether this repetition operator is greedy or not. A greedy operator","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344545,"byte_end":344617,"line_start":1190,"line_end":1190,"column_start":5,"column_end":77}},{"value":"/ will match as much as it can. A non-greedy operator will match as","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344622,"byte_end":344691,"line_start":1191,"line_end":1191,"column_start":5,"column_end":74}},{"value":"/ little as it can.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344696,"byte_end":344717,"line_start":1192,"line_end":1192,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344722,"byte_end":344725,"line_start":1193,"line_end":1193,"column_start":5,"column_end":8}},{"value":"/ Typically, operators are greedy by default and are only non-greedy when","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344730,"byte_end":344805,"line_start":1194,"line_end":1194,"column_start":5,"column_end":80}},{"value":"/ a `?` suffix is used, e.g., `(expr)*` is greedy while `(expr)*?` is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344810,"byte_end":344881,"line_start":1195,"line_end":1195,"column_start":5,"column_end":76}},{"value":"/ not. However, this can be inverted via the `U` \"ungreedy\" flag.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344886,"byte_end":344953,"line_start":1196,"line_end":1196,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":2865},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":345023,"byte_end":345026,"line_start":1199,"line_end":1199,"column_start":9,"column_end":12},"name":"hir","qualname":"::hir::Repetition::hir","value":"std::boxed::Box<hir::Hir>","parent":{"krate":0,"index":2862},"children":[],"decl_id":null,"docs":" The expression being repeated.\n","sig":null,"attributes":[{"value":"/ The expression being repeated.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":344980,"byte_end":345014,"line_start":1198,"line_end":1198,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":345592,"byte_end":345606,"line_start":1212,"line_end":1212,"column_start":12,"column_end":26},"name":"is_match_empty","qualname":"<Repetition>::is_match_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this repetition operator makes it possible\n to match the empty string.","sig":null,"attributes":[{"value":"/ Returns true if and only if this repetition operator makes it possible","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":345063,"byte_end":345137,"line_start":1203,"line_end":1203,"column_start":5,"column_end":79}},{"value":"/ to match the empty string.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":345142,"byte_end":345172,"line_start":1204,"line_end":1204,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":345177,"byte_end":345180,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ Note that this is not defined inductively. For example, while `a*`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":345185,"byte_end":345255,"line_start":1206,"line_end":1206,"column_start":5,"column_end":75}},{"value":"/ will report `true`, `()+` will not, even though `()` matches the empty","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":345260,"byte_end":345334,"line_start":1207,"line_end":1207,"column_start":5,"column_end":79}},{"value":"/ string and one or more occurrences of something that matches the empty","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":345339,"byte_end":345413,"line_start":1208,"line_end":1208,"column_start":5,"column_end":79}},{"value":"/ string will always match the empty string. In order to get the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":345418,"byte_end":345484,"line_start":1209,"line_end":1209,"column_start":5,"column_end":71}},{"value":"/ inductive definition, see the corresponding method on","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":345489,"byte_end":345546,"line_start":1210,"line_end":1210,"column_start":5,"column_end":62}},{"value":"/ [`Hir`](struct.Hir.html).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":345551,"byte_end":345580,"line_start":1211,"line_end":1211,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2878},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346197,"byte_end":346206,"line_start":1228,"line_end":1228,"column_start":5,"column_end":14},"name":"ZeroOrOne","qualname":"::hir::RepetitionKind::ZeroOrOne","value":"RepetitionKind::ZeroOrOne","parent":{"krate":0,"index":2877},"children":[],"decl_id":null,"docs":" Matches a sub-expression zero or one times.\n","sig":null,"attributes":[{"value":"/ Matches a sub-expression zero or one times.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346145,"byte_end":346192,"line_start":1227,"line_end":1227,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2880},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346265,"byte_end":346275,"line_start":1230,"line_end":1230,"column_start":5,"column_end":15},"name":"ZeroOrMore","qualname":"::hir::RepetitionKind::ZeroOrMore","value":"RepetitionKind::ZeroOrMore","parent":{"krate":0,"index":2877},"children":[],"decl_id":null,"docs":" Matches a sub-expression zero or more times.\n","sig":null,"attributes":[{"value":"/ Matches a sub-expression zero or more times.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346212,"byte_end":346260,"line_start":1229,"line_end":1229,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2882},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346333,"byte_end":346342,"line_start":1232,"line_end":1232,"column_start":5,"column_end":14},"name":"OneOrMore","qualname":"::hir::RepetitionKind::OneOrMore","value":"RepetitionKind::OneOrMore","parent":{"krate":0,"index":2877},"children":[],"decl_id":null,"docs":" Matches a sub-expression one or more times.\n","sig":null,"attributes":[{"value":"/ Matches a sub-expression one or more times.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346281,"byte_end":346328,"line_start":1231,"line_end":1231,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2884},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346414,"byte_end":346419,"line_start":1234,"line_end":1234,"column_start":5,"column_end":10},"name":"Range","qualname":"::hir::RepetitionKind::Range","value":"RepetitionKind::Range(RepetitionRange)","parent":{"krate":0,"index":2877},"children":[],"decl_id":null,"docs":" Matches a sub-expression within a bounded range of times.\n","sig":null,"attributes":[{"value":"/ Matches a sub-expression within a bounded range of times.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346348,"byte_end":346409,"line_start":1233,"line_end":1233,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":2877},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346124,"byte_end":346138,"line_start":1226,"line_end":1226,"column_start":10,"column_end":24},"name":"RepetitionKind","qualname":"::hir::RepetitionKind","value":"RepetitionKind::{ZeroOrOne, ZeroOrMore, OneOrMore, Range}","parent":null,"children":[{"krate":0,"index":2878},{"krate":0,"index":2880},{"krate":0,"index":2882},{"krate":0,"index":2884}],"decl_id":null,"docs":" The kind of a repetition operator.\n","sig":null,"attributes":[{"value":"/ The kind of a repetition operator.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346037,"byte_end":346075,"line_start":1224,"line_end":1224,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2899},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346616,"byte_end":346623,"line_start":1241,"line_end":1241,"column_start":5,"column_end":12},"name":"Exactly","qualname":"::hir::RepetitionRange::Exactly","value":"RepetitionRange::Exactly(u32)","parent":{"krate":0,"index":2898},"children":[],"decl_id":null,"docs":" Matches a sub-expression exactly this many times.\n","sig":null,"attributes":[{"value":"/ Matches a sub-expression exactly this many times.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346558,"byte_end":346611,"line_start":1240,"line_end":1240,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2902},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346693,"byte_end":346700,"line_start":1243,"line_end":1243,"column_start":5,"column_end":12},"name":"AtLeast","qualname":"::hir::RepetitionRange::AtLeast","value":"RepetitionRange::AtLeast(u32)","parent":{"krate":0,"index":2898},"children":[],"decl_id":null,"docs":" Matches a sub-expression at least this many times.\n","sig":null,"attributes":[{"value":"/ Matches a sub-expression at least this many times.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346634,"byte_end":346688,"line_start":1242,"line_end":1242,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2905},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346786,"byte_end":346793,"line_start":1245,"line_end":1245,"column_start":5,"column_end":12},"name":"Bounded","qualname":"::hir::RepetitionRange::Bounded","value":"RepetitionRange::Bounded(u32, u32)","parent":{"krate":0,"index":2898},"children":[],"decl_id":null,"docs":" Matches a sub-expression at least `m` times and at most `n` times.\n","sig":null,"attributes":[{"value":"/ Matches a sub-expression at least `m` times and at most `n` times.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346711,"byte_end":346781,"line_start":1244,"line_end":1244,"column_start":5,"column_end":75}}]},{"kind":"Enum","id":{"krate":0,"index":2898},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346536,"byte_end":346551,"line_start":1239,"line_end":1239,"column_start":10,"column_end":25},"name":"RepetitionRange","qualname":"::hir::RepetitionRange","value":"RepetitionRange::{Exactly, AtLeast, Bounded}","parent":null,"children":[{"krate":0,"index":2899},{"krate":0,"index":2902},{"krate":0,"index":2905}],"decl_id":null,"docs":" The kind of a counted repetition operator.\n","sig":null,"attributes":[{"value":"/ The kind of a counted repetition operator.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346441,"byte_end":346487,"line_start":1237,"line_end":1237,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2947},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560251,"byte_end":560264,"line_start":15,"line_end":15,"column_start":12,"column_end":25},"name":"ParserBuilder","qualname":"::parser::ParserBuilder","value":"ParserBuilder {  }","parent":null,"children":[{"krate":0,"index":2948},{"krate":0,"index":2949}],"decl_id":null,"docs":" A builder for a regular expression parser.","sig":null,"attributes":[{"value":"/ A builder for a regular expression parser.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":559872,"byte_end":559918,"line_start":6,"line_end":6,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":559919,"byte_end":559922,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This builder permits modifying configuration options for the parser.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":559923,"byte_end":559995,"line_start":8,"line_end":8,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":559996,"byte_end":559999,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This type combines the builder options for both the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560000,"byte_end":560055,"line_start":10,"line_end":10,"column_start":1,"column_end":56}},{"value":"/ [AST `ParserBuilder`](ast/parse/struct.ParserBuilder.html)","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560056,"byte_end":560118,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/ and the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560119,"byte_end":560130,"line_start":12,"line_end":12,"column_start":1,"column_end":12}},{"value":"/ [HIR `TranslatorBuilder`](hir/translate/struct.TranslatorBuilder.html).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560131,"byte_end":560206,"line_start":13,"line_end":13,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560448,"byte_end":560451,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<ParserBuilder>::new","value":"fn () -> ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser builder with a default configuration.\n","sig":null,"attributes":[{"value":"/ Create a new parser builder with a default configuration.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560375,"byte_end":560436,"line_start":21,"line_end":21,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560595,"byte_end":560600,"line_start":27,"line_end":27,"column_start":12,"column_end":17},"name":"build","qualname":"<ParserBuilder>::build","value":"fn (&self) -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Build a parser from this configuration with the given pattern.\n","sig":null,"attributes":[{"value":"/ Build a parser from this configuration with the given pattern.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560517,"byte_end":560583,"line_start":26,"line_end":26,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562195,"byte_end":562205,"line_start":59,"line_end":59,"column_start":12,"column_end":22},"name":"nest_limit","qualname":"<ParserBuilder>::nest_limit","value":"fn (&mut self, limit: u32) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the nesting limit for this parser.","sig":null,"attributes":[{"value":"/ Set the nesting limit for this parser.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560728,"byte_end":560770,"line_start":34,"line_end":34,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560775,"byte_end":560778,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ The nesting limit controls how deep the abstract syntax tree is allowed","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560783,"byte_end":560858,"line_start":36,"line_end":36,"column_start":5,"column_end":80}},{"value":"/ to be. If the AST exceeds the given limit (e.g., with too many nested","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560863,"byte_end":560936,"line_start":37,"line_end":37,"column_start":5,"column_end":78}},{"value":"/ groups), then an error is returned by the parser.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560941,"byte_end":560994,"line_start":38,"line_end":38,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560999,"byte_end":561002,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ The purpose of this limit is to act as a heuristic to prevent stack","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561007,"byte_end":561078,"line_start":40,"line_end":40,"column_start":5,"column_end":76}},{"value":"/ overflow for consumers that do structural induction on an `Ast` using","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561083,"byte_end":561156,"line_start":41,"line_end":41,"column_start":5,"column_end":78}},{"value":"/ explicit recursion. While this crate never does this (instead using","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561161,"byte_end":561232,"line_start":42,"line_end":42,"column_start":5,"column_end":76}},{"value":"/ constant stack space and moving the call stack to the heap), other","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561237,"byte_end":561307,"line_start":43,"line_end":43,"column_start":5,"column_end":75}},{"value":"/ crates may.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561312,"byte_end":561327,"line_start":44,"line_end":44,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561332,"byte_end":561335,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This limit is not checked until the entire Ast is parsed. Therefore,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561340,"byte_end":561412,"line_start":46,"line_end":46,"column_start":5,"column_end":77}},{"value":"/ if callers want to put a limit on the amount of heap space used, then","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561417,"byte_end":561490,"line_start":47,"line_end":47,"column_start":5,"column_end":78}},{"value":"/ they should impose a limit on the length, in bytes, of the concrete","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561495,"byte_end":561566,"line_start":48,"line_end":48,"column_start":5,"column_end":76}},{"value":"/ pattern string. In particular, this is viable since this parser","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561571,"byte_end":561638,"line_start":49,"line_end":49,"column_start":5,"column_end":72}},{"value":"/ implementation will limit itself to heap space proportional to the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561643,"byte_end":561713,"line_start":50,"line_end":50,"column_start":5,"column_end":75}},{"value":"/ lenth of the pattern string.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561718,"byte_end":561750,"line_start":51,"line_end":51,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561755,"byte_end":561758,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Note that a nest limit of `0` will return a nest limit error for most","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561763,"byte_end":561836,"line_start":53,"line_end":53,"column_start":5,"column_end":78}},{"value":"/ patterns but not all. For example, a nest limit of `0` permits `a` but","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561841,"byte_end":561915,"line_start":54,"line_end":54,"column_start":5,"column_end":79}},{"value":"/ not `ab`, since `ab` requires a concatenation, which results in a nest","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561920,"byte_end":561994,"line_start":55,"line_end":55,"column_start":5,"column_end":79}},{"value":"/ depth of `1`. In general, a nest limit is not something that manifests","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":561999,"byte_end":562073,"line_start":56,"line_end":56,"column_start":5,"column_end":79}},{"value":"/ in an obvious way in the concrete syntax, therefore, it should not be","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562078,"byte_end":562151,"line_start":57,"line_end":57,"column_start":5,"column_end":78}},{"value":"/ used in a granular way.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562156,"byte_end":562183,"line_start":58,"line_end":58,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563148,"byte_end":563153,"line_start":79,"line_end":79,"column_start":12,"column_end":17},"name":"octal","qualname":"<ParserBuilder>::octal","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to support octal syntax or not.","sig":null,"attributes":[{"value":"/ Whether to support octal syntax or not.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562313,"byte_end":562356,"line_start":64,"line_end":64,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562361,"byte_end":562364,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Octal syntax is a little-known way of uttering Unicode codepoints in","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562369,"byte_end":562441,"line_start":66,"line_end":66,"column_start":5,"column_end":77}},{"value":"/ a regular expression. For example, `a`, `\\x61`, `\\u0061` and","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562446,"byte_end":562510,"line_start":67,"line_end":67,"column_start":5,"column_end":69}},{"value":"/ `\\141` are all equivalent regular expressions, where the last example","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562515,"byte_end":562588,"line_start":68,"line_end":68,"column_start":5,"column_end":78}},{"value":"/ shows octal syntax.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562593,"byte_end":562616,"line_start":69,"line_end":69,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562621,"byte_end":562624,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ While supporting octal syntax isn't in and of itself a problem, it does","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562629,"byte_end":562704,"line_start":71,"line_end":71,"column_start":5,"column_end":80}},{"value":"/ make good error messages harder. That is, in PCRE based regex engines,","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562709,"byte_end":562783,"line_start":72,"line_end":72,"column_start":5,"column_end":79}},{"value":"/ syntax like `\\0` invokes a backreference, which is explicitly","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562788,"byte_end":562853,"line_start":73,"line_end":73,"column_start":5,"column_end":70}},{"value":"/ unsupported in Rust's regex engine. However, many users expect it to","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562858,"byte_end":562930,"line_start":74,"line_end":74,"column_start":5,"column_end":77}},{"value":"/ be supported. Therefore, when octal support is disabled, the error","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":562935,"byte_end":563005,"line_start":75,"line_end":75,"column_start":5,"column_end":75}},{"value":"/ message will explicitly mention that backreferences aren't supported.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563010,"byte_end":563083,"line_start":76,"line_end":76,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563088,"byte_end":563091,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ Octal syntax is disabled by default.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563096,"byte_end":563136,"line_start":78,"line_end":78,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563861,"byte_end":563879,"line_start":95,"line_end":95,"column_start":12,"column_end":30},"name":"allow_invalid_utf8","qualname":"<ParserBuilder>::allow_invalid_utf8","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" When enabled, the parser will permit the construction of a regular\n expression that may match invalid UTF-8.","sig":null,"attributes":[{"value":"/ When enabled, the parser will permit the construction of a regular","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563253,"byte_end":563323,"line_start":84,"line_end":84,"column_start":5,"column_end":75}},{"value":"/ expression that may match invalid UTF-8.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563328,"byte_end":563372,"line_start":85,"line_end":85,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563377,"byte_end":563380,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ When disabled (the default), the parser is guaranteed to produce","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563385,"byte_end":563453,"line_start":87,"line_end":87,"column_start":5,"column_end":73}},{"value":"/ an expression that will only ever match valid UTF-8 (otherwise, the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563458,"byte_end":563529,"line_start":88,"line_end":88,"column_start":5,"column_end":76}},{"value":"/ parser will return an error).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563534,"byte_end":563567,"line_start":89,"line_end":89,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563572,"byte_end":563575,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ Note that currently, even when invalid UTF-8 is banned, the parser","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563580,"byte_end":563650,"line_start":91,"line_end":91,"column_start":5,"column_end":75}},{"value":"/ will permit a negated ASCII word boundary (i.e., `(?-u:\\B)`) even","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563655,"byte_end":563724,"line_start":92,"line_end":92,"column_start":5,"column_end":74}},{"value":"/ though it can actually match at invalid UTF-8 boundaries. This bug","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563729,"byte_end":563799,"line_start":93,"line_end":93,"column_start":5,"column_end":75}},{"value":"/ will be fixed on the next semver release.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563804,"byte_end":563849,"line_start":94,"line_end":94,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564439,"byte_end":564456,"line_start":108,"line_end":108,"column_start":12,"column_end":29},"name":"ignore_whitespace","qualname":"<ParserBuilder>::ignore_whitespace","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable verbose mode in the regular expression.","sig":null,"attributes":[{"value":"/ Enable verbose mode in the regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":563992,"byte_end":564042,"line_start":100,"line_end":100,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564047,"byte_end":564050,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ When enabled, verbose mode permits insigificant whitespace in many","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564055,"byte_end":564125,"line_start":102,"line_end":102,"column_start":5,"column_end":75}},{"value":"/ places in the regular expression, as well as comments. Comments are","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564130,"byte_end":564201,"line_start":103,"line_end":103,"column_start":5,"column_end":76}},{"value":"/ started using `#` and continue until the end of the line.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564206,"byte_end":564267,"line_start":104,"line_end":104,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564272,"byte_end":564275,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ By default, this is disabled. It may be selectively enabled in the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564280,"byte_end":564350,"line_start":106,"line_end":106,"column_start":5,"column_end":75}},{"value":"/ regular expression by using the `x` flag regardless of this setting.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564355,"byte_end":564427,"line_start":107,"line_end":107,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564787,"byte_end":564803,"line_start":117,"line_end":117,"column_start":12,"column_end":28},"name":"case_insensitive","qualname":"<ParserBuilder>::case_insensitive","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the case insensitive flag by default.","sig":null,"attributes":[{"value":"/ Enable or disable the case insensitive flag by default.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564568,"byte_end":564627,"line_start":113,"line_end":113,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564632,"byte_end":564635,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ By default this is disabled. It may alternatively be selectively","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564640,"byte_end":564708,"line_start":115,"line_end":115,"column_start":5,"column_end":73}},{"value":"/ enabled in the regular expression itself via the `i` flag.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564713,"byte_end":564775,"line_start":116,"line_end":116,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":565136,"byte_end":565146,"line_start":126,"line_end":126,"column_start":12,"column_end":22},"name":"multi_line","qualname":"<ParserBuilder>::multi_line","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the multi-line matching flag by default.","sig":null,"attributes":[{"value":"/ Enable or disable the multi-line matching flag by default.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564914,"byte_end":564976,"line_start":122,"line_end":122,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564981,"byte_end":564984,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ By default this is disabled. It may alternatively be selectively","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":564989,"byte_end":565057,"line_start":124,"line_end":124,"column_start":5,"column_end":73}},{"value":"/ enabled in the regular expression itself via the `m` flag.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":565062,"byte_end":565124,"line_start":125,"line_end":125,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":565481,"byte_end":565501,"line_start":135,"line_end":135,"column_start":12,"column_end":32},"name":"dot_matches_new_line","qualname":"<ParserBuilder>::dot_matches_new_line","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"dot matches any character\" flag by default.","sig":null,"attributes":[{"value":"/ Enable or disable the \"dot matches any character\" flag by default.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":565251,"byte_end":565321,"line_start":131,"line_end":131,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":565326,"byte_end":565329,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ By default this is disabled. It may alternatively be selectively","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":565334,"byte_end":565402,"line_start":133,"line_end":133,"column_start":5,"column_end":73}},{"value":"/ enabled in the regular expression itself via the `s` flag.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":565407,"byte_end":565469,"line_start":134,"line_end":134,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":565854,"byte_end":565864,"line_start":147,"line_end":147,"column_start":12,"column_end":22},"name":"swap_greed","qualname":"<ParserBuilder>::swap_greed","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the \"swap greed\" flag by default.","sig":null,"attributes":[{"value":"/ Enable or disable the \"swap greed\" flag by default.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":565639,"byte_end":565694,"line_start":143,"line_end":143,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":565699,"byte_end":565702,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ By default this is disabled. It may alternatively be selectively","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":565707,"byte_end":565775,"line_start":145,"line_end":145,"column_start":5,"column_end":73}},{"value":"/ enabled in the regular expression itself via the `U` flag.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":565780,"byte_end":565842,"line_start":146,"line_end":146,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566423,"byte_end":566430,"line_start":160,"line_end":160,"column_start":12,"column_end":19},"name":"unicode","qualname":"<ParserBuilder>::unicode","value":"fn (&mut self, yes: bool) -> &mut ParserBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the Unicode flag (`u`) by default.","sig":null,"attributes":[{"value":"/ Enable or disable the Unicode flag (`u`) by default.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":565969,"byte_end":566025,"line_start":152,"line_end":152,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566030,"byte_end":566033,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ By default this is **enabled**. It may alternatively be selectively","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566038,"byte_end":566109,"line_start":154,"line_end":154,"column_start":5,"column_end":76}},{"value":"/ disabled in the regular expression itself via the `u` flag.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566114,"byte_end":566177,"line_start":155,"line_end":155,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566182,"byte_end":566185,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ Note that unless `allow_invalid_utf8` is enabled (it's disabled by","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566190,"byte_end":566260,"line_start":157,"line_end":157,"column_start":5,"column_end":75}},{"value":"/ default), a regular expression will fail to parse if Unicode mode is","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566265,"byte_end":566337,"line_start":158,"line_end":158,"column_start":5,"column_end":77}},{"value":"/ disabled and a sub-expression could possibly match invalid UTF-8.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566342,"byte_end":566411,"line_start":159,"line_end":159,"column_start":5,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":2956},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567307,"byte_end":567313,"line_start":181,"line_end":181,"column_start":12,"column_end":18},"name":"Parser","qualname":"::parser::Parser","value":"Parser {  }","parent":null,"children":[{"krate":0,"index":2957},{"krate":0,"index":2958}],"decl_id":null,"docs":" A convenience parser for regular expressions.","sig":null,"attributes":[{"value":"/ A convenience parser for regular expressions.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566530,"byte_end":566579,"line_start":166,"line_end":166,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566580,"byte_end":566583,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ This parser takes as input a regular expression pattern string (the","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566584,"byte_end":566655,"line_start":168,"line_end":168,"column_start":1,"column_end":72}},{"value":"/ \"concrete syntax\") and returns a high-level intermediate representation","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566656,"byte_end":566731,"line_start":169,"line_end":169,"column_start":1,"column_end":76}},{"value":"/ (the HIR) suitable for most types of analysis. In particular, this parser","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566732,"byte_end":566809,"line_start":170,"line_end":170,"column_start":1,"column_end":78}},{"value":"/ hides the intermediate state of producing an AST (the \"abstract syntax\").","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566810,"byte_end":566887,"line_start":171,"line_end":171,"column_start":1,"column_end":78}},{"value":"/ The AST is itself far more complex than the HIR, so this parser serves as a","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566888,"byte_end":566967,"line_start":172,"line_end":172,"column_start":1,"column_end":80}},{"value":"/ convenience for never having to deal with it at all.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":566968,"byte_end":567024,"line_start":173,"line_end":173,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567025,"byte_end":567028,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ If callers have more fine grained use cases that need an AST, then please","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567029,"byte_end":567106,"line_start":175,"line_end":175,"column_start":1,"column_end":78}},{"value":"/ see the [`ast::parse`](ast/parse/index.html) module.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567107,"byte_end":567163,"line_start":176,"line_end":176,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567164,"byte_end":567167,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ A `Parser` can be configured in more detail via a","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567168,"byte_end":567221,"line_start":178,"line_end":178,"column_start":1,"column_end":54}},{"value":"/ [`ParserBuilder`](struct.ParserBuilder.html).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567222,"byte_end":567271,"line_start":179,"line_end":179,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567760,"byte_end":567763,"line_start":195,"line_end":195,"column_start":12,"column_end":15},"name":"new","qualname":"<Parser>::new","value":"fn () -> Parser","parent":null,"children":[],"decl_id":null,"docs":" Create a new parser with a default configuration.","sig":null,"attributes":[{"value":"/ Create a new parser with a default configuration.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567403,"byte_end":567456,"line_start":187,"line_end":187,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567461,"byte_end":567464,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ The parser can be run with `parse` method. The parse method returns","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567469,"byte_end":567540,"line_start":189,"line_end":189,"column_start":5,"column_end":76}},{"value":"/ a high level intermediate representation of the given regular","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567545,"byte_end":567610,"line_start":190,"line_end":190,"column_start":5,"column_end":70}},{"value":"/ expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567615,"byte_end":567630,"line_start":191,"line_end":191,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567635,"byte_end":567638,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ To set configuration options on the parser, use","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567643,"byte_end":567694,"line_start":193,"line_end":193,"column_start":5,"column_end":56}},{"value":"/ [`ParserBuilder`](struct.ParserBuilder.html).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567699,"byte_end":567748,"line_start":194,"line_end":194,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567925,"byte_end":567930,"line_start":201,"line_end":201,"column_start":12,"column_end":17},"name":"parse","qualname":"<Parser>::parse","value":"fn (&mut self, pattern: &str) -> Result<hir::Hir>","parent":null,"children":[],"decl_id":null,"docs":" Parse the regular expression into a high level intermediate\n representation.\n","sig":null,"attributes":[{"value":"/ Parse the regular expression into a high level intermediate","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567826,"byte_end":567889,"line_start":199,"line_end":199,"column_start":5,"column_end":68}},{"value":"/ representation.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567894,"byte_end":567913,"line_start":200,"line_end":200,"column_start":5,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":1414},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":4823,"byte_end":4829,"line_start":125,"line_end":125,"column_start":8,"column_end":14},"name":"escape","qualname":"::escape","value":"fn (text: &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Escapes all regular expression meta characters in `text`.","sig":null,"attributes":[{"value":"/ Escapes all regular expression meta characters in `text`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":4665,"byte_end":4726,"line_start":121,"line_end":121,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":4727,"byte_end":4730,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ The string returned may be safely used as a literal in a regular","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":4731,"byte_end":4799,"line_start":123,"line_end":123,"column_start":1,"column_end":69}},{"value":"/ expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":4800,"byte_end":4815,"line_start":124,"line_end":124,"column_start":1,"column_end":16}}]},{"kind":"Function","id":{"krate":0,"index":1415},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":5200,"byte_end":5211,"line_start":135,"line_end":135,"column_start":8,"column_end":19},"name":"escape_into","qualname":"::escape_into","value":"fn (text: &str, buf: &mut String) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Escapes all meta characters in `text` and writes the result into `buf`.","sig":null,"attributes":[{"value":"/ Escapes all meta characters in `text` and writes the result into `buf`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":4960,"byte_end":5035,"line_start":131,"line_end":131,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":5036,"byte_end":5039,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ This will append escape characters into the given buffer. The characters","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":5040,"byte_end":5116,"line_start":133,"line_end":133,"column_start":1,"column_end":77}},{"value":"/ that are appended are safe to use as a literal in a regular expression.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":5117,"byte_end":5192,"line_start":134,"line_end":134,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":1416},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":5850,"byte_end":5867,"line_start":153,"line_end":153,"column_start":8,"column_end":25},"name":"is_meta_character","qualname":"::is_meta_character","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the give character has significance in a regex.","sig":null,"attributes":[{"value":"/ Returns true if the give character has significance in a regex.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":5374,"byte_end":5441,"line_start":144,"line_end":144,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":5442,"byte_end":5445,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ These are the only characters that are allowed to be escaped, with one","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":5446,"byte_end":5520,"line_start":146,"line_end":146,"column_start":1,"column_end":75}},{"value":"/ exception: an ASCII space character may be escaped when extended mode (with","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":5521,"byte_end":5600,"line_start":147,"line_end":147,"column_start":1,"column_end":80}},{"value":"/ the `x` flag) is enabld. In particular, `is_meta_character(' ')` returns","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":5601,"byte_end":5677,"line_start":148,"line_end":148,"column_start":1,"column_end":77}},{"value":"/ `false`.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":5678,"byte_end":5690,"line_start":149,"line_end":149,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":5691,"byte_end":5694,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ Note that the set of characters for which this function returns `true` or","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":5695,"byte_end":5772,"line_start":151,"line_end":151,"column_start":1,"column_end":78}},{"value":"/ `false` is fixed and won't change in a semver compatible release.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":5773,"byte_end":5842,"line_start":152,"line_end":152,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":1417},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":6517,"byte_end":6534,"line_start":170,"line_end":170,"column_start":8,"column_end":25},"name":"is_word_character","qualname":"::is_word_character","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given character is a Unicode word\n character.","sig":null,"attributes":[{"value":"/ Returns true if and only if the given character is a Unicode word","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":6062,"byte_end":6131,"line_start":161,"line_end":161,"column_start":1,"column_end":70}},{"value":"/ character.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":6132,"byte_end":6146,"line_start":162,"line_end":162,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":6147,"byte_end":6150,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ A Unicode word character is defined by","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":6151,"byte_end":6193,"line_start":164,"line_end":164,"column_start":1,"column_end":43}},{"value":"/ [UTS#18 Annex C](http://unicode.org/reports/tr18/#Compatibility_Properties).","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":6194,"byte_end":6274,"line_start":165,"line_end":165,"column_start":1,"column_end":81}},{"value":"/ In particular, a character","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":6275,"byte_end":6305,"line_start":166,"line_end":166,"column_start":1,"column_end":31}},{"value":"/ is considered a word character if it is in either of the `Alphabetic` or","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":6306,"byte_end":6382,"line_start":167,"line_end":167,"column_start":1,"column_end":77}},{"value":"/ `Join_Control` properties, or is in one of the `Decimal_Number`, `Mark`","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":6383,"byte_end":6458,"line_start":168,"line_end":168,"column_start":1,"column_end":76}},{"value":"/ or `Connector_Punctuation` general categories.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":6459,"byte_end":6509,"line_start":169,"line_end":169,"column_start":1,"column_end":51}}]},{"kind":"Function","id":{"krate":0,"index":1421},"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":7178,"byte_end":7190,"line_start":193,"line_end":193,"column_start":8,"column_end":20},"name":"is_word_byte","qualname":"::is_word_byte","value":"fn (c: u8) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if the given character is an ASCII word character.","sig":null,"attributes":[{"value":"/ Returns true if and only if the given character is an ASCII word character.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":6994,"byte_end":7073,"line_start":189,"line_end":189,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":7074,"byte_end":7077,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ An ASCII word character is defined by the following character class:","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":7078,"byte_end":7150,"line_start":191,"line_end":191,"column_start":1,"column_end":73}},{"value":"/ `[_0-9a-zA-Z]'.","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":7151,"byte_end":7170,"line_start":192,"line_end":192,"column_start":1,"column_end":20}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":59151,"byte_end":59160,"line_start":42,"line_end":42,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":62009,"byte_end":62022,"line_start":127,"line_end":127,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":62104,"byte_end":62117,"line_start":133,"line_end":133,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":70656,"byte_end":70662,"line_start":331,"line_end":331,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":72247,"byte_end":72254,"line_start":373,"line_end":373,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":94849,"byte_end":94856,"line_start":969,"line_end":969,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":138701,"byte_end":138712,"line_start":2114,"line_end":2114,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":139678,"byte_end":139689,"line_start":2146,"line_end":2146,"column_start":50,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":253829,"byte_end":253843,"line_start":29,"line_end":29,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":253927,"byte_end":253941,"line_start":35,"line_end":35,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254643,"byte_end":254650,"line_start":63,"line_end":63,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":167},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":255306,"byte_end":255312,"line_start":84,"line_end":84,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":183}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":257917,"byte_end":257923,"line_start":170,"line_end":170,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":279408,"byte_end":279419,"line_start":216,"line_end":216,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":288276,"byte_end":288281,"line_start":471,"line_end":471,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":288674,"byte_end":288684,"line_start":484,"line_end":484,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":289258,"byte_end":289269,"line_start":501,"line_end":501,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":289666,"byte_end":289676,"line_start":514,"line_end":514,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":302}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":290045,"byte_end":290056,"line_start":526,"line_end":526,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9222,"byte_end":9227,"line_start":43,"line_end":43,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":15164,"byte_end":15169,"line_start":182,"line_end":182,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":17192,"byte_end":17197,"line_start":220,"line_end":220,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":17336,"byte_end":17345,"line_start":226,"line_end":226,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21420,"byte_end":21424,"line_start":340,"line_end":340,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21568,"byte_end":21572,"line_start":346,"line_end":346,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21716,"byte_end":21720,"line_start":352,"line_end":352,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22361,"byte_end":22369,"line_start":373,"line_end":373,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22584,"byte_end":22592,"line_start":382,"line_end":382,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":329}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22713,"byte_end":22721,"line_start":388,"line_end":388,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22834,"byte_end":22838,"line_start":394,"line_end":394,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23926,"byte_end":23934,"line_start":429,"line_end":429,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26565,"byte_end":26568,"line_start":502,"line_end":502,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28176,"byte_end":28179,"line_start":553,"line_end":553,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28561,"byte_end":28572,"line_start":569,"line_end":569,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29300,"byte_end":29306,"line_start":593,"line_end":593,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30258,"byte_end":30265,"line_start":623,"line_end":623,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":353}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32873,"byte_end":32887,"line_start":700,"line_end":700,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":355}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33743,"byte_end":33748,"line_start":726,"line_end":726,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35439,"byte_end":35453,"line_start":805,"line_end":805,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":359}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37241,"byte_end":37253,"line_start":854,"line_end":854,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38747,"byte_end":38765,"line_start":900,"line_end":900,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":40026,"byte_end":40034,"line_start":938,"line_end":938,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41626,"byte_end":41638,"line_start":988,"line_end":988,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42470,"byte_end":42483,"line_start":1015,"line_end":1015,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43069,"byte_end":43082,"line_start":1035,"line_end":1035,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47060,"byte_end":47075,"line_start":1172,"line_end":1172,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":377}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47962,"byte_end":47967,"line_start":1201,"line_end":1201,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50181,"byte_end":50186,"line_start":1277,"line_end":1277,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51952,"byte_end":51965,"line_start":1338,"line_end":1338,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52607,"byte_end":52610,"line_start":1367,"line_end":1367,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":54462,"byte_end":54470,"line_start":1417,"line_end":1417,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292489,"byte_end":292494,"line_start":30,"line_end":30,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292598,"byte_end":292603,"line_start":36,"line_end":36,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":410}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292707,"byte_end":292712,"line_start":42,"line_end":42,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292955,"byte_end":292960,"line_start":52,"line_end":52,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":414}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":293961,"byte_end":293970,"line_start":80,"line_end":80,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":294248,"byte_end":294257,"line_start":91,"line_end":91,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":294528,"byte_end":294537,"line_start":102,"line_end":102,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":297300,"byte_end":297305,"line_start":164,"line_end":164,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":376873,"byte_end":376884,"line_start":37,"line_end":37,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":388168,"byte_end":388183,"line_start":318,"line_end":318,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":396265,"byte_end":396273,"line_start":62,"line_end":62,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537},{"krate":0,"index":539},{"krate":0,"index":541},{"krate":0,"index":543},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":423627,"byte_end":423635,"line_start":871,"line_end":871,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":423899,"byte_end":423906,"line_start":881,"line_end":881,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":424404,"byte_end":424411,"line_start":903,"line_end":903,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":424513,"byte_end":424520,"line_start":909,"line_end":909,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":424659,"byte_end":424666,"line_start":915,"line_end":915,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":424933,"byte_end":424940,"line_start":925,"line_end":925,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":425008,"byte_end":425015,"line_start":929,"line_end":929,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":607},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":425115,"byte_end":425122,"line_start":934,"line_end":934,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":450499,"byte_end":450513,"line_start":20,"line_end":20,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":631}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":450597,"byte_end":450611,"line_start":26,"line_end":26,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":633},{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451728,"byte_end":451735,"line_start":61,"line_end":61,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":452391,"byte_end":452397,"line_start":82,"line_end":82,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":457654,"byte_end":457660,"line_start":220,"line_end":220,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":462431,"byte_end":462448,"line_start":31,"line_end":31,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":462538,"byte_end":462555,"line_start":37,"line_end":37,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465681,"byte_end":465691,"line_start":127,"line_end":127,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":686},{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":468785,"byte_end":468793,"line_start":198,"line_end":198,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":470207,"byte_end":470218,"line_start":238,"line_end":238,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":483227,"byte_end":483238,"line_start":565,"line_end":565,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":731},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":496672,"byte_end":496677,"line_start":950,"line_end":950,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":737},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":555884,"byte_end":555895,"line_start":108,"line_end":108,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":800},{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":559451,"byte_end":559456,"line_start":211,"line_end":211,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":804}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303075,"byte_end":303080,"line_start":44,"line_end":44,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304761,"byte_end":304770,"line_start":93,"line_end":93,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":305288,"byte_end":305293,"line_start":107,"line_end":107,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":813}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":305395,"byte_end":305400,"line_start":113,"line_end":113,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":305539,"byte_end":305548,"line_start":119,"line_end":119,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":817}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309338,"byte_end":309341,"line_start":203,"line_end":203,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":819},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323469,"byte_end":323476,"line_start":580,"line_end":580,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":324685,"byte_end":324688,"line_start":616,"line_end":616,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325407,"byte_end":325414,"line_start":637,"line_end":637,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":851}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326887,"byte_end":326892,"line_start":674,"line_end":674,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":328662,"byte_end":328674,"line_start":724,"line_end":724,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":331635,"byte_end":331651,"line_start":808,"line_end":808,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":871},{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":332108,"byte_end":332125,"line_start":826,"line_end":826,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":332771,"byte_end":332788,"line_start":847,"line_end":847,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880},{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334113,"byte_end":334130,"line_start":884,"line_end":884,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335086,"byte_end":335096,"line_start":917,"line_end":917,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":338362,"byte_end":338376,"line_start":1009,"line_end":1009,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":905}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":338815,"byte_end":338830,"line_start":1027,"line_end":1027,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":339944,"byte_end":339959,"line_start":1054,"line_end":1054,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340691,"byte_end":340706,"line_start":1080,"line_end":1080,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342868,"byte_end":342880,"line_start":1137,"line_end":1137,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":345046,"byte_end":345056,"line_start":1202,"line_end":1202,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346973,"byte_end":346976,"line_start":1250,"line_end":1250,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":349329,"byte_end":349336,"line_start":1322,"line_end":1322,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":928},{"krate":0,"index":2933},{"krate":0,"index":2934},{"krate":0,"index":2935},{"krate":0,"index":2936},{"krate":0,"index":2937},{"krate":0,"index":2938},{"krate":0,"index":2939},{"krate":0,"index":2940},{"krate":0,"index":2941},{"krate":0,"index":2942},{"krate":0,"index":2943},{"krate":0,"index":2944},{"krate":0,"index":2945},{"krate":0,"index":2946}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560355,"byte_end":560368,"line_start":20,"line_end":20,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567390,"byte_end":567396,"line_start":186,"line_end":186,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":946},{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/unicode.rs","byte_start":570366,"byte_end":570380,"line_start":68,"line_end":68,"column_start":19,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":971},{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/unicode.rs","byte_start":573506,"byte_end":573516,"line_start":151,"line_end":151,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":982},{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/unicode.rs","byte_start":582080,"byte_end":582087,"line_start":395,"line_end":395,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1002},{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":4578,"byte_end":4581,"line_start":113,"line_end":113,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":10}},{"kind":"Mod","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":8460,"byte_end":8465,"line_start":21,"line_end":21,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":17}},{"kind":"Mod","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":8475,"byte_end":8480,"line_start":22,"line_end":22,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":153}},{"kind":"Mod","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/lib.rs","byte_start":4614,"byte_end":4617,"line_start":116,"line_end":116,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":442}},{"kind":"Mod","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":302584,"byte_end":302591,"line_start":27,"line_end":27,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":516}},{"kind":"Mod","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":302601,"byte_end":302606,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":620}},{"kind":"Mod","span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":302616,"byte_end":302625,"line_start":29,"line_end":29,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":654}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":59151,"byte_end":59160,"line_start":42,"line_end":42,"column_start":6,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1422},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":62009,"byte_end":62022,"line_start":127,"line_end":127,"column_start":18,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1449},"to":{"krate":2,"index":1843}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":62104,"byte_end":62117,"line_start":133,"line_end":133,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1449},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":70656,"byte_end":70662,"line_start":331,"line_end":331,"column_start":6,"column_end":12},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":72247,"byte_end":72254,"line_start":373,"line_end":373,"column_start":29,"column_end":36},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1473},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":94849,"byte_end":94856,"line_start":969,"line_end":969,"column_start":29,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1473},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":138701,"byte_end":138712,"line_start":2114,"line_end":2114,"column_start":33,"column_end":44},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1510},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/parse.rs","byte_start":139678,"byte_end":139689,"line_start":2146,"line_end":2146,"column_start":50,"column_end":61},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1510},"to":{"krate":0,"index":219}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":253829,"byte_end":253843,"line_start":29,"line_end":29,"column_start":18,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1522},"to":{"krate":2,"index":1843}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":253927,"byte_end":253941,"line_start":35,"line_end":35,"column_start":6,"column_end":20},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1522},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":254643,"byte_end":254650,"line_start":63,"line_end":63,"column_start":6,"column_end":13},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1528},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":255306,"byte_end":255312,"line_start":84,"line_end":84,"column_start":37,"column_end":43},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1532},"to":{"krate":0,"index":219}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/print.rs","byte_start":257917,"byte_end":257923,"line_start":170,"line_end":170,"column_start":25,"column_end":31},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":279408,"byte_end":279419,"line_start":216,"line_end":216,"column_start":10,"column_end":21},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":288276,"byte_end":288281,"line_start":471,"line_end":471,"column_start":10,"column_end":15},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":288674,"byte_end":288684,"line_start":484,"line_end":484,"column_start":10,"column_end":20},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":252},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":289258,"byte_end":289269,"line_start":501,"line_end":501,"column_start":10,"column_end":21},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":289666,"byte_end":289676,"line_start":514,"line_end":514,"column_start":25,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":252},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/visitor.rs","byte_start":290045,"byte_end":290056,"line_start":526,"line_end":526,"column_start":25,"column_end":36},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":266},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":9222,"byte_end":9227,"line_start":43,"line_end":43,"column_start":6,"column_end":11},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1541},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":15164,"byte_end":15169,"line_start":182,"line_end":182,"column_start":23,"column_end":28},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1541},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":17192,"byte_end":17197,"line_start":220,"line_end":220,"column_start":23,"column_end":28},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1541},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":17336,"byte_end":17345,"line_start":226,"line_end":226,"column_start":23,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1556},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21420,"byte_end":21424,"line_start":340,"line_end":340,"column_start":21,"column_end":25},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1629},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21568,"byte_end":21572,"line_start":346,"line_end":346,"column_start":14,"column_end":18},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1629},"to":{"krate":2,"index":1614}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":21716,"byte_end":21720,"line_start":352,"line_end":352,"column_start":21,"column_end":25},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1629},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22361,"byte_end":22369,"line_start":373,"line_end":373,"column_start":21,"column_end":29},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1642},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22584,"byte_end":22592,"line_start":382,"line_end":382,"column_start":14,"column_end":22},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1642},"to":{"krate":2,"index":1614}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22713,"byte_end":22721,"line_start":388,"line_end":388,"column_start":21,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1642},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":22834,"byte_end":22838,"line_start":394,"line_end":394,"column_start":6,"column_end":10},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1629},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":23926,"byte_end":23934,"line_start":429,"line_end":429,"column_start":6,"column_end":14},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1642},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":26565,"byte_end":26568,"line_start":502,"line_end":502,"column_start":6,"column_end":9},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28176,"byte_end":28179,"line_start":553,"line_end":553,"column_start":23,"column_end":26},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1684},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":28561,"byte_end":28572,"line_start":569,"line_end":569,"column_start":6,"column_end":17},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":29300,"byte_end":29306,"line_start":593,"line_end":593,"column_start":6,"column_end":12},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1740},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":30258,"byte_end":30265,"line_start":623,"line_end":623,"column_start":6,"column_end":13},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":32873,"byte_end":32887,"line_start":700,"line_end":700,"column_start":6,"column_end":20},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1821},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":33743,"byte_end":33748,"line_start":726,"line_end":726,"column_start":6,"column_end":11},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1838},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":35439,"byte_end":35453,"line_start":805,"line_end":805,"column_start":6,"column_end":20},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1906},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":37241,"byte_end":37253,"line_start":854,"line_end":854,"column_start":6,"column_end":18},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1945},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":38747,"byte_end":38765,"line_start":900,"line_end":900,"column_start":6,"column_end":24},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1982},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":40026,"byte_end":40034,"line_start":938,"line_end":938,"column_start":6,"column_end":14},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2014},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":41626,"byte_end":41638,"line_start":988,"line_end":988,"column_start":6,"column_end":18},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2032},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":42470,"byte_end":42483,"line_start":1015,"line_end":1015,"column_start":6,"column_end":19},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2068},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":43069,"byte_end":43082,"line_start":1035,"line_end":1035,"column_start":6,"column_end":19},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2083},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47060,"byte_end":47075,"line_start":1172,"line_end":1172,"column_start":6,"column_end":21},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":47962,"byte_end":47967,"line_start":1201,"line_end":1201,"column_start":6,"column_end":11},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2241},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":50181,"byte_end":50186,"line_start":1277,"line_end":1277,"column_start":6,"column_end":11},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":51952,"byte_end":51965,"line_start":1338,"line_end":1338,"column_start":6,"column_end":19},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2334},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":52607,"byte_end":52610,"line_start":1367,"line_end":1367,"column_start":15,"column_end":18},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1684},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/ast/mod.rs","byte_start":54462,"byte_end":54470,"line_start":1417,"line_end":1417,"column_start":15,"column_end":23},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2014},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292489,"byte_end":292494,"line_start":30,"line_end":30,"column_start":27,"column_end":32},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2407},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292598,"byte_end":292603,"line_start":36,"line_end":36,"column_start":27,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2407},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292707,"byte_end":292712,"line_start":42,"line_end":42,"column_start":23,"column_end":28},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2407},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":292955,"byte_end":292960,"line_start":52,"line_end":52,"column_start":23,"column_end":28},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2407},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":293961,"byte_end":293970,"line_start":80,"line_end":80,"column_start":35,"column_end":44},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2427},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":294248,"byte_end":294257,"line_start":91,"line_end":91,"column_start":35,"column_end":44},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2427},"to":{"krate":2,"index":1776}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":294528,"byte_end":294537,"line_start":102,"line_end":102,"column_start":44,"column_end":53},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2427},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/error.rs","byte_start":297300,"byte_end":297305,"line_start":164,"line_end":164,"column_start":10,"column_end":15},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":376873,"byte_end":376884,"line_start":37,"line_end":37,"column_start":19,"column_end":30},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":388168,"byte_end":388183,"line_start":318,"line_end":318,"column_start":26,"column_end":41},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2458},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":388314,"byte_end":388319,"line_start":327,"line_end":327,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":2,"index":1562},"to":{"krate":0,"index":483}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":388322,"byte_end":388326,"line_start":327,"line_end":327,"column_start":13,"column_end":17},"kind":"SuperTrait","from":{"krate":2,"index":1862},"to":{"krate":0,"index":483}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":388329,"byte_end":388334,"line_start":327,"line_end":327,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":5916},"to":{"krate":0,"index":483}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":388337,"byte_end":388344,"line_start":327,"line_end":327,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":1843},"to":{"krate":0,"index":483}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":388347,"byte_end":388349,"line_start":327,"line_end":327,"column_start":38,"column_end":40},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":483}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":388352,"byte_end":388361,"line_start":327,"line_end":327,"column_start":43,"column_end":52},"kind":"SuperTrait","from":{"krate":2,"index":1588},"to":{"krate":0,"index":483}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":388364,"byte_end":388374,"line_start":327,"line_end":327,"column_start":55,"column_end":65},"kind":"SuperTrait","from":{"krate":2,"index":1625},"to":{"krate":0,"index":483}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":388377,"byte_end":388380,"line_start":327,"line_end":327,"column_start":68,"column_end":71},"kind":"SuperTrait","from":{"krate":2,"index":1614},"to":{"krate":0,"index":483}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":392910,"byte_end":392914,"line_start":454,"line_end":454,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1862},"to":{"krate":0,"index":498}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":392917,"byte_end":392922,"line_start":454,"line_end":454,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1562},"to":{"krate":0,"index":498}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":392925,"byte_end":392930,"line_start":454,"line_end":454,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":2,"index":5916},"to":{"krate":0,"index":498}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":392933,"byte_end":392935,"line_start":454,"line_end":454,"column_start":41,"column_end":43},"kind":"SuperTrait","from":{"krate":2,"index":1593},"to":{"krate":0,"index":498}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":392938,"byte_end":392947,"line_start":454,"line_end":454,"column_start":46,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1588},"to":{"krate":0,"index":498}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":392950,"byte_end":392960,"line_start":454,"line_end":454,"column_start":58,"column_end":68},"kind":"SuperTrait","from":{"krate":2,"index":1625},"to":{"krate":0,"index":498}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/interval.rs","byte_start":392963,"byte_end":392966,"line_start":454,"line_end":454,"column_start":71,"column_end":74},"kind":"SuperTrait","from":{"krate":2,"index":1614},"to":{"krate":0,"index":498}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":396265,"byte_end":396273,"line_start":62,"line_end":62,"column_start":6,"column_end":14},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2467},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":423627,"byte_end":423635,"line_start":871,"line_end":871,"column_start":21,"column_end":29},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2467},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":423899,"byte_end":423906,"line_start":881,"line_end":881,"column_start":6,"column_end":13},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2480},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":424404,"byte_end":424411,"line_start":903,"line_end":903,"column_start":20,"column_end":27},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2480},"to":{"krate":2,"index":1588}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":424513,"byte_end":424520,"line_start":909,"line_end":909,"column_start":21,"column_end":28},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2480},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":424659,"byte_end":424666,"line_start":915,"line_end":915,"column_start":21,"column_end":28},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2480},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":424933,"byte_end":424940,"line_start":925,"line_end":925,"column_start":22,"column_end":29},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2480},"to":{"krate":2,"index":1767}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":425008,"byte_end":425015,"line_start":929,"line_end":929,"column_start":21,"column_end":28},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2480},"to":{"krate":2,"index":2023}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/literal/mod.rs","byte_start":425115,"byte_end":425122,"line_start":934,"line_end":934,"column_start":24,"column_end":31},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2480},"to":{"krate":2,"index":2034}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":450499,"byte_end":450513,"line_start":20,"line_end":20,"column_start":18,"column_end":32},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2490},"to":{"krate":2,"index":1843}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":450597,"byte_end":450611,"line_start":26,"line_end":26,"column_start":6,"column_end":20},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2490},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":451728,"byte_end":451735,"line_start":61,"line_end":61,"column_start":6,"column_end":13},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2496},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":452391,"byte_end":452397,"line_start":82,"line_end":82,"column_start":37,"column_end":43},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2500},"to":{"krate":0,"index":768}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/print.rs","byte_start":457654,"byte_end":457660,"line_start":220,"line_end":220,"column_start":25,"column_end":31},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":462431,"byte_end":462448,"line_start":31,"line_end":31,"column_start":18,"column_end":35},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2509},"to":{"krate":2,"index":1843}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":462538,"byte_end":462555,"line_start":37,"line_end":37,"column_start":6,"column_end":23},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2509},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":465681,"byte_end":465691,"line_start":127,"line_end":127,"column_start":6,"column_end":16},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2516},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":468785,"byte_end":468793,"line_start":198,"line_end":198,"column_start":6,"column_end":14},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2524},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":470207,"byte_end":470218,"line_start":238,"line_end":238,"column_start":26,"column_end":37},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2544},"to":{"krate":0,"index":219}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":483227,"byte_end":483238,"line_start":565,"line_end":565,"column_start":14,"column_end":25},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2544},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/translate.rs","byte_start":496672,"byte_end":496677,"line_start":950,"line_end":950,"column_start":6,"column_end":11},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":555884,"byte_end":555895,"line_start":108,"line_end":108,"column_start":10,"column_end":21},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":778},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/visitor.rs","byte_start":559451,"byte_end":559456,"line_start":211,"line_end":211,"column_start":10,"column_end":15},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":781},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":303075,"byte_end":303080,"line_start":44,"line_end":44,"column_start":6,"column_end":11},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2570},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":304761,"byte_end":304770,"line_start":93,"line_end":93,"column_start":6,"column_end":15},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2585},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":305288,"byte_end":305293,"line_start":107,"line_end":107,"column_start":23,"column_end":28},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2570},"to":{"krate":1,"index":1620}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":305395,"byte_end":305400,"line_start":113,"line_end":113,"column_start":23,"column_end":28},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2570},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":305539,"byte_end":305548,"line_start":119,"line_end":119,"column_start":23,"column_end":32},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":2585},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":309338,"byte_end":309341,"line_start":203,"line_end":203,"column_start":6,"column_end":9},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2608},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":323469,"byte_end":323476,"line_start":580,"line_end":580,"column_start":6,"column_end":13},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":324685,"byte_end":324688,"line_start":616,"line_end":616,"column_start":23,"column_end":26},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2608},"to":{"krate":2,"index":5921}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":325407,"byte_end":325414,"line_start":637,"line_end":637,"column_start":6,"column_end":13},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2660},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":326887,"byte_end":326892,"line_start":674,"line_end":674,"column_start":6,"column_end":11},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2678},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":328662,"byte_end":328674,"line_start":724,"line_end":724,"column_start":6,"column_end":18},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2696},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":331635,"byte_end":331651,"line_start":808,"line_end":808,"column_start":23,"column_end":39},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2709},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":332108,"byte_end":332125,"line_start":826,"line_end":826,"column_start":21,"column_end":38},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2716},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":332771,"byte_end":332788,"line_start":847,"line_end":847,"column_start":19,"column_end":36},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2716},"to":{"krate":0,"index":483}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":334113,"byte_end":334130,"line_start":884,"line_end":884,"column_start":6,"column_end":23},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":335086,"byte_end":335096,"line_start":917,"line_end":917,"column_start":6,"column_end":16},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2743},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":338362,"byte_end":338376,"line_start":1009,"line_end":1009,"column_start":23,"column_end":37},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2756},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":338815,"byte_end":338830,"line_start":1027,"line_end":1027,"column_start":19,"column_end":34},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2763},"to":{"krate":0,"index":483}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":339944,"byte_end":339959,"line_start":1054,"line_end":1054,"column_start":6,"column_end":21},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2763},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":340691,"byte_end":340706,"line_start":1080,"line_end":1080,"column_start":21,"column_end":36},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":2763},"to":{"krate":2,"index":5916}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":342868,"byte_end":342880,"line_start":1137,"line_end":1137,"column_start":6,"column_end":18},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":2809},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":345046,"byte_end":345056,"line_start":1202,"line_end":1202,"column_start":6,"column_end":16},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2862},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":346973,"byte_end":346976,"line_start":1250,"line_end":1250,"column_start":15,"column_end":18},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2608},"to":{"krate":2,"index":2045}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/hir/mod.rs","byte_start":349329,"byte_end":349336,"line_start":1322,"line_end":1322,"column_start":6,"column_end":13},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2920},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":560355,"byte_end":560368,"line_start":20,"line_end":20,"column_start":6,"column_end":19},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2947},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/parser.rs","byte_start":567390,"byte_end":567396,"line_start":186,"line_end":186,"column_start":6,"column_end":12},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":2956},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/unicode.rs","byte_start":570366,"byte_end":570380,"line_start":68,"line_end":68,"column_start":19,"column_end":33},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2970},"to":{"krate":2,"index":4716}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/unicode.rs","byte_start":573506,"byte_end":573516,"line_start":151,"line_end":151,"column_start":10,"column_end":20},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2975},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/michalbe1/.cargo/registry/src/github.com-1ecc6299db9ec823/regex-syntax-0.5.6/src/unicode.rs","byte_start":582080,"byte_end":582087,"line_start":395,"line_end":395,"column_start":19,"column_end":26},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":3011},"to":{"krate":2,"index":4716}}]}