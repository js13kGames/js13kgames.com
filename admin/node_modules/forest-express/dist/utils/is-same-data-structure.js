"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

/**
 * Check if two objects have the same structure.
 * See: https://github.com/ForestAdmin/forest-express/pull/546#discussion_r530205698
 *
 * @param {Object} object the first object to compare
 * @param {Object} other the second object to compare
 * @param {Number} deep comparison level (deepness)
 * @param {Number} step current step (internal var)
 * @returns {Boolean}
 */
function isSameDataStructure(object, other) {
  var deep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var step = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

  if (!object || !other || !((0, _typeof2["default"])(object) === 'object' && (0, _typeof2["default"])(other) === 'object')) {
    return false;
  }

  var objectKeys = Object.keys(object);
  var otherKeys = Object.keys(other);

  if (objectKeys.length !== otherKeys.length) {
    return false;
  }

  var objectKeysSet = new Set(objectKeys); // eslint-disable-next-line no-restricted-syntax

  for (var _i = 0, _otherKeys = otherKeys; _i < _otherKeys.length; _i++) {
    var key = _otherKeys[_i];

    // If key does not exist in other object or by its children.
    if (!objectKeysSet.has(key) || step + 1 <= deep && !isSameDataStructure(object[key], other[key], deep, step + 1)) {
      return false;
    }
  }

  return true;
}

module.exports = isSameDataStructure;