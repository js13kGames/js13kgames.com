"use strict";

var fs = require('fs');

var superagentRequest = require('superagent');

var errorMessages = require('../utils/error-messages');

var errorUtils = require('../utils/error');

var stringUtils = require('../utils/string');

var isSameDataStructure = require('../utils/is-same-data-structure');

var logger = require('../services/logger');

var pathService = require('../services/path');

var errorHandler = require('../services/exposed/error-handler');

var ipWhitelist = require('../services/ip-whitelist');

var forestServerRequester = require('../services/forest-server-requester');

var ApimapSorter = require('../services/apimap-sorter');

var ApimapSender = require('../services/apimap-sender');

var ApimapFieldsFormater = require('../services/apimap-fields-formater');

var AuthorizationFinder = require('../services/authorization-finder');

var SchemaFileUpdater = require('../services/schema-file-updater');

var HookLoad = require('../services/hook-load');

var schemasGenerator = require('../generators/schemas');

function initValue(context) {
  context.addValue('forestUrl', process.env.FOREST_URL || 'https://api.forestadmin.com');
}
/**
 * @typedef {{
 *  errorMessages: import('../utils/error-messages');
 *  stringUtils: import('../utils/string');
 *  errorUtils: import('../utils/error');
 *  isSameDataStructure: import('../utils/object-have-same-keys')
 * }} Utils
 *
 * @typedef {{
 *  logger: import('../services/logger');
 *  pathService: import('../services/path');
 *  errorHandler: import('../services/exposed/error-handler');
 *  ipWhitelist: import('../services/ip-whitelist');
 *  forestServerRequester: import('../services/forest-server-requester');
 *  authorizationFinder: import('../services/authorization-finder');
 *  schemaFileUpdater: import('../services/schema-file-updater');
 *  apimapSender: import('../services/apimap-sender');
 *  hookLoad: import('../services/hook-load');
 *  schemasGenerator: import('../generators/schemas');
 * }} Services
 *
 * @typedef {{
 *  superagentRequest: import('superagent');
 * }} Externals
 *
 * @typedef {Utils & Services & Externals} Context
 */

/**
 * @param {ApplicationContext} context
 */


function initUtils(context) {
  context.addInstance('errorMessages', errorMessages);
  context.addInstance('stringUtils', stringUtils);
  context.addInstance('errorUtils', errorUtils);
  context.addInstance('isSameDataStructure', isSameDataStructure);
}
/**
 * @param {ApplicationContext} context
 */


function initServices(context) {
  context.addInstance('logger', logger);
  context.addInstance('pathService', pathService);
  context.addInstance('errorHandler', errorHandler);
  context.addInstance('ipWhitelist', ipWhitelist);
  context.addInstance('forestServerRequester', forestServerRequester);
  context.addInstance('schemasGenerator', schemasGenerator);
  context.addClass(ApimapFieldsFormater);
  context.addClass(AuthorizationFinder);
  context.addClass(ApimapSorter);
  context.addClass(ApimapSender);
  context.addClass(SchemaFileUpdater);
  context.addClass(HookLoad);
}
/**
 * @param {ApplicationContext} context
 */


function initExternals(context) {
  context.addInstance('superagentRequest', superagentRequest);
  context.addInstance('fs', fs);
}
/**
 * @returns {ApplicationContext<Context>}
 */


function initContext(context) {
  initExternals(context);
  initValue(context);
  initUtils(context);
  initServices(context);
}

module.exports = initContext;