"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

/**
 * @template TContext
 */
var ApplicationContext = /*#__PURE__*/function () {
  function ApplicationContext() {
    (0, _classCallCheck2["default"])(this, ApplicationContext);
    (0, _defineProperty2["default"])(this, "context", {});
  }

  (0, _createClass2["default"])(ApplicationContext, [{
    key: "init",

    /**
     * @param {(ApplicationContext) => void} servicesBuilder
     */
    value: function init(servicesBuilder) {
      if (!servicesBuilder) throw new Error('missing services builder');
      servicesBuilder(this);
    }
    /**
     * @returns {TContext}
     */

  }, {
    key: "inject",
    value: function inject() {
      return this.context;
    }
    /**
     * @param {*} Class
     * @param {boolean?} overrides
     * @returns {this}
     */

  }, {
    key: "addClass",
    value: function addClass(Class, overrides) {
      if (overrides) throw new Error('overrides are forbidden in application-context. Use test-application-context.js');

      var instanceName = ApplicationContext._getInstanceName(Class);

      if (this.context[instanceName]) throw new Error("existing class instance ".concat(instanceName, " in context"));
      this.context[instanceName] = new Class(this.context);
      return this;
    }
    /**
     * @param {string} name
     * @param {*} instance
     * @returns {this}
     */

  }, {
    key: "addInstance",
    value: function addInstance(name, instance) {
      if (this.context[name]) throw new Error("existing instance { key: '".concat(name, "'} in context"));
      this.context[name] = instance;
      return this;
    }
    /**
     * @param {string} name
     * @param {(param: any) => void} work
     * @returns {this}
     */

  }, {
    key: "with",
    value: function _with(name, work) {
      work(this.context[name]);
      return this;
    }
    /**
     * No differences with addInstance for the moment, but we want to distinguish calls for clarity.
     * @param {string} name
     * @param {*} value
     * @returns {this}
     */

  }, {
    key: "addValue",
    value: function addValue(name, value) {
      return this.addInstance(name, value);
    }
    /**
     * No differences with addInstance for the moment, but we want to distinguish calls for clarity.
     * @param {string} name
     * @param {Function} value
     * @returns {this}
     */

  }, {
    key: "addFunction",
    value: function addFunction(name, value) {
      return this.addInstance(name, value);
    }
  }], [{
    key: "_getInstanceName",

    /**
     * @static @private
     * @param {*} Class
     * @returns {string}
     */
    value: function _getInstanceName(Class) {
      var className = Class.name;
      return className.charAt(0).toLowerCase() + className.slice(1);
    }
  }]);
  return ApplicationContext;
}();

module.exports = ApplicationContext;