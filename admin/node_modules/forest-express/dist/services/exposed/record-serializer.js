"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var AbstractRecordService = require('./abstract-records-service');

var RecordSerializer = /*#__PURE__*/function (_AbstractRecordServic) {
  (0, _inherits2["default"])(RecordSerializer, _AbstractRecordServic);

  var _super = _createSuper(RecordSerializer);

  function RecordSerializer(model) {
    (0, _classCallCheck2["default"])(this, RecordSerializer);

    if (!model) {
      throw new Error('RecordSerializer initialization error: missing first argument "model"');
    }

    if (!(model instanceof Object)) {
      throw new Error('RecordSerializer initialization error: "model" argument should be an object (ex: `{ name: "myModel" }`)');
    }

    if (!model.modelName) {
      model.modelName = model.name;
    }

    return _super.call(this, model);
  }

  return RecordSerializer;
}(AbstractRecordService);

module.exports = RecordSerializer;