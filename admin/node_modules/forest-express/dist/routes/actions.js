"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var context = require('../context');
/**
 * This class generates routes for handling smart actions' form hooks and legacy routes.
 */


var Actions = /*#__PURE__*/function () {
  function Actions() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : context.inject(),
        logger = _ref.logger,
        pathService = _ref.pathService,
        stringUtils = _ref.stringUtils,
        schemasGenerator = _ref.schemasGenerator,
        hookLoad = _ref.hookLoad;

    (0, _classCallCheck2["default"])(this, Actions);
    this.path = pathService;
    this.logger = logger;
    this.stringUtils = stringUtils;
    this.schemasGenerator = schemasGenerator;
    this.hookLoad = hookLoad;
  }
  /**
   * Generate a callback for express that handles the `values` route.
   * This legacy route is used to handle smart actions' forms initialization.
   * Users should use the `load` hook now.
   *
   * @param {*} action The smart action
   * @returns {Function} A route callback for express
   */


  (0, _createClass2["default"])(Actions, [{
    key: "getValuesController",
    value: function getValuesController(action) {
      var _this = this;

      return function (request, response) {
        var successResponse = function successResponse(object) {
          return response.status(200).send(object);
        };

        var values = action.values ? action.values(request.body.data.attributes.values) : {};
        if (!(values.then && typeof values.then === 'function')) return successResponse(values);
        return values.then(function (valuesComputed) {
          return successResponse(valuesComputed);
        })["catch"](function (error) {
          _this.logger.error("Cannot send the values of the \"".concat(action.name, "\" Smart Actions because of an unexpected error: "), error);

          return successResponse({});
        });
      };
    }
    /**
     * Generate a callback for express that handles the `load` hook.
     *
     * @param {*} action The smart action
     * @param {*} model The model of the smart action
     * @param {*} Implementation Gives access to current Implementation (mongoose or sequelize)
     * @returns {Function} A route callback for express
     */

  }, {
    key: "getHookLoadController",
    value: function getHookLoadController(action, model, Implementation) {
      var _this2 = this;

      return /*#__PURE__*/function () {
        var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(request, response) {
          var recordId, record, updatedFields, message;
          return _regenerator["default"].wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  recordId = request.body.recordsId[0];
                  _context.next = 3;
                  return new Implementation.ResourceGetter(model, {
                    recordId: recordId
                  }).perform();

                case 3:
                  record = _context.sent;
                  _context.prev = 4;
                  _context.next = 7;
                  return _this2.hookLoad.getResponse(action.hooks.load, action.fields, record);

                case 7:
                  updatedFields = _context.sent;
                  return _context.abrupt("return", response.status(200).send({
                    fields: updatedFields
                  }));

                case 11:
                  _context.prev = 11;
                  _context.t0 = _context["catch"](4);
                  message = _context.t0.message;

                  _this2.logger.error('Error in smart action load hook: ', message);

                  return _context.abrupt("return", response.status(500).send({
                    message: message
                  }));

                case 16:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, null, [[4, 11]]);
        }));

        return function (_x, _x2) {
          return _ref2.apply(this, arguments);
        };
      }();
    }
    /**
     * Generate path for a smart action route.
     *
     * @param {*} action The smart action
     * @param {String} path The path to the hook
     * @param {*} options Environement actions
     * @returns {String} The generated path
     */

  }, {
    key: "getRoute",
    value: function getRoute(action, path, options) {
      if (action.endpoint) {
        return this.path.generateForSmartActionCustomEndpoint("".concat(action.endpoint, "/").concat(path), options);
      }

      var actionName = this.stringUtils.parameterize(action.name);
      return this.path.generate("actions/".concat(actionName, "/").concat(path), options);
    }
    /**
     *  Generate routes for smart action hooks (and the legacy values object).
     *
     * @param {*} app Express instance (route are attached to this object)
     * @param {*} model The model associated with the action
     * @param {*} Implementation Gives access to current Implementation (mongoose or sequelize)
     * @param {*} options Environment options
     * @param {*} auth Auth instance
     */

  }, {
    key: "perform",
    value: function perform(app, model, Implementation, options, auth) {
      var _this3 = this;

      var modelName = Implementation.getModelName(model);
      var schema = this.schemasGenerator.schemas[modelName];
      if (!schema.actions) return; // Create a `values` routes for smart actions.
      // One route is created for each action which have a `values` property.

      schema.actions.filter(function (action) {
        return action.values;
      }).forEach(function (action) {
        app.post(_this3.getRoute(action, 'values', options), auth.ensureAuthenticated, _this3.getValuesController(action));
      }); // Create a `load` routes for smart actions.
      // One route is created for each action which have a `hooks.load` property.

      schema.actions.filter(function (action) {
        return action.hooks && action.hooks.load;
      }).forEach(function (action) {
        app.post(_this3.getRoute(action, 'hooks/load', options), auth.ensureAuthenticated, _this3.getHookLoadController(action, model, Implementation));
      });
    }
  }]);
  return Actions;
}();

module.exports = Actions;