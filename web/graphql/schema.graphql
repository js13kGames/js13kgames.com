"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""All input for the create `Edition` mutation."""
input CreateEditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Edition` to be created by this mutation."""
  edition: EditionInput!
}

"""The output of our create `Edition` mutation."""
type CreateEditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Edition` that was created by this mutation."""
  edition: Edition

  """An edge for our `Edition`. May be used by Relay 1."""
  editionEdge(
    """The method to use when ordering `Edition`."""
    orderBy: [EditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EditionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `FlywaySchemaHistory` mutation."""
input CreateFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` to be created by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistoryInput!
}

"""The output of our create `FlywaySchemaHistory` mutation."""
type CreateFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` that was created by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistory

  """An edge for our `FlywaySchemaHistory`. May be used by Relay 1."""
  flywaySchemaHistoryEdge(
    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Game` mutation."""
input CreateGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Game` to be created by this mutation."""
  game: GameInput!
}

"""The output of our create `Game` mutation."""
type CreateGamePayload {
  """Reads a single `User` that is related to this `Game`."""
  author: User

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Edition` that is related to this `Game`."""
  edition: Edition

  """The `Game` that was created by this mutation."""
  game: Game

  """An edge for our `Game`. May be used by Relay 1."""
  gameEdge(
    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GamesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `HeroDatum` mutation."""
input CreateHeroDatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HeroDatum` to be created by this mutation."""
  heroDatum: HeroDatumInput!
}

"""The output of our create `HeroDatum` mutation."""
type CreateHeroDatumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HeroDatum` that was created by this mutation."""
  heroDatum: HeroDatum

  """An edge for our `HeroDatum`. May be used by Relay 1."""
  heroDatumEdge(
    """The method to use when ordering `HeroDatum`."""
    orderBy: [HeroDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): HeroDataEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `MenuItem` mutation."""
input CreateMenuItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MenuItem` to be created by this mutation."""
  menuItem: MenuItemInput!
}

"""The output of our create `MenuItem` mutation."""
type CreateMenuItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MenuItem` that was created by this mutation."""
  menuItem: MenuItem

  """An edge for our `MenuItem`. May be used by Relay 1."""
  menuItemEdge(
    """The method to use when ordering `MenuItem`."""
    orderBy: [MenuItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MenuItemsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `SocialLink` mutation."""
input CreateSocialLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SocialLink` to be created by this mutation."""
  socialLink: SocialLinkInput!
}

"""The output of our create `SocialLink` mutation."""
type CreateSocialLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SocialLink` that was created by this mutation."""
  socialLink: SocialLink

  """An edge for our `SocialLink`. May be used by Relay 1."""
  socialLinkEdge(
    """The method to use when ordering `SocialLink`."""
    orderBy: [SocialLinksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SocialLinksEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteEditionByNodeId` mutation."""
input DeleteEditionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Edition` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteEdition` mutation."""
input DeleteEditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Edition` mutation."""
type DeleteEditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedEditionNodeId: ID

  """The `Edition` that was deleted by this mutation."""
  edition: Edition

  """An edge for our `Edition`. May be used by Relay 1."""
  editionEdge(
    """The method to use when ordering `Edition`."""
    orderBy: [EditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EditionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteFlywaySchemaHistoryByNodeId` mutation."""
input DeleteFlywaySchemaHistoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FlywaySchemaHistory` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteFlywaySchemaHistory` mutation."""
input DeleteFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  installedRank: Int!
}

"""The output of our delete `FlywaySchemaHistory` mutation."""
type DeleteFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedFlywaySchemaHistoryNodeId: ID

  """The `FlywaySchemaHistory` that was deleted by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistory

  """An edge for our `FlywaySchemaHistory`. May be used by Relay 1."""
  flywaySchemaHistoryEdge(
    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGameByNodeId` mutation."""
input DeleteGameByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Game` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGame` mutation."""
input DeleteGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `Game` mutation."""
type DeleteGamePayload {
  """Reads a single `User` that is related to this `Game`."""
  author: User

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGameNodeId: ID

  """Reads a single `Edition` that is related to this `Game`."""
  edition: Edition

  """The `Game` that was deleted by this mutation."""
  game: Game

  """An edge for our `Game`. May be used by Relay 1."""
  gameEdge(
    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GamesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteHeroDatumByNodeId` mutation."""
input DeleteHeroDatumByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HeroDatum` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteHeroDatum` mutation."""
input DeleteHeroDatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `HeroDatum` mutation."""
type DeleteHeroDatumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedHeroDatumNodeId: ID

  """The `HeroDatum` that was deleted by this mutation."""
  heroDatum: HeroDatum

  """An edge for our `HeroDatum`. May be used by Relay 1."""
  heroDatumEdge(
    """The method to use when ordering `HeroDatum`."""
    orderBy: [HeroDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): HeroDataEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMenuItemByNodeId` mutation."""
input DeleteMenuItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MenuItem` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMenuItem` mutation."""
input DeleteMenuItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `MenuItem` mutation."""
type DeleteMenuItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMenuItemNodeId: ID

  """The `MenuItem` that was deleted by this mutation."""
  menuItem: MenuItem

  """An edge for our `MenuItem`. May be used by Relay 1."""
  menuItemEdge(
    """The method to use when ordering `MenuItem`."""
    orderBy: [MenuItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MenuItemsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteSocialLinkByNodeId` mutation."""
input DeleteSocialLinkByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SocialLink` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteSocialLink` mutation."""
input DeleteSocialLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `SocialLink` mutation."""
type DeleteSocialLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedSocialLinkNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SocialLink` that was deleted by this mutation."""
  socialLink: SocialLink

  """An edge for our `SocialLink`. May be used by Relay 1."""
  socialLinkEdge(
    """The method to use when ordering `SocialLink`."""
    orderBy: [SocialLinksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SocialLinksEdge
}

"""All input for the `deleteUserByIdentityId` mutation."""
input DeleteUserByIdentityIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  identityId: String!
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was deleted by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type Edition implements Node {
  createdAt: Datetime!
  endsAt: Datetime!

  """Reads and enables pagination through a set of `Game`."""
  games(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GamesConnection!
  id: UUID!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  startsAt: Datetime!
  theme: String!
  updatedAt: Datetime!
}

"""
A condition to be used against `Edition` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EditionCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `endsAt` field."""
  endsAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `startsAt` field."""
  startsAt: Datetime

  """Checks for equality with the object’s `theme` field."""
  theme: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Edition` object types. All fields are combined with a logical ‘and.’
"""
input EditionFilter {
  """Checks for all expressions in this list."""
  and: [EditionFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `endsAt` field."""
  endsAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: EditionFilter

  """Checks for any expressions in this list."""
  or: [EditionFilter!]

  """Filter by the object’s `startsAt` field."""
  startsAt: DatetimeFilter

  """Filter by the object’s `theme` field."""
  theme: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Edition`"""
input EditionInput {
  createdAt: Datetime
  endsAt: Datetime!
  id: UUID
  name: String!
  startsAt: Datetime!
  theme: String!
  updatedAt: Datetime
}

"""
Represents an update to a `Edition`. Fields that are set will be updated.
"""
input EditionPatch {
  createdAt: Datetime
  endsAt: Datetime
  id: UUID
  name: String
  startsAt: Datetime
  theme: String
  updatedAt: Datetime
}

"""A connection to a list of `Edition` values."""
type EditionsConnection {
  """
  A list of edges which contains the `Edition` and cursor to aid in pagination.
  """
  edges: [EditionsEdge!]!

  """A list of `Edition` objects."""
  nodes: [Edition!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Edition` you could get from the connection."""
  totalCount: Int!
}

"""A `Edition` edge in the connection."""
type EditionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Edition` at the end of the edge."""
  node: Edition!
}

"""Methods to use when ordering `Edition`."""
enum EditionsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ENDS_AT_ASC
  ENDS_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STARTS_AT_ASC
  STARTS_AT_DESC
  THEME_ASC
  THEME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A connection to a list of `FlywaySchemaHistory` values."""
type FlywaySchemaHistoriesConnection {
  """
  A list of edges which contains the `FlywaySchemaHistory` and cursor to aid in pagination.
  """
  edges: [FlywaySchemaHistoriesEdge!]!

  """A list of `FlywaySchemaHistory` objects."""
  nodes: [FlywaySchemaHistory!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `FlywaySchemaHistory` you could get from the connection.
  """
  totalCount: Int!
}

"""A `FlywaySchemaHistory` edge in the connection."""
type FlywaySchemaHistoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `FlywaySchemaHistory` at the end of the edge."""
  node: FlywaySchemaHistory!
}

"""Methods to use when ordering `FlywaySchemaHistory`."""
enum FlywaySchemaHistoriesOrderBy {
  CHECKSUM_ASC
  CHECKSUM_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  EXECUTION_TIME_ASC
  EXECUTION_TIME_DESC
  INSTALLED_BY_ASC
  INSTALLED_BY_DESC
  INSTALLED_ON_ASC
  INSTALLED_ON_DESC
  INSTALLED_RANK_ASC
  INSTALLED_RANK_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SCRIPT_ASC
  SCRIPT_DESC
  SUCCESS_ASC
  SUCCESS_DESC
  TYPE_ASC
  TYPE_DESC
  VERSION_ASC
  VERSION_DESC
}

type FlywaySchemaHistory implements Node {
  checksum: Int
  description: String!
  executionTime: Int!
  installedBy: String!
  installedOn: Datetime!
  installedRank: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  script: String!
  success: Boolean!
  type: String!
  version: String
}

"""
A condition to be used against `FlywaySchemaHistory` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input FlywaySchemaHistoryCondition {
  """Checks for equality with the object’s `checksum` field."""
  checksum: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `executionTime` field."""
  executionTime: Int

  """Checks for equality with the object’s `installedBy` field."""
  installedBy: String

  """Checks for equality with the object’s `installedOn` field."""
  installedOn: Datetime

  """Checks for equality with the object’s `installedRank` field."""
  installedRank: Int

  """Checks for equality with the object’s `script` field."""
  script: String

  """Checks for equality with the object’s `success` field."""
  success: Boolean

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `version` field."""
  version: String
}

"""
A filter to be used against `FlywaySchemaHistory` object types. All fields are combined with a logical ‘and.’
"""
input FlywaySchemaHistoryFilter {
  """Checks for all expressions in this list."""
  and: [FlywaySchemaHistoryFilter!]

  """Filter by the object’s `checksum` field."""
  checksum: IntFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `executionTime` field."""
  executionTime: IntFilter

  """Filter by the object’s `installedBy` field."""
  installedBy: StringFilter

  """Filter by the object’s `installedOn` field."""
  installedOn: DatetimeFilter

  """Filter by the object’s `installedRank` field."""
  installedRank: IntFilter

  """Negates the expression."""
  not: FlywaySchemaHistoryFilter

  """Checks for any expressions in this list."""
  or: [FlywaySchemaHistoryFilter!]

  """Filter by the object’s `script` field."""
  script: StringFilter

  """Filter by the object’s `success` field."""
  success: BooleanFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `version` field."""
  version: StringFilter
}

"""An input for mutations affecting `FlywaySchemaHistory`"""
input FlywaySchemaHistoryInput {
  checksum: Int
  description: String!
  executionTime: Int!
  installedBy: String!
  installedOn: Datetime
  installedRank: Int!
  script: String!
  success: Boolean!
  type: String!
  version: String
}

"""
Represents an update to a `FlywaySchemaHistory`. Fields that are set will be updated.
"""
input FlywaySchemaHistoryPatch {
  checksum: Int
  description: String
  executionTime: Int
  installedBy: String
  installedOn: Datetime
  installedRank: Int
  script: String
  success: Boolean
  type: String
  version: String
}

type Game implements Node {
  """Reads a single `User` that is related to this `Game`."""
  author: User
  authorId: UUID!
  createdAt: Datetime!
  description: String!

  """Reads a single `Edition` that is related to this `Game`."""
  edition: Edition
  editionId: UUID!
  githubLink: String!
  id: UUID!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  photo: String!
  updatedAt: Datetime!
}

"""
A condition to be used against `Game` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GameCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `editionId` field."""
  editionId: UUID

  """Checks for equality with the object’s `githubLink` field."""
  githubLink: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `photo` field."""
  photo: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Game` object types. All fields are combined with a logical ‘and.’
"""
input GameFilter {
  """Checks for all expressions in this list."""
  and: [GameFilter!]

  """Filter by the object’s `authorId` field."""
  authorId: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `editionId` field."""
  editionId: UUIDFilter

  """Filter by the object’s `githubLink` field."""
  githubLink: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: GameFilter

  """Checks for any expressions in this list."""
  or: [GameFilter!]

  """Filter by the object’s `photo` field."""
  photo: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Game`"""
input GameInput {
  authorId: UUID!
  createdAt: Datetime
  description: String!
  editionId: UUID!
  githubLink: String!
  id: UUID
  name: String!
  photo: String!
  updatedAt: Datetime
}

"""Represents an update to a `Game`. Fields that are set will be updated."""
input GamePatch {
  authorId: UUID
  createdAt: Datetime
  description: String
  editionId: UUID
  githubLink: String
  id: UUID
  name: String
  photo: String
  updatedAt: Datetime
}

"""A connection to a list of `Game` values."""
type GamesConnection {
  """
  A list of edges which contains the `Game` and cursor to aid in pagination.
  """
  edges: [GamesEdge!]!

  """A list of `Game` objects."""
  nodes: [Game!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Game` you could get from the connection."""
  totalCount: Int!
}

"""A `Game` edge in the connection."""
type GamesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Game` at the end of the edge."""
  node: Game!
}

"""Methods to use when ordering `Game`."""
enum GamesOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  EDITION_ID_ASC
  EDITION_ID_DESC
  GITHUB_LINK_ASC
  GITHUB_LINK_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PHOTO_ASC
  PHOTO_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""All input for the `getOrCreateUser` mutation."""
input GetOrCreateUserInput {
  avatar: String

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
  identity: String
  name: String
  userName: String
}

"""The output of our `getOrCreateUser` mutation."""
type GetOrCreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A connection to a list of `HeroDatum` values."""
type HeroDataConnection {
  """
  A list of edges which contains the `HeroDatum` and cursor to aid in pagination.
  """
  edges: [HeroDataEdge!]!

  """A list of `HeroDatum` objects."""
  nodes: [HeroDatum!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `HeroDatum` you could get from the connection."""
  totalCount: Int!
}

"""A `HeroDatum` edge in the connection."""
type HeroDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HeroDatum` at the end of the edge."""
  node: HeroDatum!
}

"""Methods to use when ordering `HeroDatum`."""
enum HeroDataOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  BACKGROUND_IMAGE_ASC
  BACKGROUND_IMAGE_DESC
  CALL_TO_ACTION_TEXT_ASC
  CALL_TO_ACTION_TEXT_DESC
  CALL_TO_ACTION_URL_ASC
  CALL_TO_ACTION_URL_DESC
  COUNTDOWN_DATE_ASC
  COUNTDOWN_DATE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PRIMARY_TEXT_ASC
  PRIMARY_TEXT_DESC
  SECONDARY_TEXT_ASC
  SECONDARY_TEXT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type HeroDatum implements Node {
  active: Boolean!
  backgroundImage: String!
  callToActionText: String!
  callToActionUrl: String!
  countdownDate: Datetime
  createdAt: Datetime!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  primaryText: String!
  secondaryText: String!
  updatedAt: Datetime!
}

"""
A condition to be used against `HeroDatum` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input HeroDatumCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `backgroundImage` field."""
  backgroundImage: String

  """Checks for equality with the object’s `callToActionText` field."""
  callToActionText: String

  """Checks for equality with the object’s `callToActionUrl` field."""
  callToActionUrl: String

  """Checks for equality with the object’s `countdownDate` field."""
  countdownDate: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `primaryText` field."""
  primaryText: String

  """Checks for equality with the object’s `secondaryText` field."""
  secondaryText: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `HeroDatum` object types. All fields are combined with a logical ‘and.’
"""
input HeroDatumFilter {
  """Filter by the object’s `active` field."""
  active: BooleanFilter

  """Checks for all expressions in this list."""
  and: [HeroDatumFilter!]

  """Filter by the object’s `backgroundImage` field."""
  backgroundImage: StringFilter

  """Filter by the object’s `callToActionText` field."""
  callToActionText: StringFilter

  """Filter by the object’s `callToActionUrl` field."""
  callToActionUrl: StringFilter

  """Filter by the object’s `countdownDate` field."""
  countdownDate: DatetimeFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: HeroDatumFilter

  """Checks for any expressions in this list."""
  or: [HeroDatumFilter!]

  """Filter by the object’s `primaryText` field."""
  primaryText: StringFilter

  """Filter by the object’s `secondaryText` field."""
  secondaryText: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `HeroDatum`"""
input HeroDatumInput {
  active: Boolean
  backgroundImage: String!
  callToActionText: String!
  callToActionUrl: String!
  countdownDate: Datetime
  createdAt: Datetime
  id: UUID
  primaryText: String!
  secondaryText: String!
  updatedAt: Datetime
}

"""
Represents an update to a `HeroDatum`. Fields that are set will be updated.
"""
input HeroDatumPatch {
  active: Boolean
  backgroundImage: String
  callToActionText: String
  callToActionUrl: String
  countdownDate: Datetime
  createdAt: Datetime
  id: UUID
  primaryText: String
  secondaryText: String
  updatedAt: Datetime
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

type MenuItem implements Node {
  active: Boolean!
  createdAt: Datetime!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  orderNumber: Int
  title: String!
  updatedAt: Datetime!
  url: String!
}

"""
A condition to be used against `MenuItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MenuItemCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `orderNumber` field."""
  orderNumber: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `url` field."""
  url: String
}

"""
A filter to be used against `MenuItem` object types. All fields are combined with a logical ‘and.’
"""
input MenuItemFilter {
  """Filter by the object’s `active` field."""
  active: BooleanFilter

  """Checks for all expressions in this list."""
  and: [MenuItemFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: MenuItemFilter

  """Checks for any expressions in this list."""
  or: [MenuItemFilter!]

  """Filter by the object’s `orderNumber` field."""
  orderNumber: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `url` field."""
  url: StringFilter
}

"""An input for mutations affecting `MenuItem`"""
input MenuItemInput {
  active: Boolean
  createdAt: Datetime
  id: UUID
  orderNumber: Int
  title: String!
  updatedAt: Datetime
  url: String!
}

"""
Represents an update to a `MenuItem`. Fields that are set will be updated.
"""
input MenuItemPatch {
  active: Boolean
  createdAt: Datetime
  id: UUID
  orderNumber: Int
  title: String
  updatedAt: Datetime
  url: String
}

"""A connection to a list of `MenuItem` values."""
type MenuItemsConnection {
  """
  A list of edges which contains the `MenuItem` and cursor to aid in pagination.
  """
  edges: [MenuItemsEdge!]!

  """A list of `MenuItem` objects."""
  nodes: [MenuItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MenuItem` you could get from the connection."""
  totalCount: Int!
}

"""A `MenuItem` edge in the connection."""
type MenuItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MenuItem` at the end of the edge."""
  node: MenuItem!
}

"""Methods to use when ordering `MenuItem`."""
enum MenuItemsOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  ORDER_NUMBER_ASC
  ORDER_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  URL_ASC
  URL_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Edition`."""
  createEdition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEditionInput!
  ): CreateEditionPayload

  """Creates a single `FlywaySchemaHistory`."""
  createFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFlywaySchemaHistoryInput!
  ): CreateFlywaySchemaHistoryPayload

  """Creates a single `Game`."""
  createGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGameInput!
  ): CreateGamePayload

  """Creates a single `HeroDatum`."""
  createHeroDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHeroDatumInput!
  ): CreateHeroDatumPayload

  """Creates a single `MenuItem`."""
  createMenuItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMenuItemInput!
  ): CreateMenuItemPayload

  """Creates a single `SocialLink`."""
  createSocialLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSocialLinkInput!
  ): CreateSocialLinkPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Deletes a single `Edition` using a unique key."""
  deleteEdition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEditionInput!
  ): DeleteEditionPayload

  """Deletes a single `Edition` using its globally unique id."""
  deleteEditionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEditionByNodeIdInput!
  ): DeleteEditionPayload

  """Deletes a single `FlywaySchemaHistory` using a unique key."""
  deleteFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFlywaySchemaHistoryInput!
  ): DeleteFlywaySchemaHistoryPayload

  """Deletes a single `FlywaySchemaHistory` using its globally unique id."""
  deleteFlywaySchemaHistoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFlywaySchemaHistoryByNodeIdInput!
  ): DeleteFlywaySchemaHistoryPayload

  """Deletes a single `Game` using a unique key."""
  deleteGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameInput!
  ): DeleteGamePayload

  """Deletes a single `Game` using its globally unique id."""
  deleteGameByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGameByNodeIdInput!
  ): DeleteGamePayload

  """Deletes a single `HeroDatum` using a unique key."""
  deleteHeroDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHeroDatumInput!
  ): DeleteHeroDatumPayload

  """Deletes a single `HeroDatum` using its globally unique id."""
  deleteHeroDatumByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHeroDatumByNodeIdInput!
  ): DeleteHeroDatumPayload

  """Deletes a single `MenuItem` using a unique key."""
  deleteMenuItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMenuItemInput!
  ): DeleteMenuItemPayload

  """Deletes a single `MenuItem` using its globally unique id."""
  deleteMenuItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMenuItemByNodeIdInput!
  ): DeleteMenuItemPayload

  """Deletes a single `SocialLink` using a unique key."""
  deleteSocialLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSocialLinkInput!
  ): DeleteSocialLinkPayload

  """Deletes a single `SocialLink` using its globally unique id."""
  deleteSocialLinkByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSocialLinkByNodeIdInput!
  ): DeleteSocialLinkPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByIdentityId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdentityIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload
  getOrCreateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: GetOrCreateUserInput!
  ): GetOrCreateUserPayload

  """Updates a single `Edition` using a unique key and a patch."""
  updateEdition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEditionInput!
  ): UpdateEditionPayload

  """Updates a single `Edition` using its globally unique id and a patch."""
  updateEditionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEditionByNodeIdInput!
  ): UpdateEditionPayload

  """Updates a single `FlywaySchemaHistory` using a unique key and a patch."""
  updateFlywaySchemaHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFlywaySchemaHistoryInput!
  ): UpdateFlywaySchemaHistoryPayload

  """
  Updates a single `FlywaySchemaHistory` using its globally unique id and a patch.
  """
  updateFlywaySchemaHistoryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFlywaySchemaHistoryByNodeIdInput!
  ): UpdateFlywaySchemaHistoryPayload

  """Updates a single `Game` using a unique key and a patch."""
  updateGame(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameInput!
  ): UpdateGamePayload

  """Updates a single `Game` using its globally unique id and a patch."""
  updateGameByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGameByNodeIdInput!
  ): UpdateGamePayload

  """Updates a single `HeroDatum` using a unique key and a patch."""
  updateHeroDatum(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHeroDatumInput!
  ): UpdateHeroDatumPayload

  """Updates a single `HeroDatum` using its globally unique id and a patch."""
  updateHeroDatumByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHeroDatumByNodeIdInput!
  ): UpdateHeroDatumPayload

  """Updates a single `MenuItem` using a unique key and a patch."""
  updateMenuItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMenuItemInput!
  ): UpdateMenuItemPayload

  """Updates a single `MenuItem` using its globally unique id and a patch."""
  updateMenuItemByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMenuItemByNodeIdInput!
  ): UpdateMenuItemPayload

  """Updates a single `SocialLink` using a unique key and a patch."""
  updateSocialLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSocialLinkInput!
  ): UpdateSocialLinkPayload

  """
  Updates a single `SocialLink` using its globally unique id and a patch.
  """
  updateSocialLinkByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSocialLinkByNodeIdInput!
  ): UpdateSocialLinkPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByIdentityId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdentityIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  edition(id: UUID!): Edition

  """Reads a single `Edition` using its globally unique `ID`."""
  editionByNodeId(
    """The globally unique `ID` to be used in selecting a single `Edition`."""
    nodeId: ID!
  ): Edition

  """Reads and enables pagination through a set of `Edition`."""
  editions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EditionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EditionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Edition`."""
    orderBy: [EditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EditionsConnection

  """Reads and enables pagination through a set of `FlywaySchemaHistory`."""
  flywaySchemaHistories(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FlywaySchemaHistoryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FlywaySchemaHistoryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesConnection
  flywaySchemaHistory(installedRank: Int!): FlywaySchemaHistory

  """Reads a single `FlywaySchemaHistory` using its globally unique `ID`."""
  flywaySchemaHistoryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `FlywaySchemaHistory`.
    """
    nodeId: ID!
  ): FlywaySchemaHistory
  game(id: UUID!): Game

  """Reads a single `Game` using its globally unique `ID`."""
  gameByNodeId(
    """The globally unique `ID` to be used in selecting a single `Game`."""
    nodeId: ID!
  ): Game

  """Reads and enables pagination through a set of `Game`."""
  games(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GamesConnection

  """Reads and enables pagination through a set of `HeroDatum`."""
  heroData(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HeroDatumCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: HeroDatumFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `HeroDatum`."""
    orderBy: [HeroDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): HeroDataConnection
  heroDatum(id: UUID!): HeroDatum

  """Reads a single `HeroDatum` using its globally unique `ID`."""
  heroDatumByNodeId(
    """The globally unique `ID` to be used in selecting a single `HeroDatum`."""
    nodeId: ID!
  ): HeroDatum
  menuItem(id: UUID!): MenuItem

  """Reads a single `MenuItem` using its globally unique `ID`."""
  menuItemByNodeId(
    """The globally unique `ID` to be used in selecting a single `MenuItem`."""
    nodeId: ID!
  ): MenuItem

  """Reads and enables pagination through a set of `MenuItem`."""
  menuItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MenuItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MenuItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MenuItem`."""
    orderBy: [MenuItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MenuItemsConnection

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  socialLink(id: UUID!): SocialLink

  """Reads a single `SocialLink` using its globally unique `ID`."""
  socialLinkByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `SocialLink`.
    """
    nodeId: ID!
  ): SocialLink

  """Reads and enables pagination through a set of `SocialLink`."""
  socialLinks(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SocialLinkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SocialLinkFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `SocialLink`."""
    orderBy: [SocialLinksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SocialLinksConnection
  user(id: UUID!): User
  userByIdentityId(identityId: String!): User

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection
}

type SocialLink implements Node {
  createdAt: Datetime!
  id: UUID!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  title: String!
  updatedAt: Datetime!
  url: String!
}

"""
A condition to be used against `SocialLink` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SocialLinkCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `url` field."""
  url: String
}

"""
A filter to be used against `SocialLink` object types. All fields are combined with a logical ‘and.’
"""
input SocialLinkFilter {
  """Checks for all expressions in this list."""
  and: [SocialLinkFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Negates the expression."""
  not: SocialLinkFilter

  """Checks for any expressions in this list."""
  or: [SocialLinkFilter!]

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `url` field."""
  url: StringFilter
}

"""An input for mutations affecting `SocialLink`"""
input SocialLinkInput {
  createdAt: Datetime
  id: UUID
  title: String!
  updatedAt: Datetime
  url: String!
}

"""
Represents an update to a `SocialLink`. Fields that are set will be updated.
"""
input SocialLinkPatch {
  createdAt: Datetime
  id: UUID
  title: String
  updatedAt: Datetime
  url: String
}

"""A connection to a list of `SocialLink` values."""
type SocialLinksConnection {
  """
  A list of edges which contains the `SocialLink` and cursor to aid in pagination.
  """
  edges: [SocialLinksEdge!]!

  """A list of `SocialLink` objects."""
  nodes: [SocialLink!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SocialLink` you could get from the connection."""
  totalCount: Int!
}

"""A `SocialLink` edge in the connection."""
type SocialLinksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SocialLink` at the end of the edge."""
  node: SocialLink!
}

"""Methods to use when ordering `SocialLink`."""
enum SocialLinksOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  URL_ASC
  URL_DESC
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value."""
  equalTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID

  """Included in the specified list."""
  in: [UUID!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """Not included in the specified list."""
  notIn: [UUID!]
}

"""All input for the `updateEditionByNodeId` mutation."""
input UpdateEditionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Edition` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Edition` being updated.
  """
  patch: EditionPatch!
}

"""All input for the `updateEdition` mutation."""
input UpdateEditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Edition` being updated.
  """
  patch: EditionPatch!
}

"""The output of our update `Edition` mutation."""
type UpdateEditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Edition` that was updated by this mutation."""
  edition: Edition

  """An edge for our `Edition`. May be used by Relay 1."""
  editionEdge(
    """The method to use when ordering `Edition`."""
    orderBy: [EditionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): EditionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateFlywaySchemaHistoryByNodeId` mutation."""
input UpdateFlywaySchemaHistoryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `FlywaySchemaHistory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `FlywaySchemaHistory` being updated.
  """
  patch: FlywaySchemaHistoryPatch!
}

"""All input for the `updateFlywaySchemaHistory` mutation."""
input UpdateFlywaySchemaHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  installedRank: Int!

  """
  An object where the defined keys will be set on the `FlywaySchemaHistory` being updated.
  """
  patch: FlywaySchemaHistoryPatch!
}

"""The output of our update `FlywaySchemaHistory` mutation."""
type UpdateFlywaySchemaHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `FlywaySchemaHistory` that was updated by this mutation."""
  flywaySchemaHistory: FlywaySchemaHistory

  """An edge for our `FlywaySchemaHistory`. May be used by Relay 1."""
  flywaySchemaHistoryEdge(
    """The method to use when ordering `FlywaySchemaHistory`."""
    orderBy: [FlywaySchemaHistoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FlywaySchemaHistoriesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGameByNodeId` mutation."""
input UpdateGameByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Game` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Game` being updated.
  """
  patch: GamePatch!
}

"""All input for the `updateGame` mutation."""
input UpdateGameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `Game` being updated.
  """
  patch: GamePatch!
}

"""The output of our update `Game` mutation."""
type UpdateGamePayload {
  """Reads a single `User` that is related to this `Game`."""
  author: User

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Edition` that is related to this `Game`."""
  edition: Edition

  """The `Game` that was updated by this mutation."""
  game: Game

  """An edge for our `Game`. May be used by Relay 1."""
  gameEdge(
    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GamesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateHeroDatumByNodeId` mutation."""
input UpdateHeroDatumByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HeroDatum` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `HeroDatum` being updated.
  """
  patch: HeroDatumPatch!
}

"""All input for the `updateHeroDatum` mutation."""
input UpdateHeroDatumInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `HeroDatum` being updated.
  """
  patch: HeroDatumPatch!
}

"""The output of our update `HeroDatum` mutation."""
type UpdateHeroDatumPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HeroDatum` that was updated by this mutation."""
  heroDatum: HeroDatum

  """An edge for our `HeroDatum`. May be used by Relay 1."""
  heroDatumEdge(
    """The method to use when ordering `HeroDatum`."""
    orderBy: [HeroDataOrderBy!] = [PRIMARY_KEY_ASC]
  ): HeroDataEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMenuItemByNodeId` mutation."""
input UpdateMenuItemByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MenuItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MenuItem` being updated.
  """
  patch: MenuItemPatch!
}

"""All input for the `updateMenuItem` mutation."""
input UpdateMenuItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `MenuItem` being updated.
  """
  patch: MenuItemPatch!
}

"""The output of our update `MenuItem` mutation."""
type UpdateMenuItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MenuItem` that was updated by this mutation."""
  menuItem: MenuItem

  """An edge for our `MenuItem`. May be used by Relay 1."""
  menuItemEdge(
    """The method to use when ordering `MenuItem`."""
    orderBy: [MenuItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MenuItemsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateSocialLinkByNodeId` mutation."""
input UpdateSocialLinkByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SocialLink` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SocialLink` being updated.
  """
  patch: SocialLinkPatch!
}

"""All input for the `updateSocialLink` mutation."""
input UpdateSocialLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `SocialLink` being updated.
  """
  patch: SocialLinkPatch!
}

"""The output of our update `SocialLink` mutation."""
type UpdateSocialLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `SocialLink` that was updated by this mutation."""
  socialLink: SocialLink

  """An edge for our `SocialLink`. May be used by Relay 1."""
  socialLinkEdge(
    """The method to use when ordering `SocialLink`."""
    orderBy: [SocialLinksOrderBy!] = [PRIMARY_KEY_ASC]
  ): SocialLinksEdge
}

"""All input for the `updateUserByIdentityId` mutation."""
input UpdateUserByIdentityIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  identityId: String!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User implements Node {
  active: Boolean!

  """Reads and enables pagination through a set of `Game`."""
  authoredGames(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GameCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GameFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Game`."""
    orderBy: [GamesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GamesConnection!
  avatar: String!
  createdAt: Datetime!
  description: String!
  email: String!
  id: UUID!
  identityId: String!
  kind: UserTypeT!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
  userName: String!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `active` field."""
  active: Boolean

  """Checks for equality with the object’s `avatar` field."""
  avatar: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `identityId` field."""
  identityId: String

  """Checks for equality with the object’s `kind` field."""
  kind: UserTypeT

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userName` field."""
  userName: String
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Filter by the object’s `active` field."""
  active: BooleanFilter

  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Filter by the object’s `avatar` field."""
  avatar: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `identityId` field."""
  identityId: StringFilter

  """Filter by the object’s `kind` field."""
  kind: UserTypeTFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: UserFilter

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `userName` field."""
  userName: StringFilter
}

"""An input for mutations affecting `User`"""
input UserInput {
  active: Boolean
  avatar: String!
  createdAt: Datetime
  description: String!
  email: String!
  id: UUID
  identityId: String!
  kind: UserTypeT
  name: String!
  updatedAt: Datetime
  userName: String!
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  active: Boolean
  avatar: String
  createdAt: Datetime
  description: String
  email: String
  id: UUID
  identityId: String
  kind: UserTypeT
  name: String
  updatedAt: Datetime
  userName: String
}

enum UserTypeT {
  ADMIN
  EXPERT
  REGULAR
  TEAM
}

"""
A filter to be used against UserTypeT fields. All fields are combined with a logical ‘and.’
"""
input UserTypeTFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UserTypeT

  """Equal to the specified value."""
  equalTo: UserTypeT

  """Greater than the specified value."""
  greaterThan: UserTypeT

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UserTypeT

  """Included in the specified list."""
  in: [UserTypeT!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UserTypeT

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UserTypeT

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UserTypeT

  """Not equal to the specified value."""
  notEqualTo: UserTypeT

  """Not included in the specified list."""
  notIn: [UserTypeT!]
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  ACTIVE_ASC
  ACTIVE_DESC
  AVATAR_ASC
  AVATAR_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  EMAIL_ASC
  EMAIL_DESC
  IDENTITY_ID_ASC
  IDENTITY_ID_DESC
  ID_ASC
  ID_DESC
  KIND_ASC
  KIND_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_NAME_ASC
  USER_NAME_DESC
}
