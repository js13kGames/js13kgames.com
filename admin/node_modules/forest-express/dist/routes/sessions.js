"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var path = require('../services/path');

var errorMessages = require('../utils/error-messages');

var LoginHandler = require('../services/login-handler');

module.exports = function Sessions(app, opts) {
  var authSecret = opts.authSecret,
      envSecret = opts.envSecret;

  function checkAuthSecret(request, response, next) {
    if (!authSecret) {
      return response.status(401).send({
        errors: [{
          detail: errorMessages.CONFIGURATION.AUTH_SECRET_MISSING
        }]
      });
    }

    return next();
  }

  function formatAndSendError(response, error) {
    var body;

    if (error && error.message) {
      body = {
        errors: [{
          detail: error.message
        }]
      };
    }

    return response.status(401).send(body);
  }

  function processLogin(_x) {
    return _processLogin.apply(this, arguments);
  }

  function _processLogin() {
    _processLogin = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_ref) {
      var useGoogleAuthentication, renderingId, authData, response, twoFactorRegistration, projectId, twoFactorToken, responseData, twoWeeksInMilliseconds;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              useGoogleAuthentication = _ref.useGoogleAuthentication, renderingId = _ref.renderingId, authData = _ref.authData, response = _ref.response, twoFactorRegistration = _ref.twoFactorRegistration, projectId = _ref.projectId, twoFactorToken = _ref.twoFactorToken;
              _context.prev = 1;

              if (!(twoFactorRegistration && !twoFactorToken)) {
                _context.next = 4;
                break;
              }

              throw new Error();

            case 4:
              _context.next = 6;
              return new LoginHandler({
                renderingId: renderingId,
                envSecret: envSecret,
                authData: authData,
                useGoogleAuthentication: useGoogleAuthentication,
                authSecret: authSecret,
                twoFactorRegistration: twoFactorRegistration,
                projectId: projectId,
                twoFactorToken: twoFactorToken
              }).perform();

            case 6:
              responseData = _context.sent;

              // NOTICE: The token is empty at first authentication step if the 2FA option is active.
              if (responseData.token) {
                // NOTICE: Set a cookie to ensure secure authentication using export feature.
                twoWeeksInMilliseconds = 14 * 24 * 60 * 60;
                response.header('Set-Cookie', "forest_session_token=".concat(responseData.token, "; Max-Age=").concat(twoWeeksInMilliseconds));
              }

              response.send(responseData);
              _context.next = 14;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](1);
              formatAndSendError(response, _context.t0);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[1, 11]]);
    }));
    return _processLogin.apply(this, arguments);
  }

  function loginWithPassword(request, response) {
    var _request$body = request.body,
        email = _request$body.email,
        password = _request$body.password,
        renderingId = _request$body.renderingId,
        projectId = _request$body.projectId,
        twoFactorToken = _request$body.token;
    var twoFactorRegistration = !!request.body.twoFactorRegistration;
    processLogin({
      useGoogleAuthentication: false,
      renderingId: renderingId,
      authData: {
        email: email,
        password: password
      },
      response: response,
      twoFactorRegistration: twoFactorRegistration,
      projectId: projectId,
      twoFactorToken: twoFactorToken
    });
  }

  function loginWithGoogle(request, response) {
    var _request$body2 = request.body,
        forestToken = _request$body2.forestToken,
        renderingId = _request$body2.renderingId,
        projectId = _request$body2.projectId,
        twoFactorToken = _request$body2.token;
    var twoFactorRegistration = !!request.body.twoFactorRegistration;
    processLogin({
      useGoogleAuthentication: true,
      renderingId: renderingId,
      authData: {
        forestToken: forestToken
      },
      response: response,
      twoFactorRegistration: twoFactorRegistration,
      projectId: projectId,
      twoFactorToken: twoFactorToken
    });
  }

  this.perform = function () {
    app.post(path.generate('sessions', opts), checkAuthSecret, loginWithPassword);
    app.post(path.generate('sessions-google', opts), checkAuthSecret, loginWithGoogle);
  };
};