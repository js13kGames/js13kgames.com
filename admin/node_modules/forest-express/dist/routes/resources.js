"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var auth = require('../services/auth');

var path = require('../services/path');

var ResourceSerializer = require('../serializers/resource');

var ResourceDeserializer = require('../deserializers/resource');

var CSVExporter = require('../services/csv-exporter');

var ParamsFieldsDeserializer = require('../deserializers/params-fields');

var PermissionMiddlewareCreator = require('../middlewares/permissions');

var ConfigStore = require('../services/config-store');

var RecordsGetter = require('../services/exposed/records-getter.js');

var configStore = ConfigStore.getInstance();

module.exports = function Resources(app, model) {
  var _this = this;

  var Implementation = configStore.Implementation,
      integrator = configStore.integrator,
      lianaOptions = configStore.lianaOptions;
  var modelName = Implementation.getModelName(model);

  this.list = function (request, response, next) {
    var params = request.query;
    var fieldsPerModel = new ParamsFieldsDeserializer(params.fields).perform();
    return new Implementation.ResourcesGetter(model, lianaOptions, params).perform().then(function (results) {
      var records = results[0];
      var fieldsSearched = results[1];
      return new ResourceSerializer(Implementation, model, records, integrator, null, fieldsSearched, params.search, fieldsPerModel).perform();
    }).then(function (records) {
      response.send(records);
    })["catch"](next);
  };

  this.count = function (request, response, next) {
    var params = request.query;
    return new Implementation.ResourcesGetter(model, lianaOptions, params).count().then(function (count) {
      return response.send({
        count: count
      });
    })["catch"](next);
  };

  this.exportCSV = function (request, response, next) {
    var params = request.query;
    var recordsExporter = new Implementation.ResourcesExporter(model, lianaOptions, params);
    return new CSVExporter(params, response, modelName, recordsExporter).perform()["catch"](next);
  };

  this.get = function (request, response, next) {
    return new Implementation.ResourceGetter(model, request.params).perform().then(function (record) {
      return new ResourceSerializer(Implementation, model, record, integrator).perform();
    }).then(function (record) {
      response.send(record);
    })["catch"](next);
  };

  this.create = function (request, response, next) {
    new ResourceDeserializer(Implementation, model, request.body, true, {
      omitNullAttributes: true
    }).perform().then(function (params) {
      return new Implementation.ResourceCreator(model, params).perform();
    }).then(function (record) {
      return new ResourceSerializer(Implementation, model, record, integrator).perform();
    }).then(function (record) {
      response.send(record);
    })["catch"](next);
  };

  this.update = function (request, response, next) {
    new ResourceDeserializer(Implementation, model, request.body, false).perform().then(function (record) {
      new Implementation.ResourceUpdater(model, request.params, record).perform().then(function (updatedRecord) {
        return new ResourceSerializer(Implementation, model, updatedRecord, integrator).perform();
      }).then(function (updatedRecord) {
        response.send(updatedRecord);
        return updatedRecord;
      })["catch"](next);
    });
  };

  this.remove = function (request, response, next) {
    new Implementation.ResourceRemover(model, request.params).perform().then(function () {
      response.status(204).send();
    })["catch"](next);
  };

  this.removeMany = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(request, response, next) {
      var ids;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return new RecordsGetter(model).getIdsFromRequest(request);

            case 2:
              ids = _context.sent;
              _context.prev = 3;
              _context.next = 6;
              return new Implementation.ResourcesRemover(model, ids).perform();

            case 6:
              _context.next = 11;
              break;

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](3);
              next(_context.t0);

            case 11:
              response.status(204).send();

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[3, 8]]);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();

  var permissionMiddlewareCreator = new PermissionMiddlewareCreator(modelName);

  this.perform = function () {
    app.get("".concat(path.generate(modelName, lianaOptions), ".csv"), auth.ensureAuthenticated, permissionMiddlewareCreator["export"](), _this.exportCSV);
    app.get(path.generate(modelName, lianaOptions), auth.ensureAuthenticated, permissionMiddlewareCreator.list(), _this.list);
    app.get(path.generate("".concat(modelName, "/count"), lianaOptions), auth.ensureAuthenticated, permissionMiddlewareCreator.list(), _this.count);
    app.get(path.generate("".concat(modelName, "/:recordId"), lianaOptions), auth.ensureAuthenticated, permissionMiddlewareCreator.details(), _this.get);
    app.post(path.generate(modelName, lianaOptions), auth.ensureAuthenticated, permissionMiddlewareCreator.create(), _this.create);
    app.put(path.generate("".concat(modelName, "/:recordId"), lianaOptions), auth.ensureAuthenticated, permissionMiddlewareCreator.update(), _this.update);
    app["delete"](path.generate("".concat(modelName, "/:recordId"), lianaOptions), auth.ensureAuthenticated, permissionMiddlewareCreator["delete"](), _this.remove);
    app["delete"](path.generate(modelName, lianaOptions), auth.ensureAuthenticated, permissionMiddlewareCreator["delete"](), _this.removeMany);
  };
};