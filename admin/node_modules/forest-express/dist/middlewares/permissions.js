"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var httpError = require('http-errors');

var PermissionsChecker = require('../services/permissions-checker');

var logger = require('../services/logger');

var ConfigStore = require('../services/config-store');

var getRenderingIdFromUser = function getRenderingIdFromUser(user) {
  return user.renderingId;
};

var PermissionMiddlewareCreator = /*#__PURE__*/function () {
  function PermissionMiddlewareCreator(collectionName) {
    (0, _classCallCheck2["default"])(this, PermissionMiddlewareCreator);
    this.collectionName = collectionName;
    this.configStore = ConfigStore.getInstance();
  }

  (0, _createClass2["default"])(PermissionMiddlewareCreator, [{
    key: "_checkPermission",
    value: function _checkPermission(permissionName) {
      var _this = this;

      return function (request, response, next) {
        var environmentSecret = _this.configStore.lianaOptions.envSecret;
        var renderingId = getRenderingIdFromUser(request.user);
        var permissionInfos;

        switch (permissionName) {
          case 'actions':
            permissionInfos = PermissionMiddlewareCreator._getSmartActionInfoFromRequest(request);
            break;

          case 'list':
            permissionInfos = PermissionMiddlewareCreator._getCollectionListInfoFromRequest(request);
            break;

          default:
        }

        return new PermissionsChecker(environmentSecret, renderingId).checkPermissions(_this.collectionName, permissionName, permissionInfos).then(next)["catch"](function (error) {
          logger.error(error.message);
          next(httpError(403));
        });
      };
    }
  }, {
    key: "list",
    value: function list() {
      var _this2 = this;

      return function (request, response, next) {
        var searchToEdit = request.query.searchToEdit;
        var permissionName = searchToEdit ? 'searchToEdit' : 'list';
        return _this2._checkPermission(permissionName)(request, response, next);
      };
    }
  }, {
    key: "export",
    value: function _export() {
      return this._checkPermission('export');
    }
  }, {
    key: "details",
    value: function details() {
      return this._checkPermission('show');
    }
  }, {
    key: "create",
    value: function create() {
      return this._checkPermission('create');
    }
  }, {
    key: "update",
    value: function update() {
      return this._checkPermission('update');
    }
  }, {
    key: "delete",
    value: function _delete() {
      return this._checkPermission('delete');
    }
  }, {
    key: "smartAction",
    value: function smartAction() {
      return this._checkPermission('actions');
    }
  }], [{
    key: "_getSmartActionInfoFromRequest",
    value: function _getSmartActionInfoFromRequest(request) {
      return {
        userId: request.user.id,
        actionId: request.body.data.attributes.smart_action_id
      };
    }
  }, {
    key: "_getCollectionListInfoFromRequest",
    value: function _getCollectionListInfoFromRequest(request) {
      return _objectSpread({
        userId: request.user.id
      }, request.query);
    }
  }]);
  return PermissionMiddlewareCreator;
}();

module.exports = PermissionMiddlewareCreator;