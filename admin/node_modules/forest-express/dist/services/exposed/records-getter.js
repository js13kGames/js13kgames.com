"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var AbstractRecordService = require('./abstract-records-service');

var ParamsFieldsDeserializer = require('../../deserializers/params-fields');

var Schemas = require('../../generators/schemas');

var IdsFromRequestRetriever = require('../../services/ids-from-request-retriever');

var RecordsGetter = /*#__PURE__*/function (_AbstractRecordServic) {
  (0, _inherits2["default"])(RecordsGetter, _AbstractRecordServic);

  var _super = _createSuper(RecordsGetter);

  function RecordsGetter() {
    (0, _classCallCheck2["default"])(this, RecordsGetter);
    return _super.apply(this, arguments);
  }

  (0, _createClass2["default"])(RecordsGetter, [{
    key: "getAll",
    value: function getAll(params) {
      var _this = this;

      this.searchValue = params.search;
      this.fieldsPerModel = new ParamsFieldsDeserializer(params.fields).perform();
      return new this.Implementation.ResourcesGetter(this.model, this.lianaOptions, params).perform().then(function (_ref) {
        var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
            records = _ref2[0],
            fieldsSearched = _ref2[1];

        _this.fieldsSearched = fieldsSearched;
        return records;
      });
    } // NOTICE: This function accept either query or ID list params and return an ID list.
    //         It could be used to handle both "select all" (query) and "select some" (ids).
    //         It also handles related data.

  }, {
    key: "getIdsFromRequest",
    value: function () {
      var _getIdsFromRequest = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(params) {
        var _this2 = this;

        var isRelatedData, recordsGetter, recordsCounter, primaryKeysGetter;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                isRelatedData = function isRelatedData(attributes) {
                  return attributes.parentCollectionId && attributes.parentCollectionName && attributes.parentAssociationName;
                };

                recordsGetter = /*#__PURE__*/function () {
                  var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(attributes) {
                    var parentCollectionId, parentCollectionName, parentAssociationName, parentModel, _yield$_this2$Impleme, _yield$_this2$Impleme2, records;

                    return _regenerator["default"].wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            parentCollectionId = attributes.parentCollectionId, parentCollectionName = attributes.parentCollectionName, parentAssociationName = attributes.parentAssociationName;

                            if (!isRelatedData(attributes)) {
                              _context.next = 9;
                              break;
                            }

                            parentModel = _this2.Implementation.getModels()[parentCollectionName];
                            _context.next = 5;
                            return new _this2.Implementation.HasManyGetter(parentModel, _this2.model, _this2.lianaOptions, _objectSpread(_objectSpread(_objectSpread({}, params), attributes.allRecordsSubsetQuery), {}, {
                              page: attributes.page,
                              recordId: parentCollectionId,
                              associationName: parentAssociationName
                            })).perform();

                          case 5:
                            _yield$_this2$Impleme = _context.sent;
                            _yield$_this2$Impleme2 = (0, _slicedToArray2["default"])(_yield$_this2$Impleme, 1);
                            records = _yield$_this2$Impleme2[0];
                            return _context.abrupt("return", records);

                          case 9:
                            return _context.abrupt("return", _this2.getAll(_objectSpread(_objectSpread({}, attributes.allRecordsSubsetQuery), {}, {
                              page: attributes.page
                            })));

                          case 10:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function recordsGetter(_x2) {
                    return _ref3.apply(this, arguments);
                  };
                }();

                recordsCounter = /*#__PURE__*/function () {
                  var _ref4 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(attributes) {
                    var parentCollectionId, parentCollectionName, parentAssociationName, parentModel;
                    return _regenerator["default"].wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            parentCollectionId = attributes.parentCollectionId, parentCollectionName = attributes.parentCollectionName, parentAssociationName = attributes.parentAssociationName;

                            if (!isRelatedData(attributes)) {
                              _context2.next = 4;
                              break;
                            }

                            parentModel = _this2.Implementation.getModels()[parentCollectionName];
                            return _context2.abrupt("return", new _this2.Implementation.HasManyGetter(parentModel, _this2.model, _this2.lianaOptions, _objectSpread(_objectSpread({}, params), {}, {
                              recordId: parentCollectionId,
                              associationName: parentAssociationName
                            })).count());

                          case 4:
                            return _context2.abrupt("return", new _this2.Implementation.ResourcesGetter(_this2.model, _this2.lianaOptions, attributes.allRecordsSubsetQuery).count(attributes.allRecordsSubsetQuery));

                          case 5:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  }));

                  return function recordsCounter(_x3) {
                    return _ref4.apply(this, arguments);
                  };
                }();

                primaryKeysGetter = function primaryKeysGetter() {
                  return Schemas.schemas[_this2.Implementation.getModelName(_this2.model)];
                };

                return _context3.abrupt("return", new IdsFromRequestRetriever(recordsGetter, recordsCounter, primaryKeysGetter).perform(params));

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function getIdsFromRequest(_x) {
        return _getIdsFromRequest.apply(this, arguments);
      }

      return getIdsFromRequest;
    }()
  }]);
  return RecordsGetter;
}(AbstractRecordService);

module.exports = RecordsGetter;